var K=Object.defineProperty;var f=(a,e)=>K(a,"name",{value:e,configurable:!0});var G="registered as custom element";function U(a,e){console.warn(`missing implementation for ${e}(...data) in ${a.__proto__.constructor.name}`)}f(U,"NotImplemented");function C(a){return a.prototype.constructor.name.replace(/([A-Z])([a-z])/g,(e,r,t,$)=>{let x=`${r.toLowerCase()}${t}`;return $>0?`-${x}`:x})}f(C,"getElementTagName");var h=class extends HTMLElement{static{f(this,"CustomElement")}static register(e){if(!e[G]){let r=e.tagName||C(e);return customElements.define(r,e),e[G]=!0,customElements.whenDefined(r)}return Promise.resolve()}static get tagName(){return C(this)}constructor(e={}){super(),customElements.resolveScope||(customElements.resolveScope=function($){try{return $.getRootNode().host}catch(x){console.warn(x)}return window}),this._options=e;let r={childList:$=>{this.handleChildChanges(Array.from($.addedNodes),Array.from($.removedNodes)),this.render()},attributes:$=>{this.handleAttributeChange($.attributeName,$.oldValue,this.getAttribute($.attributeName)),this.render()}};this._observer=new MutationObserver($=>{this.isConnected&&$.forEach(x=>{r[x.type](x)})}),this._observer.observe(this,{childList:!0,attributes:!0});let t={mode:"open"};this._shadow=this.attachShadow(t),this._style=document.createElement("style"),this._style.textContent=this.getStyle(),this._options.header!==!1&&(this._header=document.createElement("header")),this._options.slot!==!1&&this._options.void!==!0&&(this._slot=document.createElement("slot")),this._options.footer!==!1&&(this._footer=document.createElement("footer"))}connectedCallback(){this.render()}handleChildChanges(e,r){this._options.void||U(this,"handleChildChanges")}handleAttributeChange(e,r,t){U(this,"handleAttributeChange")}getStyle(){return""}render(){this._shadow.innerHTML="",this._shadow.append(this._style),this._options.header!==!1&&this._shadow.append(this._header),this._options.slot!==!1&&this._shadow.append(this._slot),this._options.footer!==!1&&this._shadow.append(this._footer)}};var D=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TRANSPARENT","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN"],v={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb(0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb(95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb(0, 255, 255)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb(0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(128, 128, 128)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb(75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb(0, 255, 0)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",rebeccapurple:"rgb(102, 51, 153)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb(65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb(0, 255, 127)",steelblue:"rgb(70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb(0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",transparent:"rgba(0,0,0,0)",turquoise:"rgb(64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)",ALICEBLUE:"rgb(240, 248, 255)",ANTIQUEWHITE:"rgb(250, 235, 215)",AQUA:"rgb(0, 255, 255)",AQUAMARINE:"rgb(127, 255, 212)",AZURE:"rgb(240, 255, 255)",BEIGE:"rgb(245, 245, 220)",BISQUE:"rgb(255, 228, 196)",BLACK:"rgb(0, 0, 0)",BLANCHEDALMOND:"rgb(255, 235, 205)",BLUE:"rgb(0, 0, 255)",BLUEVIOLET:"rgb(138, 43, 226)",BROWN:"rgb(165, 42, 42)",BURLYWOOD:"rgb(222, 184, 135)",CADETBLUE:"rgb(95, 158, 160)",CHARTREUSE:"rgb(127, 255, 0)",CHOCOLATE:"rgb(210, 105, 30)",CORAL:"rgb(255, 127, 80)",CORNFLOWERBLUE:"rgb(100, 149, 237)",CORNSILK:"rgb(255, 248, 220)",CRIMSON:"rgb(220, 20, 60)",CYAN:"rgb(0, 255, 255)",DARKBLUE:"rgb(0, 0, 139)",DARKCYAN:"rgb(0, 139, 139)",DARKGOLDENROD:"rgb(184, 134, 11)",DARKGRAY:"rgb(169, 169, 169)",DARKGREEN:"rgb(0, 100, 0)",DARKGREY:"rgb(169, 169, 169)",DARKKHAKI:"rgb(189, 183, 107)",DARKMAGENTA:"rgb(139, 0, 139)",DARKOLIVEGREEN:"rgb(85, 107, 47)",DARKORANGE:"rgb(255, 140, 0)",DARKORCHID:"rgb(153, 50, 204)",DARKRED:"rgb(139, 0, 0)",DARKSALMON:"rgb(233, 150, 122)",DARKSEAGREEN:"rgb(143, 188, 143)",DARKSLATEBLUE:"rgb(72, 61, 139)",DARKSLATEGRAY:"rgb(47, 79, 79)",DARKSLATEGREY:"rgb(47, 79, 79)",DARKTURQUOISE:"rgb(0, 206, 209)",DARKVIOLET:"rgb(148, 0, 211)",DEEPPINK:"rgb(255, 20, 147)",DEEPSKYBLUE:"rgb(0, 191, 255)",DIMGRAY:"rgb(105, 105, 105)",DIMGREY:"rgb(105, 105, 105)",DODGERBLUE:"rgb(30, 144, 255)",FIREBRICK:"rgb(178, 34, 34)",FLORALWHITE:"rgb(255, 250, 240)",FORESTGREEN:"rgb(34, 139, 34)",FUCHSIA:"rgb(255, 0, 255)",GAINSBORO:"rgb(220, 220, 220)",GHOSTWHITE:"rgb(248, 248, 255)",GOLD:"rgb(255, 215, 0)",GOLDENROD:"rgb(218, 165, 32)",GRAY:"rgb(128, 128, 128)",GREEN:"rgb(0, 128, 0)",GREENYELLOW:"rgb(173, 255, 47)",GREY:"rgb(128, 128, 128)",HONEYDEW:"rgb(240, 255, 240)",HOTPINK:"rgb(255, 105, 180)",INDIANRED:"rgb(205, 92, 92)",INDIGO:"rgb(75, 0, 130)",IVORY:"rgb(255, 255, 240)",KHAKI:"rgb(240, 230, 140)",LAVENDER:"rgb(230, 230, 250)",LAVENDERBLUSH:"rgb(255, 240, 245)",LAWNGREEN:"rgb(124, 252, 0)",LEMONCHIFFON:"rgb(255, 250, 205)",LIGHTBLUE:"rgb(173, 216, 230)",LIGHTCORAL:"rgb(240, 128, 128)",LIGHTCYAN:"rgb(224, 255, 255)",LIGHTGOLDENRODYELLOW:"rgb(250, 250, 210)",LIGHTGRAY:"rgb(211, 211, 211)",LIGHTGREEN:"rgb(144, 238, 144)",LIGHTGREY:"rgb(211, 211, 211)",LIGHTPINK:"rgb(255, 182, 193)",LIGHTSALMON:"rgb(255, 160, 122)",LIGHTSEAGREEN:"rgb(32, 178, 170)",LIGHTSKYBLUE:"rgb(135, 206, 250)",LIGHTSLATEGRAY:"rgb(119, 136, 153)",LIGHTSLATEGREY:"rgb(119, 136, 153)",LIGHTSTEELBLUE:"rgb(176, 196, 222)",LIGHTYELLOW:"rgb(255, 255, 224)",LIME:"rgb(0, 255, 0)",LIMEGREEN:"rgb(50, 205, 50)",LINEN:"rgb(250, 240, 230)",MAGENTA:"rgb(255, 0, 255)",MAROON:"rgb(128, 0, 0)",MEDIUMAQUAMARINE:"rgb(102, 205, 170)",MEDIUMBLUE:"rgb(0, 0, 205)",MEDIUMORCHID:"rgb(186, 85, 211)",MEDIUMPURPLE:"rgb(147, 112, 219)",MEDIUMSEAGREEN:"rgb(60, 179, 113)",MEDIUMSLATEBLUE:"rgb(123, 104, 238)",MEDIUMSPRINGGREEN:"rgb(0, 250, 154)",MEDIUMTURQUOISE:"rgb(72, 209, 204)",MEDIUMVIOLETRED:"rgb(199, 21, 133)",MIDNIGHTBLUE:"rgb(25, 25, 112)",MINTCREAM:"rgb(245, 255, 250)",MISTYROSE:"rgb(255, 228, 225)",MOCCASIN:"rgb(255, 228, 181)",NAVAJOWHITE:"rgb(255, 222, 173)",NAVY:"rgb(0, 0, 128)",OLDLACE:"rgb(253, 245, 230)",OLIVE:"rgb(128, 128, 0)",OLIVEDRAB:"rgb(107, 142, 35)",ORANGE:"rgb(255, 165, 0)",ORANGERED:"rgb(255, 69, 0)",ORCHID:"rgb(218, 112, 214)",PALEGOLDENROD:"rgb(238, 232, 170)",PALEGREEN:"rgb(152, 251, 152)",PALETURQUOISE:"rgb(175, 238, 238)",PALEVIOLETRED:"rgb(219, 112, 147)",PAPAYAWHIP:"rgb(255, 239, 213)",PEACHPUFF:"rgb(255, 218, 185)",PERU:"rgb(205, 133, 63)",PINK:"rgb(255, 192, 203)",PLUM:"rgb(221, 160, 221)",POWDERBLUE:"rgb(176, 224, 230)",PURPLE:"rgb(128, 0, 128)",REBECCAPURPLE:"rgb(102, 51, 153)",RED:"rgb(255, 0, 0)",ROSYBROWN:"rgb(188, 143, 143)",ROYALBLUE:"rgb(65, 105, 225)",SADDLEBROWN:"rgb(139, 69, 19)",SALMON:"rgb(250, 128, 114)",SANDYBROWN:"rgb(244, 164, 96)",SEAGREEN:"rgb(46, 139, 87)",SEASHELL:"rgb(255, 245, 238)",SIENNA:"rgb(160, 82, 45)",SILVER:"rgb(192, 192, 192)",SKYBLUE:"rgb(135, 206, 235)",SLATEBLUE:"rgb(106, 90, 205)",SLATEGRAY:"rgb(112, 128, 144)",SLATEGREY:"rgb(112, 128, 144)",SNOW:"rgb(255, 250, 250)",SPRINGGREEN:"rgb(0, 255, 127)",STEELBLUE:"rgb(70, 130, 180)",TAN:"rgb(210, 180, 140)",TEAL:"rgb(0, 128, 128)",THISTLE:"rgb(216, 191, 216)",TOMATO:"rgb(255, 99, 71)",TRANSPARENT:"rgba(0,0,0,0)",TURQUOISE:"rgb(64, 224, 208)",VIOLET:"rgb(238, 130, 238)",WHEAT:"rgb(245, 222, 179)",WHITE:"rgb(255, 255, 255)",WHITESMOKE:"rgb(245, 245, 245)",YELLOW:"rgb(255, 255, 0)",YELLOWGREEN:"rgb(154, 205, 50)"};function y(a,e,r,t,$,A,l){var i,n,s,o,g=r.length,c=r[0].length;if(e<1)throw new Error("degree must be at least 1 (linear)");if(e>g-1)throw new Error("degree must be less than or equal to point count - 1");if(!$)for($=[],i=0;i<g;i++)$[i]=1;if($.length<r.length&&($=$.concat($.slice(0,e))),t){if(t.length!==g+e+1)throw new Error("bad knot vector length")}else{var t=[];for(i=0;i<g+e+1;i++)t[i]=i}t.length===r.length&&(t=t.concat(t.slice(0,e)));var b=[e,t.length-1-e],L=t[b[0]],u=t[b[1]];if(l||(a=a*(u-L)+L),a<L||a>u)throw new Error("out of bounds");for(s=b[0];s<b[1]&&!(a>=t[s]&&a<=t[s+1]);s++);var d=[];for(i=0;i<g;i++){for(d[i]=[],n=0;n<c;n++)d[i][n]=r[i][n]*$[i];d[i][c]=$[i]}var m;for(o=1;o<=e+1;o++)for(i=s;i>s-e-1+o;i--)for(m=(a-t[i])/(t[i+e+1-o]-t[i]),n=0;n<c+1;n++)d[i][n]=(1-m)*d[i-1][n]+m*d[i][n];var A=A||[];for(i=0;i<c;i++)A[i]=d[s][i]/d[s][c];return A}f(y,"interpolate");var E=3,p=class{static{f(this,"BSpline")}constructor(e,r=!0){this.points=e,this.points=e.map(t=>t instanceof Array?t:[t.x,t.y]),this.formKnots(r),this.formWeights()}getLUT(e=100){let r=e-1;return[...new Array(e)].map((t,$)=>{let x=y($/r,E,this.points,this.knots,this.weights);return{x:x[0],y:x[1]}})}formKnots(e=!1){if(!e)return this.formUniformKnots();let r=[],t=this.points.length,$=t-E;for(let x=1;x<t-E;x++)r.push(x+E);for(let x=0;x<=E;x++)r=[E].concat(r);for(let x=0;x<=E;x++)r.push($+E);return this.knots=r}formUniformKnots(){return this.knots=[...new Array(this.points.length+E+1)].map((e,r)=>r)}formWeights(){return this.weights=this.points.map(e=>1)}};var R=class{static{f(this,"Point")}constructor(e,r){this.x=e,this.y=r}},O=class extends R{static{f(this,"Circle")}constructor(e,r,t){super(e,r),this.r=t}};var I=class a{static{f(this,"Vector")}constructor(e,r,t){arguments.length===1&&(t=e.z,r=e.y,e=e.x),this.x=e,this.y=r,t!==void 0&&(this.z=t)}dist(e,r,t=0){r!==void 0&&(e={x:e,y:r,z:t});let $=0;$+=(this.x-e.x)**2,$+=(this.y-e.y)**2;let x=this.z?this.z:0,l=e.z?e.z:0;return $+=(x-l)**2,$**.5}normalize(e){let r=this.dist(0,0,0);return new a(e*this.x/r,e*this.y/r,e*this.z/r)}getAngle(){return-Math.atan2(this.y,this.x)}reflect(e){let r=new a(e.x-this.x,e.y-this.y);return e.z!==void 0&&(r.z=e.z,this.z!==void 0&&(r.z-=this.z)),this.subtract(r)}add(e){let r=new a(this.x+e.x,this.y+e.y);return this.z!==void 0&&(r.z=this.z,e.z!==void 0&&(r.z+=e.z)),r}subtract(e){let r=new a(this.x-e.x,this.y-e.y);return this.z!==void 0&&(r.z=this.z,e.z!==void 0&&(r.z-=e.z)),r}scale(e=1){if(e===0)return new a(0,0,this.z===void 0?void 0:0);let r=new a(this.x*e,this.y*e);return this.z!==void 0&&(r.z=this.z*e),r}};function Y(a){if(a.length!==a[0].length){console.warn("Cannot invert non-square matrices");return}var e=0,r=0,t=0,$=a.length,x=0,l=0,i=[],n=[];for(e=0;e<$;e+=1)for(i[i.length]=[],n[n.length]=[],t=0;t<$;t+=1)e==t?i[e][t]=1:i[e][t]=0,n[e][t]=a[e][t];for(e=0;e<$;e+=1){if(x=n[e][e],x==0){for(r=e+1;r<$;r+=1)if(n[r][e]!=0){for(t=0;t<$;t++)x=n[e][t],n[e][t]=n[r][t],n[r][t]=x,x=i[e][t],i[e][t]=i[r][t],i[r][t]=x;break}if(x=n[e][e],x==0)return}for(t=0;t<$;t++)n[e][t]=n[e][t]/x,i[e][t]=i[e][t]/x;for(r=0;r<$;r++)if(r!=e)for(x=n[r][e],t=0;t<$;t++)n[r][t]-=x*n[e][t],i[r][t]-=x*i[e][t]}return i}f(Y,"invert");function P(a,e){var r=[],t=M(e);return a.forEach(($,x)=>{r[x]=[],t.forEach((l,i)=>{r[x][i]=$.map((n,s)=>l[s]*n).reduce((n,s)=>n+s,0)})}),r}f(P,"multiply");function M(a){return a[0].map((e,r)=>a.map(t=>t[r]))}f(M,"transpose");var N=class a{static{f(this,"Matrix")}constructor(e,r,t){t=e instanceof Array?e:t,this.data=t??[...new Array(e)].map($=>[...new Array(r)].map(x=>0)),this.rows=this.data.length,this.cols=this.data[0].length}setData(e){this.data=e}get(e,r){return this.data[e][r]}set(e,r,t){this.data[e][r]=t}row(e){return this.data[e]}col(e){var r=this.data,t=[];for(let $=0,x=r.length;$<x;$++)t.push(r[$][e]);return t}multiply(e){return new a(P(this.data,e.data))}invert(){return new a(Y(this.data))}transpose(){return new a(M(this.data))}};function S(a){let e=new TextEncoder().encode(a),r=String.fromCodePoint(...e);return btoa(r)}f(S,"base64");function H(a){let e=atob(a),r=Uint8Array.from(e,t=>t.codePointAt(0));return new TextDecoder().decode(r)}f(H,"decode64");function k(a){let e=/^(.*)\/([^.]+(\.([^\/?#]+))+)(\?[^#]*)?(#.*)?$/,r=a.match(e);if(r!==null){let{[1]:t,[2]:$,[4]:x}=r;a=t}return a}f(k,"getURLbase");function B(a){if(typeof window>"u"||typeof document>"u")return!0;var e=a.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}f(B,"isInViewport");var _=String(import.meta.url),W=H(""),w=class extends h{static{f(this,"GraphicsElement")}handleAttributeChange(...e){}handleChildChanges(...e){}connectedCallback(){super.connectedCallback(),this.label=document.createElement("label"),this.title||(console.warn("<graphics-element> is missing a title attribute. Always caption your figures."),this.title=""),this.label.textContent=this.title,B(this)?this.loadSource():new IntersectionObserver((e,r)=>e.forEach(t=>{t.isIntersecting&&(this.loadSource(),r.disconnect())}),{threshold:.1,rootMargin:`${window.innerHeight}px`}).observe(this)}getStyle(){return`
:host([hidden]) { display: none; }
style { display: none; }
.top-title { display: flex; flex-direction: row; justify-content: space-between; }
canvas { touch-action: none; user-select: none; position: relative; z-index: 1; display: block; margin: auto; border-radius: 0; box-sizing: content-box !important; border: 1px solid lightgrey;
&.crisp { image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }
&:focus { border: 1px solid red; }}
a { &.view-source { font-size: 60%; text-decoration: none;
&.plus { padding-left: 0.5em; }}}
button.reset { font-size: 0.5em; top: -0.35em; position: relative; }
label:not(:empty) { display: block; font-style: italic; font-size: 0.9em; text-align: right; padding-right: 1em; margin-top: 0.35em; }
`}async loadSource(e,r=this.width,t=this.height,$){if(!r&&!t&&(r=parseFloat(this.getAttribute("width")),t=parseFloat(this.getAttribute("height")),isNaN(r)&&(r=void 0),isNaN(t)&&(t=void 0)),!e)if(this.userCode)e=this.userCode;else{let s=this.getAttribute("src");if(s)e=await(await fetch(s)).text();else{let o=this.querySelector("graphics-source");o?e=o.textContent:e=`function setup() {
}
function draw() {
}
`}}if(this.userCode=e,!$)if(this.additionalSources)$=this.additionalSources;else{let s=this.querySelectorAll("source");$=await Promise.all(Array.from(s).map(o=>fetch(o.src).then(g=>g.text())))}this.additionalSources=$;let x=this.userCode;this.additionalSources.length>0&&(x=this.loadAdditionalSources(this.userCode,this.additionalSources));let l=x.matchAll(/addSlider\(['"`](.*)['"`]/g),i=[];for(let s of l)i.push(s[1]),x=x.replace(s[0],s[0]+`, (v) => (${s[1]} = v)`);if(i.length&&(x="let "+i.join(", ")+`;
`+x),x=x.replaceAll(/ from ['"].([^'"]+)['"]/g,` from "${k(location.href)}/$1"`),x.includes("function setup()")||(x=`function setup() {
}
`+x),!x.includes("setSize(")){let s="setSize();";r&&t&&(s=`setSize(${r}, ${t});`),x=x.replace("function setup() {",`function setup() {
  ${s}`)}import(`data:text/javascript;base64,${S(['"use strict";',`import { BSpline, Point, Circle, Vector, Matrix, CSS_COLOR_MAP } from "${_}";`,`const __randomId = "${Date.now()}";`,W,x,"export { reset as start, __canvas as canvas, halt, highlight, __getDescription as getDescription }"].join(`
`))}`).then(async s=>{let{start:o,canvas:g,halt:c,highlight:b,getDescription:L}=s;this.canvas=g,this.halt=()=>c(),this.highlight=A=>b(A),this.render();let{width:u,height:d}=await o(this),m="graphics-element-description";this.querySelector(`.${m}`)?.remove(),this.querySelector("p")||this.handleGraphicsDescription(m,L),u&&d&&(this.style.width="",this.style.height="",this.width=u,this.height=d,this.setAttribute("width",u),this.setAttribute("height",d)),this.dispatchEvent(new CustomEvent("load")),this.onload&&this.onload()})}handleGraphicsDescription(e,r=()=>{}){try{let t=r();if(t){let $=new DocumentFragment,x=document.createElement("div");x.classList.add(e),$.append(x),x.innerHTML=t,this.append(x),this.crossLink(!0)}}catch(t){console.error(t)}}loadAdditionalSources(e,r){if(!r)return e;let t=new Array(r.length);return e+`
`+r.map(($,x)=>$.replace("function setup()",`function setup${x+1}()`).replace("function draw()",`function draw${x+1}()`)).join(`
`)+`
function __more_setup() { ${[...t].map(($,x)=>`if (typeof setup${x+1} !== \`undefined\`) setup${x+1}();`).join(`
`)} }
function __more_draw() { ${[...t].map(($,x)=>`if (typeof draw${x+1} !== \`undefined\`) draw${x+1}();`).join(`
`)} }
`}loadFromFunction(e){let r=e.toString();this.reset(r.substring(r.indexOf("{")+1,r.lastIndexOf("}")))}reset(e,r=[]){this.halt&&this.halt(),this.querySelector("button.remove-color")?.remove(),this.loadSource(e||this.userCode,this.width,this.height,r||this.additionalSources)}render(){super.render();let e=this._slot.parentNode;this.canvas&&e.insertBefore(this.canvas,this._slot),this.label&&e.insertBefore(this.label,this._slot);let r=document.createElement("div");r.classList.add("top-title");let t=document.createElement("span");t.classList.add("sources"),r.append(t);let $=document.createElement("button");$.classList.add("reset"),$.textContent=this.getAttribute("reset")||"reset",$.addEventListener("click",()=>this.reset()),r.append($);let x=this.getAttribute("src");if(x||(x=`data:text/plain;base64,${S(this.userCode)}`),x){let i=document.createElement("a");i.classList.add("view-source"),i.textContent=this.getAttribute("viewSource")||"view source",i.href=x,i.target="_blank",t.append(i),x.startsWith("data")&&(delete i.href,delete i.target,i.classList.add("fake-source-link"),i.addEventListener("click",()=>{let n=`<iframe width="100%" height="100%" src="${x}"></iframe>`,s=window.open(""),{document:o}=s;o.open(),o.write(n),o.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),o.close()}))}let l=this.querySelectorAll("source");l.length===0&&(l=(this.additionalSources??[]).map(i=>({src:`data:text/plain;base64,${S(i)}`}))),l.length&&l.forEach((i,n)=>{let{src:s}=i,o=document.createElement("a");o.classList.add("view-source","plus"),o.textContent=`[+${n+1}]`,o.href=s,o.target="_blank",t.append(o),s.startsWith("data")&&(delete o.href,delete o.target,o.classList.add("fake-source-link"),o.addEventListener("click",()=>{let g=`<iframe width="100%" height="100%" src="${s}"></iframe>`,c=window.open(""),{document:b}=c;b.open(),b.write(g),b.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),b.close()}))}),this.label&&e.insertBefore(r,this.canvas),this.crossLink()}crossLink(e){if(e&&(this.crossLinked=!1),this.crossLinked)return;this.crossLinked=!0;let r=!1;if(this.querySelectorAll("p").forEach(t=>{t.querySelectorAll("*").forEach($=>{if(!D.includes($.tagName))return;r=!0;let x;$.classList.remove("calm"),$.addEventListener("pointerenter",()=>{x??=getComputedStyle($)["-webkit-text-stroke-color"],this.highlight?.(x)}),$.addEventListener("pointerleave",()=>this.highlight?.(!1))})}),r){let t=document.createElement("button");t.textContent="remove colors",t.classList.add("remove-color"),t.addEventListener("click",()=>{this.querySelectorAll("p").forEach($=>{$.querySelectorAll("*").forEach(x=>{D.includes(x.tagName)&&x.classList.add("calm")})}),t.remove()}),this.append(t)}}},T=class extends h{static{f(this,"GraphicsSource")}constructor(){super(),this.style.display="none"}};await h.register(w),await h.register(T);export{p as BSpline,v as CSS_COLOR_MAP,O as Circle,N as Matrix,R as Point,I as Vector};
