var K=Object.defineProperty;var f=(a,e)=>K(a,"name",{value:e,configurable:!0});var G="registered as custom element";function U(a,e){console.warn(`missing implementation for ${e}(...data) in ${a.__proto__.constructor.name}`)}f(U,"NotImplemented");function C(a){return a.prototype.constructor.name.replace(/([A-Z])([a-z])/g,(e,t,r,$)=>{let x=`${t.toLowerCase()}${r}`;return $>0?`-${x}`:x})}f(C,"getElementTagName");var E=class extends HTMLElement{static{f(this,"CustomElement")}static register(e){if(!e[G]){let t=e.tagName||C(e);return customElements.define(t,e),e[G]=!0,customElements.whenDefined(t)}return Promise.resolve()}static get tagName(){return C(this)}constructor(e={}){super(),customElements.resolveScope||(customElements.resolveScope=function($){try{return $.getRootNode().host}catch(x){console.warn(x)}return window}),this._options=e;let t={childList:$=>{this.handleChildChanges(Array.from($.addedNodes),Array.from($.removedNodes)),this.render()},attributes:$=>{this.handleAttributeChange($.attributeName,$.oldValue,this.getAttribute($.attributeName)),this.render()}};this._observer=new MutationObserver($=>{this.isConnected&&$.forEach(x=>{t[x.type](x)})}),this._observer.observe(this,{childList:!0,attributes:!0});let r={mode:"open"};this._shadow=this.attachShadow(r),this._style=document.createElement("style"),this._style.textContent=this.getStyle(),this._options.header!==!1&&(this._header=document.createElement("header")),this._options.slot!==!1&&this._options.void!==!0&&(this._slot=document.createElement("slot")),this._options.footer!==!1&&(this._footer=document.createElement("footer"))}connectedCallback(){this.render()}handleChildChanges(e,t){this._options.void||U(this,"handleChildChanges")}handleAttributeChange(e,t,r){U(this,"handleAttributeChange")}getStyle(){return""}render(){this._shadow.innerHTML="",this._shadow.append(this._style),this._options.header!==!1&&this._shadow.append(this._header),this._options.slot!==!1&&this._shadow.append(this._slot),this._options.footer!==!1&&this._shadow.append(this._footer)}};var y=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TRANSPARENT","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN"],v={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb(0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb(95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb(0, 255, 255)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb(0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(128, 128, 128)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb(75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb(0, 255, 0)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",rebeccapurple:"rgb(102, 51, 153)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb(65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb(0, 255, 127)",steelblue:"rgb(70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb(0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",transparent:"rgba(0,0,0,0)",turquoise:"rgb(64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)",ALICEBLUE:"rgb(240, 248, 255)",ANTIQUEWHITE:"rgb(250, 235, 215)",AQUA:"rgb(0, 255, 255)",AQUAMARINE:"rgb(127, 255, 212)",AZURE:"rgb(240, 255, 255)",BEIGE:"rgb(245, 245, 220)",BISQUE:"rgb(255, 228, 196)",BLACK:"rgb(0, 0, 0)",BLANCHEDALMOND:"rgb(255, 235, 205)",BLUE:"rgb(0, 0, 255)",BLUEVIOLET:"rgb(138, 43, 226)",BROWN:"rgb(165, 42, 42)",BURLYWOOD:"rgb(222, 184, 135)",CADETBLUE:"rgb(95, 158, 160)",CHARTREUSE:"rgb(127, 255, 0)",CHOCOLATE:"rgb(210, 105, 30)",CORAL:"rgb(255, 127, 80)",CORNFLOWERBLUE:"rgb(100, 149, 237)",CORNSILK:"rgb(255, 248, 220)",CRIMSON:"rgb(220, 20, 60)",CYAN:"rgb(0, 255, 255)",DARKBLUE:"rgb(0, 0, 139)",DARKCYAN:"rgb(0, 139, 139)",DARKGOLDENROD:"rgb(184, 134, 11)",DARKGRAY:"rgb(169, 169, 169)",DARKGREEN:"rgb(0, 100, 0)",DARKGREY:"rgb(169, 169, 169)",DARKKHAKI:"rgb(189, 183, 107)",DARKMAGENTA:"rgb(139, 0, 139)",DARKOLIVEGREEN:"rgb(85, 107, 47)",DARKORANGE:"rgb(255, 140, 0)",DARKORCHID:"rgb(153, 50, 204)",DARKRED:"rgb(139, 0, 0)",DARKSALMON:"rgb(233, 150, 122)",DARKSEAGREEN:"rgb(143, 188, 143)",DARKSLATEBLUE:"rgb(72, 61, 139)",DARKSLATEGRAY:"rgb(47, 79, 79)",DARKSLATEGREY:"rgb(47, 79, 79)",DARKTURQUOISE:"rgb(0, 206, 209)",DARKVIOLET:"rgb(148, 0, 211)",DEEPPINK:"rgb(255, 20, 147)",DEEPSKYBLUE:"rgb(0, 191, 255)",DIMGRAY:"rgb(105, 105, 105)",DIMGREY:"rgb(105, 105, 105)",DODGERBLUE:"rgb(30, 144, 255)",FIREBRICK:"rgb(178, 34, 34)",FLORALWHITE:"rgb(255, 250, 240)",FORESTGREEN:"rgb(34, 139, 34)",FUCHSIA:"rgb(255, 0, 255)",GAINSBORO:"rgb(220, 220, 220)",GHOSTWHITE:"rgb(248, 248, 255)",GOLD:"rgb(255, 215, 0)",GOLDENROD:"rgb(218, 165, 32)",GRAY:"rgb(128, 128, 128)",GREEN:"rgb(0, 128, 0)",GREENYELLOW:"rgb(173, 255, 47)",GREY:"rgb(128, 128, 128)",HONEYDEW:"rgb(240, 255, 240)",HOTPINK:"rgb(255, 105, 180)",INDIANRED:"rgb(205, 92, 92)",INDIGO:"rgb(75, 0, 130)",IVORY:"rgb(255, 255, 240)",KHAKI:"rgb(240, 230, 140)",LAVENDER:"rgb(230, 230, 250)",LAVENDERBLUSH:"rgb(255, 240, 245)",LAWNGREEN:"rgb(124, 252, 0)",LEMONCHIFFON:"rgb(255, 250, 205)",LIGHTBLUE:"rgb(173, 216, 230)",LIGHTCORAL:"rgb(240, 128, 128)",LIGHTCYAN:"rgb(224, 255, 255)",LIGHTGOLDENRODYELLOW:"rgb(250, 250, 210)",LIGHTGRAY:"rgb(211, 211, 211)",LIGHTGREEN:"rgb(144, 238, 144)",LIGHTGREY:"rgb(211, 211, 211)",LIGHTPINK:"rgb(255, 182, 193)",LIGHTSALMON:"rgb(255, 160, 122)",LIGHTSEAGREEN:"rgb(32, 178, 170)",LIGHTSKYBLUE:"rgb(135, 206, 250)",LIGHTSLATEGRAY:"rgb(119, 136, 153)",LIGHTSLATEGREY:"rgb(119, 136, 153)",LIGHTSTEELBLUE:"rgb(176, 196, 222)",LIGHTYELLOW:"rgb(255, 255, 224)",LIME:"rgb(0, 255, 0)",LIMEGREEN:"rgb(50, 205, 50)",LINEN:"rgb(250, 240, 230)",MAGENTA:"rgb(255, 0, 255)",MAROON:"rgb(128, 0, 0)",MEDIUMAQUAMARINE:"rgb(102, 205, 170)",MEDIUMBLUE:"rgb(0, 0, 205)",MEDIUMORCHID:"rgb(186, 85, 211)",MEDIUMPURPLE:"rgb(147, 112, 219)",MEDIUMSEAGREEN:"rgb(60, 179, 113)",MEDIUMSLATEBLUE:"rgb(123, 104, 238)",MEDIUMSPRINGGREEN:"rgb(0, 250, 154)",MEDIUMTURQUOISE:"rgb(72, 209, 204)",MEDIUMVIOLETRED:"rgb(199, 21, 133)",MIDNIGHTBLUE:"rgb(25, 25, 112)",MINTCREAM:"rgb(245, 255, 250)",MISTYROSE:"rgb(255, 228, 225)",MOCCASIN:"rgb(255, 228, 181)",NAVAJOWHITE:"rgb(255, 222, 173)",NAVY:"rgb(0, 0, 128)",OLDLACE:"rgb(253, 245, 230)",OLIVE:"rgb(128, 128, 0)",OLIVEDRAB:"rgb(107, 142, 35)",ORANGE:"rgb(255, 165, 0)",ORANGERED:"rgb(255, 69, 0)",ORCHID:"rgb(218, 112, 214)",PALEGOLDENROD:"rgb(238, 232, 170)",PALEGREEN:"rgb(152, 251, 152)",PALETURQUOISE:"rgb(175, 238, 238)",PALEVIOLETRED:"rgb(219, 112, 147)",PAPAYAWHIP:"rgb(255, 239, 213)",PEACHPUFF:"rgb(255, 218, 185)",PERU:"rgb(205, 133, 63)",PINK:"rgb(255, 192, 203)",PLUM:"rgb(221, 160, 221)",POWDERBLUE:"rgb(176, 224, 230)",PURPLE:"rgb(128, 0, 128)",REBECCAPURPLE:"rgb(102, 51, 153)",RED:"rgb(255, 0, 0)",ROSYBROWN:"rgb(188, 143, 143)",ROYALBLUE:"rgb(65, 105, 225)",SADDLEBROWN:"rgb(139, 69, 19)",SALMON:"rgb(250, 128, 114)",SANDYBROWN:"rgb(244, 164, 96)",SEAGREEN:"rgb(46, 139, 87)",SEASHELL:"rgb(255, 245, 238)",SIENNA:"rgb(160, 82, 45)",SILVER:"rgb(192, 192, 192)",SKYBLUE:"rgb(135, 206, 235)",SLATEBLUE:"rgb(106, 90, 205)",SLATEGRAY:"rgb(112, 128, 144)",SLATEGREY:"rgb(112, 128, 144)",SNOW:"rgb(255, 250, 250)",SPRINGGREEN:"rgb(0, 255, 127)",STEELBLUE:"rgb(70, 130, 180)",TAN:"rgb(210, 180, 140)",TEAL:"rgb(0, 128, 128)",THISTLE:"rgb(216, 191, 216)",TOMATO:"rgb(255, 99, 71)",TRANSPARENT:"rgba(0,0,0,0)",TURQUOISE:"rgb(64, 224, 208)",VIOLET:"rgb(238, 130, 238)",WHEAT:"rgb(245, 222, 179)",WHITE:"rgb(255, 255, 255)",WHITESMOKE:"rgb(245, 245, 245)",YELLOW:"rgb(255, 255, 0)",YELLOWGREEN:"rgb(154, 205, 50)"};function D(a,e,t,r,$,A,l){var i,n,s,o,g=t.length,c=t[0].length;if(e<1)throw new Error("degree must be at least 1 (linear)");if(e>g-1)throw new Error("degree must be less than or equal to point count - 1");if(!$)for($=[],i=0;i<g;i++)$[i]=1;if($.length<t.length&&($=$.concat($.slice(0,e))),r){if(r.length!==g+e+1)throw new Error("bad knot vector length")}else{var r=[];for(i=0;i<g+e+1;i++)r[i]=i}r.length===t.length&&(r=r.concat(r.slice(0,e)));var b=[e,r.length-1-e],L=r[b[0]],u=r[b[1]];if(l||(a=a*(u-L)+L),a<L||a>u)throw new Error("out of bounds");for(s=b[0];s<b[1]&&!(a>=r[s]&&a<=r[s+1]);s++);var d=[];for(i=0;i<g;i++){for(d[i]=[],n=0;n<c;n++)d[i][n]=t[i][n]*$[i];d[i][c]=$[i]}var m;for(o=1;o<=e+1;o++)for(i=s;i>s-e-1+o;i--)for(m=(a-r[i])/(r[i+e+1-o]-r[i]),n=0;n<c+1;n++)d[i][n]=(1-m)*d[i-1][n]+m*d[i][n];var A=A||[];for(i=0;i<c;i++)A[i]=d[s][i]/d[s][c];return A}f(D,"interpolate");var h=3,p=class{static{f(this,"BSpline")}constructor(e,t=!0){this.points=e,this.points=e.map(r=>r instanceof Array?r:[r.x,r.y]),this.formKnots(t),this.formWeights()}getLUT(e=100){let t=e-1;return[...new Array(e)].map((r,$)=>{let x=D($/t,h,this.points,this.knots,this.weights);return{x:x[0],y:x[1]}})}formKnots(e=!1){if(!e)return this.formUniformKnots();let t=[],r=this.points.length,$=r-h;for(let x=1;x<r-h;x++)t.push(x+h);for(let x=0;x<=h;x++)t=[h].concat(t);for(let x=0;x<=h;x++)t.push($+h);return this.knots=t}formUniformKnots(){return this.knots=[...new Array(this.points.length+h+1)].map((e,t)=>t)}formWeights(){return this.weights=this.points.map(e=>1)}};var R=class{static{f(this,"Point")}constructor(e,t){this.x=e,this.y=t}},O=class extends R{static{f(this,"Circle")}constructor(e,t,r){super(e,t),this.r=r}};var I=class a{static{f(this,"Vector")}constructor(e,t,r){arguments.length===1&&(r=e.z,t=e.y,e=e.x),this.x=e,this.y=t,r!==void 0&&(this.z=r)}dist(e,t,r=0){t!==void 0&&(e={x:e,y:t,z:r});let $=0;$+=(this.x-e.x)**2,$+=(this.y-e.y)**2;let x=this.z?this.z:0,l=e.z?e.z:0;return $+=(x-l)**2,$**.5}normalize(e){let t=this.dist(0,0,0);return new a(e*this.x/t,e*this.y/t,e*this.z/t)}getAngle(){return-Math.atan2(this.y,this.x)}reflect(e){let t=new a(e.x-this.x,e.y-this.y);return e.z!==void 0&&(t.z=e.z,this.z!==void 0&&(t.z-=this.z)),this.subtract(t)}add(e){let t=new a(this.x+e.x,this.y+e.y);return this.z!==void 0&&(t.z=this.z,e.z!==void 0&&(t.z+=e.z)),t}subtract(e){let t=new a(this.x-e.x,this.y-e.y);return this.z!==void 0&&(t.z=this.z,e.z!==void 0&&(t.z-=e.z)),t}scale(e=1){if(e===0)return new a(0,0,this.z===void 0?void 0:0);let t=new a(this.x*e,this.y*e);return this.z!==void 0&&(t.z=this.z*e),t}};function Y(a){if(a.length!==a[0].length){console.warn("Cannot invert non-square matrices");return}var e=0,t=0,r=0,$=a.length,x=0,l=0,i=[],n=[];for(e=0;e<$;e+=1)for(i[i.length]=[],n[n.length]=[],r=0;r<$;r+=1)e==r?i[e][r]=1:i[e][r]=0,n[e][r]=a[e][r];for(e=0;e<$;e+=1){if(x=n[e][e],x==0){for(t=e+1;t<$;t+=1)if(n[t][e]!=0){for(r=0;r<$;r++)x=n[e][r],n[e][r]=n[t][r],n[t][r]=x,x=i[e][r],i[e][r]=i[t][r],i[t][r]=x;break}if(x=n[e][e],x==0)return}for(r=0;r<$;r++)n[e][r]=n[e][r]/x,i[e][r]=i[e][r]/x;for(t=0;t<$;t++)if(t!=e)for(x=n[t][e],r=0;r<$;r++)n[t][r]-=x*n[e][r],i[t][r]-=x*i[e][r]}return i}f(Y,"invert");function P(a,e){var t=[],r=M(e);return a.forEach(($,x)=>{t[x]=[],r.forEach((l,i)=>{t[x][i]=$.map((n,s)=>l[s]*n).reduce((n,s)=>n+s,0)})}),t}f(P,"multiply");function M(a){return a[0].map((e,t)=>a.map(r=>r[t]))}f(M,"transpose");var N=class a{static{f(this,"Matrix")}constructor(e,t,r){r=e instanceof Array?e:r,this.data=r??[...new Array(e)].map($=>[...new Array(t)].map(x=>0)),this.rows=this.data.length,this.cols=this.data[0].length}setData(e){this.data=e}get(e,t){return this.data[e][t]}set(e,t,r){this.data[e][t]=r}row(e){return this.data[e]}col(e){var t=this.data,r=[];for(let $=0,x=t.length;$<x;$++)r.push(t[$][e]);return r}multiply(e){return new a(P(this.data,e.data))}invert(){return new a(Y(this.data))}transpose(){return new a(M(this.data))}};function S(a){let e=new TextEncoder().encode(a),t=String.fromCodePoint(...e);return btoa(t)}f(S,"base64");function H(a){let e=atob(a),t=Uint8Array.from(e,r=>r.codePointAt(0));return new TextDecoder().decode(t)}f(H,"decode64");function k(a){let e=/^(.*)\/([^.]+(\.([^\/?#]+))+)(\?[^#]*)?(#.*)?$/,t=a.match(e);if(t!==null){let{[1]:r,[2]:$,[4]:x}=t;a=r}return a}f(k,"getURLbase");function B(a){if(typeof window>"u"||typeof document>"u")return!0;var e=a.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}f(B,"isInViewport");var _=String(import.meta.url),W=H("Y29uc3QgQUxQSEFCRVRJQyA9IGBhbHBoYWJldGljYDsKY29uc3QgQVVUTyA9IGBhdXRvYDsKY29uc3QgQk9UVE9NID0gYGJvdHRvbWA7CmNvbnN0IEJPVFRPTV9MRUZUID0gYGJvdHRvbi1sZWZ0YDsKY29uc3QgQk9UVE9NX1JJR0hUID0gYGJvdHRvbS1yaWdodGA7CmNvbnN0IENFTlRFUiA9IGBjZW50ZXJgOwpjb25zdCBDT05TVFJBSU4gPSB0cnVlOwpjb25zdCBDUk9TUyA9IGBjcm9zc2hhaXJgOwpjb25zdCBFTkQgPSBgZW5kYDsKY29uc3QgSEFORCA9IGBwb2ludGVyYDsKY29uc3QgSEFOR0lORyA9IGBoYW5naW5nYDsKY29uc3QgSURFT0dSQVBISUMgPSBgaWRlb2dyYXBoaWNgOwpjb25zdCBMRUZUID0gYGxlZnRgOwpjb25zdCBNSURETEUgPSBgbWlkZGxlYDsKY29uc3QgUE9JTlRFUiA9IGBkZWZhdWx0YDsKY29uc3QgUklHSFQgPSBgcmlnaHRgOwpjb25zdCBTVEFSVCA9IGBzdGFydGA7CmNvbnN0IFRPUCA9IGB0b3BgOwpjb25zdCBUT1BfTEVGVCA9IGB0b3AtbGVmdGA7CmNvbnN0IFRPUF9SSUdIVCA9IGB0b3AtcmlnaHRgOwoKLy8gImludGVybmFsIiB2YXJzCgpsZXQgX19jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBjYW52YXNgKTsKX19jYW52YXMudGFiSW5kZXggPSAwOwpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBwb2ludGVyZG93bmAsICgpID0+IF9fY2FudmFzLmZvY3VzKCkpOwpsZXQgX19jdHggPSBfX2NhbnZhcy5nZXRDb250ZXh0KGAyZGApOwoKbGV0IF9fY3VycmVudF9jdXJzb3I7CmxldCBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19jdXJyZW50X2h1ZTsKbGV0IF9fZHJhd19ncmlkOwpsZXQgX19kcmF3aW5nOwpsZXQgX19lbGVtZW50OwpsZXQgX19maW5pc2hlZF9zZXR1cDsKbGV0IF9fZmlyc3Q7CmxldCBfX2ZvbnQ7CmxldCBfX2dyaWRfY29sb3I7CmxldCBfX2dyaWRfc3BhY2luZzsKbGV0IF9faGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19sYXN0X2ZyYW1lOwpsZXQgX19tb3ZhYmxlX3BvaW50czsKbGV0IF9fcmVkcmF3aW5nOwpsZXQgX19zaGFwZTsKbGV0IF9fc3RhcnRfdGltZTsKbGV0IF9fc3R5bGVfc3RhY2s7CmxldCBfX3RleHRTdHJva2U7Cgpjb25zdCBfX3BybmcgPSBuZXcgKGNsYXNzIHsKICBjb25zdHJ1Y3RvcihzZWVkID0gRGF0ZS5ub3coKSkgewogICAgdGhpcy5hID0gc2VlZDsKICB9CiAgcmVzZWVkKHNlZWQpIHsKICAgIHRoaXMuYSA9IHNlZWQ7CiAgfQogIG5leHQoKSB7CiAgICAvLyBTcGxpdE1peDMyLCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc1OTMzMTYvNzQwNTUzCiAgICBsZXQgeyBhIH0gPSB0aGlzOwogICAgYSB8PSAwOwogICAgYSA9IChhICsgMHg5ZTM3NzliOSkgfCAwOwogICAgbGV0IHQgPSBhIF4gKGEgPj4+IDE2KTsKICAgIHQgPSBNYXRoLmltdWwodCwgMHgyMWYwYWFhZCk7CiAgICB0ID0gdCBeICh0ID4+PiAxNSk7CiAgICB0ID0gTWF0aC5pbXVsKHQsIDB4NzM1YTJkOTcpOwogICAgdGhpcy5hID0gYTsKICAgIHJldHVybiAoKHQgPSB0IF4gKHQgPj4+IDE1KSkgPj4+IDApIC8gNDI5NDk2NzI5NjsKICB9Cn0pKCk7Cgphc3luYyBmdW5jdGlvbiByZXNldChlbGVtZW50ID0gX19lbGVtZW50KSB7CiAgX19lbGVtZW50ID0gZWxlbWVudDsKCiAgLy8gZGVmYXVsdCB2YXJpYWJsZSB2YWx1ZXMKICBfX2N1cnJlbnRfY3Vyc29yID0gYGF1dG9gOwogIF9fY3VycmVudF9oaWdobGlnaHRfY29sb3IgPSBgcmdiKDAsMjU0LDEyNClgOwogIF9fY3VycmVudF9odWUgPSAwOwogIF9fZHJhd19ncmlkID0gdHJ1ZTsKICBfX2RyYXdpbmcgPSBmYWxzZTsKICBfX2ZpbmlzaGVkX3NldHVwID0gZmFsc2U7CiAgX19mb250ID0geyBmYW1pbHk6IGBzYW5zLXNlcmlmYCwgc2l6ZTogMTYsIHdlaWdodDogNDAwIH07CiAgX19ncmlkX2NvbG9yID0gYGxpZ2h0Z3JleWA7CiAgX19ncmlkX3NwYWNpbmcgPSAyMDsKICBfX2hpZ2hsaWdodF9jb2xvciA9IGZhbHNlOwogIF9fbW92YWJsZV9wb2ludHMgPSBbXTsKICBfX3JlZHJhd2luZyA9IGZhbHNlOwogIF9fc2hhcGUgPSBmYWxzZTsKICBfX3N0YXJ0X3RpbWUgPSBEYXRlLm5vdygpOwogIF9fc3R5bGVfc3RhY2sgPSBbXTsKICBfX3RleHRTdHJva2UgPSBgdHJhbnNwYXJlbnRgOwoKICBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwogIHBsYXlpbmcgPSBmYWxzZTsKICBmcmFtZSA9IDA7CiAgcG9pbnRlci54ID0gMDsKICBwb2ludGVyLnkgPSAwOwogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGtleWJvYXJkKS5mb3JFYWNoKChuKSA9PiBkZWxldGUga2V5Ym9hcmRbbl0pOwoKICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWdlbmVyYXRlIHRoZXNlOgogIGNsZWFyU2xpZGVycygpOwogIGNsZWFyQnV0dG9ucygpOwoKICAvLyBydW4gc2V0dXAKICBhd2FpdCBfX3NldHVwKCk7CiAgX19maW5pc2hlZF9zZXR1cCA9IHRydWU7CgogIC8vIHJ1biBmaXJzdCBkcmF3CiAgX19sYXN0X2ZyYW1lID0gRGF0ZS5ub3coKTsKICBhd2FpdCBfX2RyYXcoKTsKCiAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9Owp9CgpmdW5jdGlvbiBoYWx0KCkgewogIHBsYXlpbmcgPSBmYWxzZTsKICBfX2NhbnZhcyA9IHVuZGVmaW5lZDsKICBfX2N0eCA9IHVuZGVmaW5lZDsKICBfX2ZpbmlzaGVkX3NldHVwID0gZmFsc2U7CiAgX19kcmF3aW5nID0gdHJ1ZTsKICBfX3JlZHJhd2luZyA9IHRydWU7CiAgX19maXJzdCA9IHVuZGVmaW5lZDsKICBfX21vdmFibGVfcG9pbnRzID0gdW5kZWZpbmVkOwogIF9fY3VycmVudF9jdXJzb3IgPSB1bmRlZmluZWQ7CiAgX19jdXJyZW50X2h1ZSA9IDA7CiAgX19mb250ID0gdW5kZWZpbmVkOwogIF9fc3RhcnRfdGltZSA9IDA7CiAgY2xlYXJTbGlkZXJzKCk7CiAgY2xlYXJCdXR0b25zKCk7Cn0KCmZ1bmN0aW9uIF9fZ2V0RGVzY3JpcHRpb24oKSB7CiAgaWYgKHR5cGVvZiBnZXREZXNjcmlwdGlvbiAhPT0gYHVuZGVmaW5lZGApIHJldHVybiBnZXREZXNjcmlwdGlvbigpOwp9Cgphc3luYyBmdW5jdGlvbiBfX3NldHVwKCkgewogIGlmICh0eXBlb2Ygc2V0dXAgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBzZXR1cCgpOwogIGlmICh0eXBlb2YgX19tb3JlX3NldHVwICE9PSBgdW5kZWZpbmVkYCkgYXdhaXQgX19tb3JlX3NldHVwKCk7CiAgaWYgKCF3aWR0aCAmJiAhaGVpZ2h0KSBzZXRTaXplKCk7Cn0KCmFzeW5jIGZ1bmN0aW9uIF9fZHJhdygpIHsKICBpZiAoIV9fZmluaXNoZWRfc2V0dXApIHJldHVybjsKICBpZiAoIV9fZHJhd2luZykgewogICAgX19kcmF3aW5nID0gdHJ1ZTsKICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7CiAgICBmcmFtZURlbHRhID0gbm93IC0gX19sYXN0X2ZyYW1lOwogICAgZnJhbWUrKzsKICAgIHJlc2V0VHJhbnNmb3JtKCk7CiAgICBpZiAodHlwZW9mIGRyYXcgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBkcmF3KCk7CiAgICBpZiAodHlwZW9mIF9fbW9yZV9kcmF3ICE9PSBgdW5kZWZpbmVkYCkgYXdhaXQgX19tb3JlX2RyYXcoKTsKICAgIF9fZHJhd2luZyA9IGZhbHNlOwogICAgX19sYXN0X2ZyYW1lID0gbm93OwogICAgaWYgKHBsYXlpbmcpIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBfX2RyYXcoKSk7CiAgfQp9Ci8qKgogKiBUaGUgY3VycmVudCBmcmFtZSBudW1iZXIKICoKICogQGNvbnN0YW50IHtudW1iZXJ9CiAqLwpsZXQgZnJhbWUgPSAwOwoKLyoqCiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IGZyYW1lLgogKgogKiBAY29uc3RhbnQge251bWJlcn0KICovCmxldCBmcmFtZURlbHRhID0gMDsKCi8qKgogKiBUaGUgaGVpZ2h0IG9mIHRoZSBjYW52YXMgaW4gcGl4ZWxzCiAqCiAqIEBjb25zdGFudCB7bnVtYmVyfQogKi8KbGV0IGhlaWdodCA9IDA7CgovKioKICogVGhlIHdpZHRoIG9mIHRoZSBjYW52YXMgaW4gcGl4ZWxzCiAqCiAqIEBjb25zdGFudCB7bnVtYmVyfQogKi8KbGV0IHdpZHRoID0gMDsKCi8qKgogKiBUaGUgY3VycmVudCBwbGF5IHN0YXRlCiAqCiAqIEBjb25zdGFudCB7Ym9vbGVhbn0KICovCmxldCBwbGF5aW5nID0gZmFsc2U7CgovKioKICogVGhlIGBwb2ludGVyYCBvYmplY3QgcmVwcmVzZW50cyB0aGUgbW91c2UgY3Vyc29yICh3aGVuIHVzaW5nCiAqIGEgbW91c2UpIG9yIGZpbmdlciBwb3NpdGlvbiAoZm9yIHRvdWNoIGRldmljZXMpLCBhbmQgbW9kZWxzCiAqIHNldmVyYWwgYXNwZWN0czoKICoKICogLSBgYWN0aXZlYCAoYm9vbGVhbikgV2hldGhlciB0aGUgcG9pbnRlciBpcyBldmVuIG9uIG9yIG92ZXIgdGhlIGNhbnZhcy4KICogLSBgeGAgKG51bWJlcikgVGhlIHBvaW50ZXIncyB4IG9mZnNldCBpbiBwaXhlbHMgd2l0aCByZXNwZWN0IHRvIHRoZSBjYW52YXMKICogLSBgeWAgKG51bWJlcikgVGhlIHBvaW50ZXIncyB5IG9mZnNldCBpbiBwaXhlbHMgd2l0aCByZXNwZWN0IHRvIHRoZSBjYW52YXMKICogLSBgZG93bmAgKGJvb2xlYW4pIFdoZXRoZXIgdGhlIHBvaW50ZXIgaXMgImVuZ2FnZWQiIG9yIG5vdAogKiAtIGBkcmFnYCAoYm9vbGVhbikgV2hldGhlciBhIGNsaWNrL3RvdWNoLWRyYWcgaXMgaW4gcHJvZ3Jlc3MKICogLSBgbWFya2AgKHt4LHl9KSBXaGVuIGRyYWdnaW5nLCB0aGlzIHJlcHJlc2VudHMgdGhlIG9yaWdpbmFsIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50ZXIgImRvd24iIGV2ZW50CiAqCiAqIEBjb25zdGFudCB7b2JqZWN0fQogKi8KY29uc3QgcG9pbnRlciA9IHsgeDogMCwgeTogMCB9OwoKLyoqCiAqIElmIGFueSBwb2ludHMgd2VyZSByZWdpc3RlcmVkIGFzIG1vdmFibGUsIGFuZCB0aGUgcG9pbnRlciBpcwogKiBuZWFyIGVub3VnaCB0byBhIG1vdmFibGUgcG9pbnQsIHRoaXMgdmFsdWUgd2lsbCBwb2ludCB0bwogKiB0aGF0IG1vdmFibGUgcG9pbnQsIG9yIGBmYWxzZWAgaWYgdGhlIHBvaW50ZXIgaXMgbm90IG5lYXIKICogYW55IG1vdmFibGUgcG9pbnQgKG9yLCBvZiBjb3Vyc2UsIHRoZXJlIGFyZSBubyBtb3ZhYmxlIHBvaW50cykKICoKICogQGNvbnN0YW50IHtQb2ludExpa2V8ZmFsc2V9CiAqLwpsZXQgY3VycmVudE1vdmFibGUgPSBmYWxzZTsKCi8qKgogKiBUaGUgYGtleWJvYXJkYCBvYmplY3QgaXMgYSB0cnV0aCB0YWJsZSB0aGF0IGNhbiBiZSBjaGVja2VkIHRvCiAqIHNlZSBpZiBhbnkga2V5IGlzIGN1cnJlbnRseSBwcmVzc2VkLCBhbmQgaWYgc28sIHdoZW4gdGhhdAogKiBrZXlwcmVzcyB3YXMgaW5pdGlhdGVkLCBieSBzdG9yaW5nOgogKgogKiBgYGAKICogewogKiAgIFtrZXk6c3RyaW5nXTogZGF0ZXRpbWUKICogfQogKiBgYGAKICoKICogV2hlbiBhIGtleSBpcyByZWxlYXNlZCwgaXRzIG1hcHBpbmcgaXMgcmVtb3ZlZCBlbnRpcmVseSwKICogcmF0aGVyIHRoYW4gaXQgYmVpbmcgc2V0IHRvIGEgZmFsc2V5IHZhbHVlLgogKgogKiBAY29uc3RhbnQge29iamVjdH0KICovCmNvbnN0IGtleWJvYXJkID0ge307CgovLyBjb25zdGFudHMuLi4KY29uc3QgewogIC8qKgogICAqIFRoZSByYXRpbyBvZiBhIGNpcmNsZSdzIGNpcmN1bWZlcmVuY2UgdG8gaXRzIGRpYW1ldGVyLgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BpCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKgogICAqIEBzZWUge0BsaW5rIFRBVX0KICAgKi8KICBQSSwKCiAgLyoqCiAgICogVGhlIGJhc2UgZm9yIHRoZSBuYXR1cmFsIGxvZ2FyaXRobS4KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FXyhtYXRoZW1hdGljYWxfY29uc3RhbnQpCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKi8KICBFLAp9ID0gTWF0aDsKCmNvbnN0IHsKICAvKioKICAgKiBBIHZlcnkgc21hbGwgdmFsdWUgZm9yIHBlcmZvcm1pbmcgaW1wcmVjaXNlIG1hdGggb3BlcmF0aW9ucwogICAqIHN1Y2ggYXMgY2hlY2tpbmcgd2hldGhlciBhIHZhbHVlIGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUKICAgKiBhcyBzb21lIG90aGVyIHZhbHVlLgogICAqCiAgICogQGNvbnN0YW50IHtudW1iZXJ9CiAgICovCiAgZXBzaWxvbiwKCiAgLyoqCiAgICogQSB2ZXJ5IGxhcmdlIHZhbHVlIHRoYXQgY2FuIHN0aWxsIGJlIHVzZWQgdG8gZHJhdyB0aGluZ3MKICAgKiBvbiB0aGUgY2FudmFzIChzdWNoIGFzIGxpbmVzIGZyb20gLWh1Z2UgdG8gK2h1Z2UpLgogICAqCiAgICogQGNvbnN0YW50IHtudW1iZXJ9CiAgICovCiAgaHVnZSwKCiAgLyoqCiAgICogVGhlIHJhdGlvIG9mIGEgY2lyY2xlJ3MgY2lyY3VtZmVyZW5jZSB0byBpdHMgcmFkaXVzLgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1R1cm5fKGFuZ2xlKSNUYXVfcHJvcG9zYWxzCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKgogICAqIEBzZWUge0BsaW5rIFBJfQogICAqLwogIFRBVSwKfSA9IHsgZXBzaWxvbjogMWUtMTAsIGh1Z2U6IDFfMDAwXzAwMCwgVEFVOiBQSSAqIDIgfTsKZnVuY3Rpb24gZ3JpZCgpIHsKICBzYXZlKCk7CiAgc2V0TGluZVdpZHRoKDAuNSk7CiAgbm9GaWxsKCk7CiAgc2V0U3Ryb2tlKF9fZ3JpZF9jb2xvcik7CiAgZm9yICgKICAgIGxldCB4ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHggPCB3aWR0aDsKICAgIHggKz0gX19ncmlkX3NwYWNpbmcKICApIHsKICAgIGxpbmUoeCwgMCwgeCwgaGVpZ2h0KTsKICB9CiAgZm9yICgKICAgIGxldCB5ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHkgPCBoZWlnaHQ7CiAgICB5ICs9IF9fZ3JpZF9zcGFjaW5nCiAgKSB7CiAgICBsaW5lKDAsIHksIHdpZHRoLCB5KTsKICB9CiAgcmVzdG9yZSgpOwp9CmZ1bmN0aW9uIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCkgewogIC8vIFdlIGRvbid0IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggdGhlIGJyb3dzZXIsIHNvIHdlJ3JlIG9ubHkKICAvLyBnb2luZyB0byBhbGxvdyB1bm1vZGlmaWVkIGtleXMsIG9yIHNoaWZ0LW1vZGlmaWVkIGtleXMsCiAgLy8gYW5kIHRhYiBoYXMgdG8gYWx3YXlzIHdvcmsuIEZvciBvYnZpb3VzIHJlYXNvbnMuCiAgY29uc3QgdGFiID0gZXZ0LmtleSAhPT0gIlRhYiI7CiAgY29uc3QgZnVuY3Rpb25LZXkgPSBldnQua2V5Lm1hdGNoKC9GXGQrLykgPT09IG51bGw7CiAgY29uc3Qgc3BlY2lmaWNDaGVjayA9IHRhYiAmJiBmdW5jdGlvbktleTsKICBpZiAoIWV2dC5hbHRLZXkgJiYgIWV2dC5jdHJsS2V5ICYmICFldnQubWV0YUtleSAmJiBzcGVjaWZpY0NoZWNrKSB7CiAgICBpZiAoZXZ0LnRhcmdldCA9PT0gX19jYW52YXMpIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIF9fa2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBrZXlib2FyZFtrZXldID0gRGF0ZS5ub3coKTsKICBpZiAodHlwZW9mIGtleURvd24gIT09IGB1bmRlZmluZWRgKQogICAga2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9CgpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBrZXlkb3duYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlEb3duKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0pOwoKZnVuY3Rpb24gX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBkZWxldGUga2V5Ym9hcmRba2V5XTsKICBpZiAodHlwZW9mIGtleVVwICE9PSBgdW5kZWZpbmVkYCkKICAgIGtleVVwKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0KCl9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoYGtleXVwYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9KTsKZnVuY3Rpb24gX19jaGVja0ZvcmN1cnJlbnRNb3ZhYmxlKHgsIHksIHR5cGUpIHsKICBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwoKICBpZiAoIV9fbW92YWJsZV9wb2ludHMubGVuZ3RoKSByZXR1cm47CgogIGNvbnN0IG1hdGNoZXMgPSBbXTsKICBjb25zdCBtYXRjaFBhZGRpbmcgPSB0eXBlLmluY2x1ZGVzKGBtb3VzZWApID8gMTAgOiAzMDsKCiAgX19tb3ZhYmxlX3BvaW50cy5mb3JFYWNoKChwLCBwb3MpID0+IHsKICAgIGlmIChwIGluc3RhbmNlb2YgU2hhcGUpIHsKICAgICAgY29uc3QgciA9IHAuaW5zaWRlKHgsIHkpOwogICAgICBpZiAoci5pbkJvdW5kcykgewogICAgICAgIG1hdGNoZXMucHVzaCh7IHAsIGQ6IGRpc3QoeCwgeSwgci54LCByLnkpIH0pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZXQgeDIgPSBwWzBdID09PSB1bmRlZmluZWQgPyBwLnggOiBwWzBdOwogICAgICBsZXQgeTIgPSBwWzFdID09PSB1bmRlZmluZWQgPyBwLnkgOiBwWzFdOwogICAgICBjb25zdCBkID0gZGlzdCh4LCB5LCB4MiwgeTIpOwogICAgICBpZiAoZCA8IChwLnIgPyBwLnIgOiAwKSArIG1hdGNoUGFkZGluZykgewogICAgICAgIG1hdGNoZXMucHVzaCh7IHAsIGQgfSk7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgX19jYW52YXMuc3R5bGUuY3Vyc29yID0gYGF1dG9gOwoKICBpZiAobWF0Y2hlcy5sZW5ndGgpIHsKICAgIG1hdGNoZXMuc29ydCgoYSwgYikgPT4gYS5kIC0gYi5kKTsKICAgIGN1cnJlbnRNb3ZhYmxlID0gbWF0Y2hlc1swXS5wOwogICAgX19jYW52YXMuc3R5bGUuY3Vyc29yID0gYHBvaW50ZXJgOwogIH0KfQoKZnVuY3Rpb24gX190b1BvaW50ZXJFdmVudChldnQpIHsKICBsZXQgcG9pbnRlciA9IGV2dDsKICAvLyBDb252ZXJ0IG1vdXNlIG9yIHRvdWNoIGludG8gZ2VuZXJpYyBwb2ludGVyLiBXaGljaCB3ZSBuZWVkCiAgLy8gdG8gZG8gYmVjYXVzZSBDaHJvbWUgb24gTWFjT1MgaGFzIGRlY2lkZWQgdG8gbm90IGdlbmVyYXRlCiAgLy8gcG9pbnRlciBldmVudHMgd2hlbiB0aGVyZSdzIGEgbW91c2UuIFRoYW5rcyBHb29nbGUhCiAgaWYgKGV2dC50eXBlLmluY2x1ZGVzKGB0b3VjaGApKSB7CiAgICBjb25zdCB7IHRvdWNoZXMsIGNoYW5nZWRUb3VjaGVzIH0gPSBldnQub3JpZ2luYWxFdmVudCA/PyBldnQ7CiAgICBwb2ludGVyID0gdG91Y2hlc1swXSA/PyBjaGFuZ2VkVG91Y2hlc1swXTsKICB9CiAgY29uc3QgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBwb2ludGVyOwogIGNvbnN0IHsgbGVmdCwgdG9wIH0gPSBfX2NhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICByZXR1cm4geyBvZmZzZXRYOiBjbGllbnRYIC0gbGVmdCwgb2Zmc2V0WTogY2xpZW50WSAtIHRvcCB9Owp9CgpmdW5jdGlvbiBfX3BvaW50ZXJEb3duKHgsIHkpIHsKICBpZiAoY3VycmVudE1vdmFibGUpIHsKICAgIGN1cnJlbnRNb3ZhYmxlLl9keCA9IGN1cnJlbnRNb3ZhYmxlLnggLSB4OwogICAgY3VycmVudE1vdmFibGUuX2R5ID0gY3VycmVudE1vdmFibGUueSAtIHk7CiAgfQogIGlmICh0eXBlb2YgcG9pbnRlckRvd24gIT09IGB1bmRlZmluZWRgKSBwb2ludGVyRG93bih4LCB5KTsKfQoKW2B0b3VjaHN0YXJ0YCwgYG1vdXNlZG93bmBdLmZvckVhY2goKHR5cGUpID0+IHsKICBfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIChldnQpID0+IHsKICAgIGlmIChfX2ZpbmlzaGVkX3NldHVwKSB7CiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIGNvbnN0IHsgb2Zmc2V0WCwgb2Zmc2V0WSB9ID0gX190b1BvaW50ZXJFdmVudChldnQpOwogICAgICBjb25zdCB7IHgsIHkgfSA9IHNjcmVlblRvV29ybGQob2Zmc2V0WCwgb2Zmc2V0WSk7CiAgICAgIE9iamVjdC5hc3NpZ24ocG9pbnRlciwgeyB4LCB5LCB0eXBlLCBkb3duOiB0cnVlLCBtYXJrOiB7IHgsIHkgfSB9KTsKICAgICAgX19jaGVja0ZvcmN1cnJlbnRNb3ZhYmxlKHgsIHksIHR5cGUpOwogICAgICBfX3BvaW50ZXJEb3duKHgsIHkpOwogICAgfQogIH0pOwp9KTsKCmZ1bmN0aW9uIF9fcG9pbnRlclVwKHgsIHkpIHsKICBpZiAodHlwZW9mIHBvaW50ZXJVcCAhPT0gYHVuZGVmaW5lZGApIHBvaW50ZXJVcCh4LCB5KTsKICBpZiAocG9pbnRlci5tYXJrPy54ID09PSB4ICYmIHBvaW50ZXIubWFyaz8ueSA9PT0geSkgewogICAgaWYgKHR5cGVvZiBwb2ludGVyQ2xpY2sgIT09IGB1bmRlZmluZWRgKSBwb2ludGVyQ2xpY2soeCwgeSk7CiAgfQp9CgpbYHRvdWNoZW5kYCwgYG1vdXNldXBgXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZXZ0KSA9PiB7CiAgICBpZiAoX19maW5pc2hlZF9zZXR1cCkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IF9fdG9Qb2ludGVyRXZlbnQoZXZ0KTsKICAgICAgY29uc3QgeyB4LCB5IH0gPSBzY3JlZW5Ub1dvcmxkKG9mZnNldFgsIG9mZnNldFkpOwogICAgICBPYmplY3QuYXNzaWduKHBvaW50ZXIsIHsgeCwgeSwgdHlwZSwgZG93bjogZmFsc2UsIG1hcms6IGZhbHNlIH0pOwogICAgICBfX3BvaW50ZXJVcCh4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJNb3ZlKHgsIHkpIHsKICBsZXQgcG9pbnRNb3ZlZCA9IGZhbHNlOwogIGlmIChwb2ludGVyLmRvd24gJiYgY3VycmVudE1vdmFibGUpIHsKICAgIGlmIChjdXJyZW50TW92YWJsZVswXSkgewogICAgICBjdXJyZW50TW92YWJsZVswXSA9IHggKyBjdXJyZW50TW92YWJsZS5fZHg7CiAgICAgIGN1cnJlbnRNb3ZhYmxlWzFdID0geSArIGN1cnJlbnRNb3ZhYmxlLl9keTsKICAgIH0gZWxzZSB7CiAgICAgIGN1cnJlbnRNb3ZhYmxlLnggPSB4ICsgY3VycmVudE1vdmFibGUuX2R4OwogICAgICBjdXJyZW50TW92YWJsZS55ID0geSArIGN1cnJlbnRNb3ZhYmxlLl9keTsKICAgIH0KICAgIHBvaW50TW92ZWQgPSB0cnVlOwogIH0KCiAgaWYgKHR5cGVvZiBwb2ludGVyTW92ZSAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJNb3ZlKHgsIHkpOwogICAgcG9pbnRlci5kcmFnID0gZmFsc2U7CiAgICBpZiAocG9pbnRlci5kb3duICYmIHR5cGVvZiBwb2ludGVyRHJhZyAhPT0gYHVuZGVmaW5lZGApIHsKICAgICAgcG9pbnRlci5kcmFnID0gdHJ1ZTsKICAgICAgcG9pbnRlckRyYWcoeCwgeSk7CiAgICB9CiAgfQogIGlmIChwb2ludE1vdmVkICYmICFwbGF5aW5nKSByZWRyYXcoKTsKfQoKW2B0b3VjaG1vdmVgLCBgbW91c2Vtb3ZlYF0uZm9yRWFjaCgodHlwZSkgPT4gewogIF9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgKGV2dCkgPT4gewogICAgaWYgKF9fZmluaXNoZWRfc2V0dXApIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgY29uc3QgeyBvZmZzZXRYLCBvZmZzZXRZIH0gPSBfX3RvUG9pbnRlckV2ZW50KGV2dCk7CiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gc2NyZWVuVG9Xb3JsZChvZmZzZXRYLCBvZmZzZXRZKTsKICAgICAgT2JqZWN0LmFzc2lnbihwb2ludGVyLCB7IHgsIHksIHR5cGUgfSk7CiAgICAgIGlmICghcG9pbnRlci5kb3duKSBfX2NoZWNrRm9yY3VycmVudE1vdmFibGUoeCwgeSwgdHlwZSk7CiAgICAgIF9fcG9pbnRlck1vdmUoeCwgeSk7CiAgICB9CiAgfSk7Cn0pOwoKZnVuY3Rpb24gX19wb2ludGVyQWN0aXZlKGFjdGl2ZSkgewogIGlmICh0eXBlb2YgcG9pbnRlckFjdGl2ZSAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJBY3RpdmUoYWN0aXZlKTsKICB9Cn0KCltgdG91Y2hzdGFydGAsIGBtb3VzZWVudGVyYF0uZm9yRWFjaCgodHlwZSkgPT4gewogIF9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgKCkgPT4gewogICAgcG9pbnRlci5hY3RpdmUgPSB0cnVlOwogICAgX19wb2ludGVyQWN0aXZlKHRydWUpOwogIH0pOwp9KTsKCltgdG91Y2hlbmRgLCBgbW91c2VsZWF2ZWBdLmZvckVhY2goKHR5cGUpID0+IHsKICBfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsICgpID0+IHsKICAgIHBvaW50ZXIuYWN0aXZlID0gZmFsc2U7CiAgICBfX3BvaW50ZXJBY3RpdmUoZmFsc2UpOwogIH0pOwp9KTsKLyoqCiAqIGNvZGUgdXNlZCBieSBwcm9qZWN0LmpzLCBidXQgbmFtZWQgc28gdGhhdCBpdCBsb2FkcwogKiBmaXJzdCwgYW5kIGRvZXMgbm90IGdldCBhZGRlZCB0byB0aGUgZC50cyBmaWxlLgogKi8KY2xhc3MgQ2FiaW5ldFByb2plY3RvciB7CiAgQSA9IDA7CiAgQiA9IDA7CiAgQyA9IDA7CgogIGNvbnN0cnVjdG9yKG94LCBveSwgc2NhbGUsIHBoaSkgewogICAgdGhpcy51cGRhdGUob3gsIG95LCBzY2FsZSwgcGhpKTsKICB9CgogIHNldFJvdGF0aW9uKHggPSAwLCB5ID0gMCwgeiA9IDApIHsKICAgIHRoaXMuQSA9IHg7CiAgICB0aGlzLkIgPSB6OwogICAgdGhpcy5DID0geTsKICB9CgogIHJvdGF0ZSh4LCB5LCB6KSB7CiAgICBsZXQgeyBBLCBCLCBDIH0gPSB0aGlzOwogICAgbGV0IGEgPSB4OwogICAgbGV0IGIgPSB5ICogY29zKEEpIC0geiAqIHNpbihBKTsKICAgIGxldCBjID0geSAqIHNpbihBKSArIHogKiBjb3MoQSk7CiAgICB4ID0gYTsKICAgIHkgPSBiOwogICAgeiA9IGM7CiAgICBhID0geCAqIGNvcyhCKSArIHogKiBzaW4oQik7CiAgICBiID0geTsKICAgIGMgPSB4ICogLXNpbihCKSArIHogKiBjb3MoQik7CiAgICB4ID0gYTsKICAgIHkgPSBiOwogICAgeiA9IGM7CiAgICBhID0geCAqIGNvcyhDKSAtIHkgKiBzaW4oQyk7CiAgICBiID0geCAqIHNpbihDKSArIHkgKiBjb3MoQyk7CiAgICBjID0gejsKCiAgICByZXR1cm4gW2EsIGIsIGNdOwogIH0KCiAgdXBkYXRlKG94ID0gMCwgb3kgPSAwLCBzY2FsZSA9IDEsIHBoaSA9IC1QSSAvIDYpIHsKICAgIHRoaXMub2Zmc2V0ID0gbmV3IFBvaW50KG94LCBveSk7CiAgICB0aGlzLnNjYWxlID0gc2NhbGU7CiAgICB0aGlzLnBoaSA9IHBoaTsKICB9CgogIHByb2plY3QoeCwgeSwgeikgewogICAgY29uc3QgeyBvZmZzZXQsIHNjYWxlLCBwaGkgfSA9IHRoaXM7CiAgICB4ICo9IHNjYWxlOwogICAgeSAqPSBzY2FsZTsKICAgIHogKj0gc2NhbGU7CiAgICBbeCwgeSwgel0gPSB0aGlzLnJvdGF0ZSh4LCB5LCB6KTsKICAgIGNvbnN0IGEgPSB5LAogICAgICBiID0gLXosCiAgICAgIGMgPSAteCAvIDI7CgogICAgcmV0dXJuIG5ldyBQb2ludCgKICAgICAgb2Zmc2V0LnggKyBhICsgYyAqIGNvcyhwaGkpLAogICAgICBvZmZzZXQueSArIGIgKyBjICogc2luKHBoaSkKICAgICk7CiAgfQp9CgpsZXQgX19wcm9qZWN0b3IgPSBuZXcgQ2FiaW5ldFByb2plY3RvcigpOwovKioKICogLi4uZG9jcyBnbyBoZXJlLi4uCiAqLwpjbGFzcyBQYXRoIHsKICBjbG9zZWQgPSBmYWxzZTsKICBveCA9IDA7CiAgb3kgPSAwOwogIHBvaW50cyA9IFtdOwoKICBhZGQoeCwgeSkgewogICAgY29uc3QgeyBjbG9zZWQsIHBvaW50cyB9ID0gdGhpczsKICAgIGlmIChjbG9zZWQpIHJldHVybjsKICAgIGNvbnN0IHAgPSB7IHgsIHkgfTsKICAgIHBvaW50cy5wdXNoKHApOwogICAgcmV0dXJuIHA7CiAgfQoKICBjbG9zZSgpIHsKICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTsKICB9CgogIG9mZnNldCh4LCB5KSB7CiAgICB0aGlzLm94ID0geDsKICAgIHRoaXMub3kgPSB5OwogIH0KCiAgY29tbWl0KCkgewogICAgY29uc3QgeyBveCwgb3ksIHBvaW50cyB9ID0gdGhpczsKICAgIHBvaW50cy5mb3JFYWNoKChwKSA9PiB7CiAgICAgIHAueCArPSBveDsKICAgICAgcC55ICs9IG95OwogICAgfSk7CiAgICB0aGlzLm94ID0gMDsKICAgIHRoaXMub3kgPSAwOwogIH0KCiAgZHJhdyhzaG93UG9pbnRzID0gZmFsc2UpIHsKICAgIGNvbnN0IHsgY2xvc2VkLCBveCwgb3ksIHBvaW50cyB9ID0gdGhpczsKICAgIHN0YXJ0KCk7CiAgICBjb25zdCBzID0gcG9pbnRzLnNsaWNlKCk7CiAgICBpZiAoY2xvc2VkKSBzLnB1c2goc1swXSk7CiAgICBzLmZvckVhY2goKHsgeCwgeSB9KSA9PiB2ZXJ0ZXgoeCArIG94LCB5ICsgb3kpKTsKICAgIGVuZCgpOwogICAgaWYgKHNob3dQb2ludHMpIHsKICAgICAgcG9pbnRzLmZvckVhY2goKHApID0+IHBvaW50KHAueCArIG94LCBwLnkgKyBveSkpOwogICAgfQogIH0KCiAgaW5zaWRlKHgsIHkpIHsKICAgIC8vIGxldCdzIGRvIHNvbWUgcmF5IGNhc3RpbmcsIHRyZWF0aW5nIHRoZSBwYXRoIGNsb3NlZC4KICAgIGxldCBjcm9zc2luZyA9IDA7CiAgICBjb25zdCB7IG94LCBveSwgcG9pbnRzIH0gPSB0aGlzOwogICAgY29uc3QgeyBsZW5ndGg6IG4gfSA9IHBvaW50czsKICAgIGlmIChuIDwgMykgcmV0dXJuIDA7CiAgICBmb3IgKGxldCBpID0gMCwgcDEsIHAyOyBpIDwgbjsgaSsrKSB7CiAgICAgIHAxID0gcG9pbnRzW2ldOwogICAgICBwMiA9IHBvaW50c1soaSArIDEpICUgbl07CiAgICAgIGNvbnN0IHIgPSBsbGkoCiAgICAgICAgewogICAgICAgICAgeDogcDEueCArIG94LAogICAgICAgICAgeTogcDEueSArIG95LAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgeDogcDIueCArIG94LAogICAgICAgICAgeTogcDIueSArIG95LAogICAgICAgIH0sCiAgICAgICAgeyB4LCB5IH0sCiAgICAgICAgeyB4LCB5OiB5IC0gaHVnZSB9CiAgICAgICk7CiAgICAgIGlmIChyPy5pbkJvdW5kcykgY3Jvc3NpbmcrKzsKICAgIH0KICAgIHJldHVybiBjcm9zc2luZyAlIDIgPT09IDE7CiAgfQp9CgovKioKICogLi4uY29kZSBnb2VzIGhlcmUuLi4KICovCmNsYXNzIFNoYXBlIHsKICBwYXRocyA9IFtdOwogIGRyYWdnaW5nID0gZmFsc2U7CiAgcmVzaXphYmxlID0gZmFsc2U7CgogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5uZXdQYXRoKCk7CiAgfQoKICBhbGxvd1Jlc2l6aW5nKGFsbG93ZWQgPSB0cnVlKSB7CiAgICB0aGlzLnJlc2l6YWJsZSA9IGFsbG93ZWQ7CiAgfQoKICBuZXdQYXRoKGNsb3NlID0gZmFsc2UpIHsKICAgIGNvbnN0IHsgcGF0aHMgfSA9IHRoaXM7CiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiBwYXRocy5wdXNoKG5ldyBQYXRoKCkpOwogICAgfQogICAgY29uc3QgY3VycmVudCA9IHBhdGhzLmF0KC0xKTsKICAgIGlmIChjdXJyZW50Py5wb2ludHMubGVuZ3RoKSB7CiAgICAgIGlmIChjbG9zZSkgY3VycmVudC5jbG9zZSgpOwogICAgICBwYXRocy5wdXNoKG5ldyBQYXRoKCkpOwogICAgfQogIH0KCiAgYWRkKHgsIHkpIHsKICAgIGNvbnN0IHAgPSB0aGlzLnBhdGhzLmF0KC0xKS5hZGQoeCwgeSk7CiAgICBpZiAodGhpcy5yZXNpemFibGUpIHNldE1vdmFibGUocCk7CiAgfQoKICBvZmZzZXQoeCwgeSwgc3VicGF0aCA9IHVuZGVmaW5lZCkgewogICAgY29uc3QgeyBkcmFnZ2luZywgcGF0aHMgfSA9IHRoaXM7CiAgICBpZiAoIWRyYWdnaW5nKSByZXR1cm47CiAgICBpZiAoc3VicGF0aCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHBhdGhzW3N1YnBhdGhdLm9mZnNldCh4LCB5KTsKICAgIH0gZWxzZSB7CiAgICAgIHBhdGhzLmZvckVhY2goKHApID0+IHAub2Zmc2V0KHgsIHkpKTsKICAgIH0KICB9CgogIGNvbW1pdCgpIHsKICAgIHRoaXMucGF0aHMuZm9yRWFjaCgocCkgPT4gcC5jb21taXQoKSk7CiAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7CiAgfQoKICBkcmF3KHNob3dQb2ludHMgPSBmYWxzZSkgewogICAgdGhpcy5wYXRocy5mb3JFYWNoKChwKSA9PiBwLmRyYXcoc2hvd1BvaW50cykpOwogIH0KCiAgaW5zaWRlKHgsIHkpIHsKICAgIHJldHVybiB0aGlzLnBhdGhzCiAgICAgIC5tYXAoKHAsIHBhdGhJZCkgPT4gewogICAgICAgIHAucGF0aElkID0gcGF0aElkOwogICAgICAgIHJldHVybiBwOwogICAgICB9KQogICAgICAuZmlsdGVyKChwKSA9PiBwLmluc2lkZSh4LCB5KSk7CiAgfQp9Ci8qKgogKiBFbnN1cmUgdGhhdCB0aGVyZSBpcyBubyBib3JkZXIgYXJvdW5kIHRoZSBjYW52YXMgZWxlbWVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Qm9yZGVyKDUsIGByZWRgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICB0ZXh0KGBjbGljayBtZWAsIHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJVcCh4LCB5KSB7CiAqICAgICAgIHNldEJvcmRlcig1LCBgcmVkYCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LCB5KSB7CiAqICAgICAgIG5vQm9yZGVyKCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0Qm9yZGVyfQogKi8KZnVuY3Rpb24gbm9Cb3JkZXIoKSB7CiAgc2V0Qm9yZGVyKGZhbHNlKTsKfQoKLyoqCiAqIERpc2FibGUgYm90aCBzdHJva2UgYW5kIGZpbGwgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dChgTm93IHlvdSBzZWUgbWVgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9Db2xvcigpOwogKiAgICAgICB0ZXh0KGBOb3cgeW91IGRvbid0YCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0Q29sb3J9CiAqIEBzZWUge0BsaW5rIG5vU3Ryb2tlfQogKiBAc2VlIHtAbGluayBub0ZpbGx9CiAqLwpmdW5jdGlvbiBub0NvbG9yKCkgewogIG5vRmlsbCgpOwogIG5vU3Ryb2tlKCk7Cn0KCi8qKgogKiBIaWRlIHRoZSBjdXJzb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYCNGRjAyYCk7CiAqICAgICAgIHJlY3QoMCwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgc2V0Q29sb3IoYCMwRkYyYCk7CiAqICAgICAgIHJlY3Qod2lkdGgvMiwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKHgsIHkpIHsKICogICAgICAgaWYgKHggPCB3aWR0aC8yKSB7CiAqICAgICAgICAgc2V0Q3Vyc29yKEFVVE8pOwogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIG5vQ3Vyc29yKCk7CiAqICAgICAgIH0KICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRDdXJzb3J9CiAqLwpmdW5jdGlvbiBub0N1cnNvcigpIHsKICBfX2NhbnZhcy5zdHlsZS5jdXJzb3IgPSBgbm9uZWA7Cn0KCi8qKgogKiBEaXNhYmxlIHRoZSBmaWxsIGNvbG9yLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHJlY3QoMjAsIDcwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBmaWxsZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHJlY3QoMzAsIDgwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBub3QgZmlsbGVkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0RmlsbH0KICovCmZ1bmN0aW9uIG5vRmlsbCgpIHsKICBzZXRGaWxsKGB0cmFuc3BhcmVudGApOwp9CgovKioKICogRGlzYWJsZSB0aGUgZGVmYXVsdCBncmlkIGJhY2tncm91bmQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dChgY2xpY2sgbWVgLCB3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyVXAoeCwgeSkgewogKiAgICAgICBzZXRHcmlkKDIwLCBgbGlnaHRncmV5YCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LCB5KSB7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgICByZWRyYXcoKQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNldEdyaWR9CiAqLwpmdW5jdGlvbiBub0dyaWQoKSB7CiAgX19kcmF3X2dyaWQgPSBmYWxzZTsKfQoKLyoqCiAqIFNldCB0aGUgbGluZSBzdHJva2UgdG8gInNvbGlkIi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0TGluZURhc2goMSk7CiAqICAgICAgIGxpbmUoMCwyMCx3aWR0aCw1MCk7CiAqICAgICAgIHNldExpbmVEYXNoKDUpOwogKiAgICAgICBsaW5lKDAsMzAsd2lkdGgsOTApOwogKiAgICAgICBzZXRMaW5lRGFzaCgxLDIsMyw0KTsKICogICAgICAgbGluZSgwLDQwLHdpZHRoLDEzMCk7CiAqICAgICAgIG5vTGluZURhc2goKTsKICogICAgICAgbGluZSgwLDUwLHdpZHRoLDE4MCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0TGluZURhc2h9CiAqLwoKZnVuY3Rpb24gbm9MaW5lRGFzaCgpIHsKICBfX2N0eC5zZXRMaW5lRGFzaChbXSk7Cn0KCi8qKgogKiBEaXNhYmxlIHRoZSBzdHJva2UgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKDEpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgcmVjdCgyMCwgNzAsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9TdHJva2UoKTsKICogICAgICAgcmVjdCg0MiwgODIsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYG5vdCBzdHJva2VkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0U3Ryb2tlfQogKi8KCmZ1bmN0aW9uIG5vU3Ryb2tlKCkgewogIHNldFN0cm9rZShgdHJhbnNwYXJlbnRgKTsKfQoKLyoqCiAqIERpc2FibGUgdGV4dCBzdHJva2luZywgYnV0IG5vdCByZWd1bGFyIHNoYXBlIHN0cm9raW5nLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHJlY3QoMjAsIDcwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBzdHJva2VkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgLSAyNSk7CiAqICAgICAgIG5vVGV4dFN0cm9rZSgpOwogKiAgICAgICByZWN0KDQyLCA4MiwgMjAsIDIwKTsKICogICAgICAgdGV4dChgbm90IHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiArIDI1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRUZXh0U3Ryb2tlfQogKi8KCmZ1bmN0aW9uIG5vVGV4dFN0cm9rZSgpIHsKICBzZXRUZXh0U3Ryb2tlKGZhbHNlLCB1bmRlZmluZWQpOwp9Ci8qKgogKiBBZGQgYSBzbGlkZXIgdG8geW91ciBmaWd1cmUsIGFsbG93aW5nIHVzZXJzIHRvIGNvbnRyb2wKICogYSB2YXJpYWJsZSBpbiB5b3VyIGdyYXBoaWNzIGNvZGUgZGlyZWN0bHkgYnkgaW50ZXJhY3RpbmcKICogd2l0aCB0aGF0IG9uLXBhZ2Ugc2xpZGVyLCB3aGljaCBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBpZgogKiB5b3Ugd2FudCB5b3VyIGdyYXBoaWNzIHRvIGJlIHVzZWFibGUgYnkgdXNlcnMgd2hvIGRvbid0CiAqIGhhdmUsIG9yIGNhbm5vdCB1c2UsIGEgbW91c2UuCiAqCiAqIFRoZSBgcHJvcExhYmVsYCB2YWx1ZSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlCiAqIHRoYXQgeW91ciBncmFwaGljcyBjb2RlIHVzZXMsIGFuZCBzaG91bGQgX25vdF8gYmUgInByZWFsbG9jYXRlZCIKICogaW4geW91ciBjb2RlIHdpdGggYSBjb25zdCwgbGV0LCBvciB2YXI6IGl0IHdpbGwgYXV0b21hdGljYWxseQogKiBnZXQgYWRkZWQgYXMgcGFydCBvZiB0aGUgc291cmNlIGxvYWRpbmcgcHJvY2Vzcy4KICoKICogVGhlIG9wdGlvbnMgb2JqZWN0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXM6CiAqCiAqIC0gbWluOm51bWJlciAtIHRoZSBzbGlkZXIncyBtaW5pbXVtIHZhbHVlLCBkZWZhdWx0cyB0byAwCiAqIC0gbWF4Om51bWJlciAtIHRoZSBzbGlkZXIncyBtYXhpbXVtIHZhbHVlLCBkZWZhdWx0cyB0byAxCiAqIC0gc3RlcCAtIHRoZSBzdGVwIHNpemUsIGRlZmF1bHRzIHRvIChtYXggLSBtaW4pLzEwCiAqIC0gdmFsdWUgLSB0aGUgaW5pdGlhbCB2YWx1ZSwgZGVmYXVsdHMgdG8gKG1heCArIG1pbikvMgogKiAtIGNsYXNzZXMgLSB0aGUgQ1NTIGNsYXNzZXMgdGhhdCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRzIHRvIGAic2xpZGVyImAKICogLSB0cmFuc2Zvcm0gLSBhIHZhbHVlIHByZXByb2Nlc3NvciAgZGVmYXVsdHMgdG8gKHYpID0+IHYKICoKICogVGhlIGB0cmFuc2Zvcm1gIHByZS1wcm9jZXNzb3IgcnVucyBhZnRlciB0aGUgdXNlciB1cGRhdGVzCiAqIHRoZSBzbGlkZXIsIGJ1dCBiZWZvcmUgaXRzIHZhbHVlIGdldHMgYXNzaWduZWQgdG8geW91ciB2YXJpYWJsZSwKICogc28gdGhhdCB5b3UgY2FuIG1hcCBpdCB0byBzb21ldGhpbmcgZWxzZSAoZm9yIGluc3RhbmNlLCBudW1iZXJzCiAqIGluIG9uZSByYW5nZSB0byBudW1iZXJzIGluIGEgY29tcGxldGVseSBkaWZmZXJlbnQgcmFuZ2UsIG9yIGV2ZW4KICogbnVtYmVycyB0byBzdHJpbmdzIG9yIGVudGlyZSBvYmplY3RzKQogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoNDAwLCAyMDApOwogKiAgICAgICBhZGRTbGlkZXIoYGJnQ29sb3JgLCB7CiAqICAgICAgICAgbWluOiAwLAogKiAgICAgICAgIG1heDogMjU1LAogKiAgICAgICAgIHN0ZXA6IDEsCiAqICAgICAgICAgdmFsdWU6IDIwMCwKICogICAgICAgICB0cmFuc2Zvcm06ICh2KSA9PiB7CiAqICAgICAgICAgICAvLyBjb252ZXJ0IHYgaW50byBhIGhleCBjb2xvciBjb2RlCiAqICAgICAgICAgICB2ID0gKHYpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBgMGApOwogKiAgICAgICAgICAgcmV0dXJuIGAjJHt2fSR7dn0ke3Z9YDsKICogICAgICAgICB9CiAqICAgICAgIH0pOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYmdDb2xvcik7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IHZhck5hbWUgVGhlIG5hbWUgZm9yIHRoZSB2YXJpYWJsZSB0aGlzIHNsaWRlciBnZXRzIHRpZWQgdG8uCiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFNlZSBkZXNjcmlwdGlvbgogKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH0gdGhlIEhUTUwgaW5wdXQgZWxlbWVudCBmb3IgdGhpcyBzbGlkZXIKICoKICogQHNlZSB7QGxpbmsgY2xlYXJTbGlkZXJzfQogKi8KZnVuY3Rpb24gYWRkU2xpZGVyKHByb3BMYWJlbCwgYXNzaWduLCBvcHRpb25zID0ge30pIHsKICBsZXQgewogICAgbWluLAogICAgbWF4LAogICAgc3RlcCwKICAgIHZhbHVlLAogICAgY2xhc3NlcyA9IGBzbGlkZXJgLAogICAgdHJhbnNmb3JtID0gKHYpID0+IHYsCiAgfSA9IG9wdGlvbnM7CgogIG1pbiA9IG1pbiA9PT0gdW5kZWZpbmVkID8gMCA6IG1pbjsKICBtYXggPSBtYXggPT09IHVuZGVmaW5lZCA/IDEgOiBtYXg7CiAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChtYXggLSBtaW4pIC8gMTAgOiBzdGVwOwogIHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IChtYXggKyBtaW4pIC8gMiA6IHZhbHVlOwoKICAvLyBjdXN0b20gInJvdW5kaW5nIiwgcHVyZWx5IGZvciBzdHJpbmdzCiAgY29uc3Qgcm91bmQgPSAodiwgZCA9IDQpID0+IHsKICAgIHYgPSBgJHt2fWA7CiAgICBjb25zdCBmcyA9IHYuaW5kZXhPZihgLmApOwogICAgaWYgKGZzICE9PSAtMSkgewogICAgICBsZXQgcHJlYyA9IGQgLSBmcyA+IDAgPyBkIC0gZnMgOiAwOwogICAgICB2ID0gdi5zdWJzdHJpbmcoMCwgZnMgKyBwcmVjKTsKICAgIH0KICAgIHJldHVybiB2OwogIH07CgogIGNvbnN0IGNyZWF0ZSA9ICh0YWcpID0+IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTsKCiAgbGV0IHNsaWRlciA9IGNyZWF0ZShgaW5wdXRgKTsKICBzbGlkZXIudHlwZSA9IGByYW5nZWA7CiAgc2xpZGVyLm1pbiA9IG1pbjsKICBzbGlkZXIubWF4ID0gbWF4OwogIHNsaWRlci5zdGVwID0gc3RlcDsKICBzbGlkZXIuc2V0QXR0cmlidXRlKGB2YWx1ZWAsIHZhbHVlKTsKICBzbGlkZXIuc2V0QXR0cmlidXRlKGBjbGFzc2AsIGNsYXNzZXMpOwoKICBjb25zdCB1cGRhdGUgPSAoeyB2YWx1ZSB9KSA9PiB7CiAgICB2YWx1ZUZpZWxkLnRleHRDb250ZW50ID0gcm91bmQodmFsdWUpOwogICAgYXNzaWduKHRyYW5zZm9ybShwYXJzZUZsb2F0KHZhbHVlKSkpOwogICAgaWYgKCFwbGF5aW5nKSByZWRyYXcoKTsKICB9OwoKICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihgaW5wdXRgLCAoeyB0YXJnZXQgfSkgPT4gdXBkYXRlKHRhcmdldCkpOwoKICBsZXQgdGFibGUgPSBfX2VsZW1lbnQucXVlcnlTZWxlY3RvcihgdGFibGUuc2xpZGVyLXdyYXBwZXJgKTsKICBpZiAoIXRhYmxlKSB7CiAgICB0YWJsZSA9IGNyZWF0ZShgdGFibGVgKTsKICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoYHNsaWRlci13cmFwcGVyYCk7CiAgICBfX2VsZW1lbnQucHJlcGVuZCh0YWJsZSk7CiAgfQogIGxldCB0ciA9IGNyZWF0ZShgdHJgKTsKCiAgbGV0IHRkID0gY3JlYXRlKGB0ZGApOwogIGxldCBsYWJlbCA9IGNyZWF0ZShgbGFiZWxgKTsKICBsYWJlbC5jbGFzc0xpc3QuYWRkKGBzbGlkZXItbGFiZWxgKTsKICBsYWJlbC5pbm5lckhUTUwgPSBwcm9wTGFiZWwKICAgIC5yZXBsYWNlKC9fKC4rKSQvLCBgPHN1Yj4kMTwvc3ViPmApCiAgICAucmVwbGFjZSgvKFxkKykvLCBgPHN1Yj4kMTwvc3ViPmApOwogIHRkLmFwcGVuZChsYWJlbCk7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLW1pbmApOwogIHRkLnRleHRDb250ZW50ID0gcm91bmQoc2xpZGVyLm1pbik7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQud2lkdGggPSBgKmA7CiAgdGQuYXBwZW5kKHNsaWRlcik7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLW1heGApOwogIHRkLnRleHRDb250ZW50ID0gcm91bmQoc2xpZGVyLm1heCk7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdmFyIHZhbHVlRmllbGQgPSBjcmVhdGUoYGxhYmVsYCk7IC8vIGZ1bmN0aW9uIHNjb3BlZAogIHZhbHVlRmllbGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLXZhbHVlYCk7CiAgdGQuYXBwZW5kKHZhbHVlRmllbGQpOwogIHRyLmFwcGVuZCh0ZCk7CiAgdGQuYWRkRXZlbnRMaXN0ZW5lcihgcG9pbnRlcmRvd25gLCAoKSA9PiB7CiAgICBjb25zdCB2YWx1ZSA9IHByb21wdChgbmV3IHZhbHVlP2AsIHNsaWRlci52YWx1ZSk7CiAgICBpZiAodmFsdWUgIT09IG51bGwpIHsKICAgICAgc2xpZGVyLnZhbHVlID0gdmFsdWU7CiAgICAgIHVwZGF0ZSh7IHZhbHVlIH0pOwogICAgfQogIH0pOwoKICB0YWJsZS5hcHBlbmQodHIpOwoKICB1cGRhdGUoc2xpZGVyKTsKICByZXR1cm4gc2xpZGVyOwp9CgovKioKICogUmVtb3ZlIGFsbCBzbGlkZXJzIGZvciB5b3VyIGZpZ3VyZSBmcm9tIHRoZSBwYWdlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBhZGRTbGlkZXIoYHhgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICB0ZXh0KGBjbGljayB0byBjbGVhcmAsIHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKCkgewogKiAgICAgICBjbGVhclNsaWRlcnMoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBhZGRTbGlkZXJ9CiAqLwoKZnVuY3Rpb24gY2xlYXJTbGlkZXJzKCkgewogIGNvbnN0IHRhYmxlID0gX19lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYHRhYmxlLnNsaWRlci13cmFwcGVyYCk7CiAgaWYgKHRhYmxlKSB0YWJsZS5pbm5lckhUTUwgPSBgYDsKfQoKLyoqCiAqIEFkZCBhIGJ1dHRvbiBiZWxvdyB5b3VyIGZpZ3VyZSB0aGF0IGNhbiB0cmlnZ2VyIGV2ZW50LWJhc2VkCiAqIGNvZGUsIHdoaWNoIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGlmIHlvdSB3YW50IHlvdXIgZ3JhcGhpY3MKICogdG8gYmUgdXNlYWJsZSBieSB1c2VycyB3aG8gZG9uJ3QgaGF2ZSwgb3IgY2Fubm90IHVzZSwgYSBtb3VzZS4KICoKICogb25DbGljayBpcyBzaW1pbGFyIHRvIHRoZSBzdGFuZGFyZCBKUyBldmVudCBoYW5kbGVyLCBleGNlcHQKICogdGhhdCB0aGUgY2FsbCBhcmd1bWVudCBpcyBhIHJlZmVyZW5jZSB0byB5b3VyIGJ1dHRvbiwgbm90CiAqIHRoZSBjbGljayBldmVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IGNvbG9ycyA9IFtgd2hpdGVgLCBgYmxhY2tgXTsKICogICAgIGxldCBiZ0NvbG9yID0gMDsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgYWRkQnV0dG9uKGBmbGlwIGJhY2tncm91bmRgLCAoYnV0dG9uKSA9PiB7CiAqICAgICAgICAgYmdDb2xvciA9IC0oYmdDb2xvciAtIDEpOwogKiAgICAgICAgIHJlZHJhdygpOwogKiAgICAgICB9KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGNvbG9yc1tiZ0NvbG9yXSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIFRoZSB0ZXh0IGxhYmVsIGZvciB5b3VyIGJ1dHRvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNsaWNrIFRoZSBjbGljayBoYW5kbGluZyBmdW5jdGlvbiwgc2VlIGRlc2NyaXB0aW9uLgogKiBAcmV0dXJucyB7SFRNTEJ1dHRvbkVsZW1lbnR9IFRoZSBidXR0b24gZWxlbWVudCB0aGlzIGFkZGVkIHRvIHRoZSBwYWdlCiAqCiAqIEBzZWUge0BsaW5rIGNsZWFyQnV0dG9uc30KICovCmZ1bmN0aW9uIGFkZEJ1dHRvbihsYWJlbCwgb25DbGljaykgewogIGlmICghb25DbGljaykgdGhyb3cgbmV3IEVycm9yKGBhIGJ1dHRvbiBtdXN0IGhhdmUgYW4gb25DbGljayBoYW5kbGVyYCk7CiAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgYnV0dG9uYCk7CiAgYnRuLmNsYXNzTGlzdC5hZGQoYGdyYXBoaWNzLWVsZW1lbnQtYnV0dG9uYCk7CiAgYnRuLnRleHRDb250ZW50ID0gbGFiZWw7CiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4gb25DbGljayhidG4pKTsKICBfX2VsZW1lbnQucHJlcGVuZChidG4pOwogIHJldHVybiBidG47Cn0KCi8qKgogKiBSZW1vdmUgYWxsIGJ1dHRvbnMgZm9yIHlvdXIgZmlndXJlIGZyb20gdGhlIHBhZ2UuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIGFkZEJ1dHRvbihgdGhpcyBkb2VzIG5vdGhpbmdgLCAoKSA9PiB7fSk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dChgY2xpY2sgdG8gY2xlYXJgLCB3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bigpIHsKICogICAgICAgY2xlYXJCdXR0b25zKCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgYWRkQnV0dG9ufQogKi8KZnVuY3Rpb24gY2xlYXJCdXR0b25zKCkgewogIF9fZWxlbWVudAogICAgLnF1ZXJ5U2VsZWN0b3JBbGwoYGJ1dHRvbi5ncmFwaGljcy1lbGVtZW50LWJ1dHRvbmApCiAgICAuZm9yRWFjaCgoZSkgPT4gZS5yZW1vdmUoKSk7Cn0KLyoqCiAqIERyYXcgYSBjaXJjdWxhciBhcmMgd2l0aCByYWRpdXMgYHJgIGF0ICh4LHkpLAogKiBzdGFydGluZyBhdCBhbmdsZSBgc2AgYW5kIGVuZGluZyBhdCBhbmdsZSBgZWAuCiAqIElmIGB3ZWRnZWAgaXMgdHJ1ZSwgdGhpcyB3aWxsIGRyYXcgYSBjbG9zZWQKICogc2hhcGUgdGhhdCBpcyBhbmNob3JlZCBhdCAoeCx5KS4gSWYgb21pdHRlZAogKiBvciBleHBsaWNpdGx5IHNldCB0byBmYWxzZSwgdGhpcyB3aWxsIGRyYXcKICogYW4gb3BlbiBzaGFwZSB3aXRoIGEgZmlsbCB0aGF0IGNvbm5lY3RzIHRoZQogKiBmaXJzdCBhbmQgbGFzdCBwb2ludCBvbiB0aGUgYXJjLCBidXQgbm8gY2xvc2luZwogKiBzdHJva2UuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBhcmMod2lkdGgvMiArIDMwLCBoZWlnaHQvMiAtIDQwLCA0MCwgMCwgMC42NipUQVUpOwogKiAgICAgICBhcmMod2lkdGgvMiAtIDMwLCBoZWlnaHQvMiArIDIwLCA0MCwgMCwgMC42NipUQVUsIHRydWUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBjaXJjdWxhciBjZW50ZXIgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgY2lyY3VsYXIgY2VudGVyIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIHRoaXMgYXJjIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZSBUaGUgc3RhcnQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlIFRoZSBlbmQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtib29sZWFufSBkcmF3V2VkZ2UgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBkcmF3IGEgd2VkZ2Ugb3IgY2FwcGVkIGNpcmNsZSAoZGVmYXVsdD1jaXJjbGUpCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwb2ludCBUaGUgY2lyY3VsYXIgY2VudGVyIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIHRoaXMgYXJjIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZSBUaGUgc3RhcnQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlIFRoZSBlbmQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtib29sZWFufSBkcmF3V2VkZ2UgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBkcmF3IGEgd2VkZ2Ugb3IgY2FwcGVkIGNpcmNsZSAoZGVmYXVsdD1jaXJjbGUpCiAqCiAqIEBzZWUge0BsaW5rIGNpcmNsZX0KICovCmZ1bmN0aW9uIGFyYyh4LCB5LCByLCBzID0gMCwgZSA9IFRBVSwgd2VkZ2UgPSBmYWxzZSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgd2VkZ2UgPSBlOwogICAgZSA9IHM7CiAgICBzID0gcjsKICAgIHIgPSB5OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGNvbnN0IHN0ZXAgPSAwLjE7CiAgc3RhcnQoKTsKICBpZiAod2VkZ2UpIHZlcnRleCh4LCB5KTsKICBsZXQgYSA9IHM7CiAgdmVydGV4KHggKyByICogY29zKHMpLCB5ICsgciAqIHNpbihzKSk7CiAgZm9yIChhID0gcyArIHN0ZXA7IGEgPCBlOyBhICs9IHN0ZXApIHsKICAgIHZlcnRleCh4ICsgciAqIGNvcyhhKSwgeSArIHIgKiBzaW4oYSkpOwogIH0KICB2ZXJ0ZXgoeCArIHIgKiBjb3MoZSksIHkgKyByICogc2luKGUpKTsKICBpZiAod2VkZ2UpIHZlcnRleCh4LCB5KTsKICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBwYWlyIG9mIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGF4ZXMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEJvcmRlcigxLCBgYmxhY2tgKTsKICogICAgICAgc2V0R3JpZCg1MCwgYGxpZ2h0Z3JleWApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgc2V0Q3Vyc29yKGBub25lYCk7CiAqICAgICAgIGNsZWFyKGAjZmZmZWY3YCk7CiAqICAgICAgIHNldENvbG9yKGAjMzMzYCk7CiAqICAgICAgIHRyYW5zbGF0ZSgyNSwyNSk7CiAqICAgICAgIGF4ZXMoCiAqICAgICAgICAgYHRpbWUgKHMpYCwgMCwgd2lkdGgtNTAsCiAqICAgICAgICAgYGRpc3RhbmNlIChrbSlgLCAwLCBoZWlnaHQtNTAsCiAqICAgICAgICAgIjAiLCAiNjAiLAogKiAgICAgICAgICIwIiwgIjUwMCIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBoTGFiZWwgdGhlIGhvcml6b250YWwgYXhpcyBsYWJlbAogKiBAcGFyYW0ge251bWJlcn0gaHMgdGhlIHN0YXJ0IChsZWZ0KSBwaXhlbCB2YWx1ZSBmb3IgdGhlIGhvcml6b250YWwgYXhpcwogKiBAcGFyYW0ge251bWJlcn0gaGUgdGhlIGVuZCAocmlnaHQpIHBpeGVsIHZhbHVlIGZvciB0aGUgaG9yaXpvbnRhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSB2TGFiZWwgdGhlIHZlcnRpY2FsIGF4aXMgbGFiZWwKICogQHBhcmFtIHtudW1iZXJ9IHZzIHRoZSBzdGFydCAodG9wKSBwaXhlbCB2YWx1ZSBmb3IgdGhlIHZlcnRpY2FsIGF4aXMKICogQHBhcmFtIHtudW1iZXJ9IHZlIHRoZSBlbmQgKGJvdHRvbSkgcGl4ZWwgdmFsdWUgZm9yIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSBoc0xhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIHN0YXJ0IChsZWZ0KSBvZiB0aGUgaG9yaXpvbnRhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSBoZUxhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIGVuZCAocmlnaHQpIG9mIHRoZSBob3Jpem9udGFsIGF4aXMKICogQHBhcmFtIHtzdHJpbmd9IHZzTGFiZWw/IGFuIG9wdGlvbmFsIGxhYmVsIGZvciB0aGUgc3RhcnQgKHRvcCkgb2YgdGhlIHZlcnRpY2FsIGF4aXMKICogQHBhcmFtIHtzdHJpbmd9IHZlTGFiZWw/IGFuIG9wdGlvbmFsIGxhYmVsIGZvciB0aGUgZW5kIChib3R0b20pIG9mIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gYXhlcygKICBoTGFiZWwsCiAgaHMsCiAgaGUsCiAgdkxhYmVsLAogIHZzLAogIHZlLAogIGhzTGFiZWwgPSBmYWxzZSwKICBoZUxhYmVsID0gZmFsc2UsCiAgdnNMYWJlbCA9IGZhbHNlLAogIHZlTGFiZWwgPSBmYWxzZQopIHsKICBsaW5lKGhzLCAwLCBoZSwgMCk7CiAgbGluZSgwLCB2cywgMCwgdmUpOwoKICBjb25zdCBocG9zID0gMCAtIDU7CiAgdGV4dChgJHtoTGFiZWx9IOKGkmAsIHdpZHRoIC8gMiArIDUsIGhwb3MsIFJJR0hUKTsKICB0ZXh0KGhzTGFiZWwgPyBoc0xhYmVsIDogaHMsIGhzLCBocG9zLCBSSUdIVCk7CiAgdGV4dChoZUxhYmVsID8gaGVMYWJlbCA6IGhlLCBoZSwgaHBvcywgUklHSFQpOwoKICBjb25zdCB2cG9zID0gLTU7CiAgc2F2ZSgpOwogIHRyYW5zbGF0ZSh2cG9zLCBoZWlnaHQgLyAyKTsKICByb3RhdGUoLVBJIC8gMik7CiAgdGV4dChgJHt2TGFiZWx9YCwgMCwgMCwgTEVGVCk7CiAgcmVzdG9yZSgpOwogIHRleHQoYOKGk2AsIHZwb3MsIGhlaWdodCAvIDIgKyAxNiwgUklHSFQpOwogIHRleHQodnNMYWJlbCA/IHZzTGFiZWwgOiB2cywgdnBvcywgdnMgKyA1LCBSSUdIVCk7CiAgdGV4dCh2ZUxhYmVsID8gdmVMYWJlbCA6IHZlLCB2cG9zLCB2ZSwgUklHSFQpOwp9CgovKioKICogRHJhdyBvbmUgb3IgbW9yZSBCZXppZXIgY3VydmVzIGZyb20gYW4gYXJyYXkKICogb2YgUG9pbnQgb3IgUG9pbnQtbGlrZXMgdGhhdCBpbXBsZW1lbnQ6CiAqCiAqIGBgYAogKiB7CiAqICAgeDogbnVtYmVyCiAqICAgeTogbnVtYmVyCiAqIH0KICogYGBgCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBiZXppZXIoCiAqICAgICAgICAgbmV3IFBvaW50KDIwLCBoZWlnaHQgLSA1NSksCiAqICAgICAgICAgbmV3IFBvaW50KDIwLCAyNSksCiAqICAgICAgICAgeyB4OiB3aWR0aCAtIDIwLCB5OiAyNX0sCiAqICAgICAgICAgeyB4OiB3aWR0aCAtIDIwLCB5OiBoZWlnaHQgLSA1NX0KICogICAgICAgKTsKICogICAgICAgbm9GaWxsKCkKICogICAgICAgYmV6aWVyKAogKiAgICAgICAgIG5ldyBQb2ludCgwLCBoZWlnaHQgLSAyMCksCiAqICAgICAgICAgbmV3IFBvaW50KHdpZHRoIC0gMjAsIGhlaWdodCAtIDIwKSwKICogICAgICAgICB7IHg6IDIwLCB5OiAyMH0sCiAqICAgICAgICAgeyB4OiB3aWR0aCwgeTogMjB9CiAqICAgICAgICk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJbOF19IC4uLmNvb3JkaW5hdGVzIEVpZ2h0IHgsIHkgdmFsdWVzLgogKiBAcGFyYW0ge251bWJlcls2bl19IC4uLmFkZGl0aW9uYWxDb29yZGluYXRlcz8gTXVsdGlwbGVzIG9mIHNpeCB4LCB5IHZhbHVlcy4KICoKICogQHBhcmFtIHtQb2ludExpa2VbNF19IC4uLmNvb3JkaW5hdGVzIEZvdXIge3gseX0gY29vcmRpbmF0ZXMuCiAqIEBwYXJhbSB7UG9pbnRMaWtlWzNuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBNdWx0aXBsZXMgb2YgdGhyZWUge3gseX0gY29vcmRpbmF0ZXMuCiAqCiAqIEBzZWUge0BsaW5rIGJzcGxpbmV9CiAqIEBzZWUge0BsaW5rIHNwbGluZX0KICovCmZ1bmN0aW9uIGJlemllciguLi5hcmdzKSB7CiAgbGV0IHBvaW50cyA9IGFyZ3M7CgogIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gYG51bWJlcmApIHsKICAgIHBvaW50cyA9IFtdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIHBvaW50cy5wdXNoKHsgeDogYXJnc1tpXSwgeTogYXJnc1tpICsgMV0gfSk7CiAgICB9CiAgfQoKICBjb25zdCBiID0gKHQsIGEsIGIsIGMsIGQpID0+IHsKICAgIGNvbnN0IG10ID0gMSAtIHQ7CiAgICByZXR1cm4gYSAqIG10ICoqIDMgKyAzICogYiAqIG10ICoqIDIgKiB0ICsgMyAqIGMgKiBtdCAqIHQgKiogMiArIGQgKiB0ICoqIDM7CiAgfTsKCiAgbGV0IFtwMCwgLi4ucmVzdF0gPSBwb2ludHM7CiAgc3RhcnQoKTsKICBmb3IgKGxldCBpID0gMCwgZSA9IHJlc3QubGVuZ3RoOyBpIDwgZTsgaSArPSAzKSB7CiAgICBsZXQgW3AxLCBwMiwgcDNdID0gcmVzdC5zbGljZShpLCBpICsgMyk7CiAgICBpZiAocDEgJiYgcDIgJiYgcDMpIHsKICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCAxOyB0ICs9IDAuMDEpIHsKICAgICAgICB2ZXJ0ZXgoYih0LCBwMC54LCBwMS54LCBwMi54LCBwMy54KSwgYih0LCBwMC55LCBwMS55LCBwMi55LCBwMy55KSk7CiAgICAgIH0KICAgICAgdmVydGV4KHAzLngsIHAzLnkpOwogICAgICBwMCA9IHAzOwogICAgfQogIH0KICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBCLXNwbGluZSB1c2luZyBmb3VyIG9yIG1vcmUgUG9pbnQgb3IKICogUG9pbnQtbGlrZXMgdGhhdCBpbXBsZW1lbnQ6CiAqCiAqIGBgYAogKiB7CiAqICAgeDogbnVtYmVyCiAqICAgeTogbnVtYmVyCiAqIH0KICogYGBgCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgcmFuZ2UoMCwgVEFVLCBQSSAvIDUsIChhKSA9PiBwb2ludHMucHVzaCgKICogICAgICAgICBuZXcgUG9pbnQoCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBjb3MoYSksCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBzaW4oYSkKICogICAgICAgICApCiAqICAgICAgICkpOwogKiAgICAgICBzZXRNb3ZhYmxlKC4uLnBvaW50cyk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7CiAqICAgICAgIG5vU3Ryb2tlKCk7CiAqICAgICAgIHNldEZpbGwoYCMwMDAyYCk7CiAqICAgICAgIGJzcGxpbmUoLi4ucG9pbnRzKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBwb2ludHMuZm9yRWFjaChwID0+IHBvaW50KHApKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcls4XX0gLi4uY29vcmRpbmF0ZXMgRWlnaHQgeCwgeSB2YWx1ZXMuCiAqIEBwYXJhbSB7bnVtYmVyWzJuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBNdWx0aXBsZXMgb2YgeCwgeSB2YWx1ZXMuCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlWzRdfSAuLi5jb29yZGluYXRlcyBGb3VyIHt4LHl9IGNvb3JkaW5hdGVzLgogKiBAcGFyYW0ge1BvaW50TGlrZVtuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBaZXJvIG9yIG1vcmUge3gseX0gY29vcmRpbmF0ZXMuCiAqCiAqIEBzZWUge0BsaW5rIGJlemllcn0KICogQHNlZSB7QGxpbmsgc3BsaW5lfQogKi8KCmZ1bmN0aW9uIGJzcGxpbmUoLi4uYXJncykgewogIGxldCBvcGVuID0gdHJ1ZTsKICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gYGJvb2xlYW5gKSB7CiAgICBvcGVuID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKVswXTsKICB9CgogIGxldCBwb2ludHMgPSBhcmdzOwoKICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IGBudW1iZXJgKSB7CiAgICBwb2ludHMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikgewogICAgICBwb2ludHMucHVzaCh7IHg6IGFyZ3NbaV0sIHk6IGFyZ3NbaSArIDFdIH0pOwogICAgfQogIH0KCiAgc3RhcnQoKTsKICBuZXcgQlNwbGluZShwb2ludHMsIG9wZW4pLmdldExVVCgpLmZvckVhY2goKHApID0+IHZlcnRleChwLngsIHAueSkpOwogIGVuZCgpOwp9CgovKioKICogRHJhdyBhIGNpcmNsZSB3aXRoIHJhZGl1cyBgcmAgYXQgYHgseWAuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBjaXJjbGUod2lkdGgvMiwgaGVpZ2h0LzIsIDgwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgY2lyY2xlJ3MgY2VudGVyIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGNpcmNsZSdzIGNlbnRlciB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSByIFRoZSBjaXJjbGUncyByYWRpdXMgaW4gcGl4ZWxzCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSBjaXJjbGUncyBjZW50ZXIge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0gciBUaGUgY2lyY2xlJ3MgcmFkaXVzIGluIHBpeGVscwogKgogKiBAc2VlIHtAbGluayBhcmN9CiAqLwpmdW5jdGlvbiBjaXJjbGUoeCwgeSwgcikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgciA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgYXJjKHgsIHksIHIsIDAsIFRBVSwgZmFsc2UpOwp9CgovKioKICogQ2xlYXIgdGhlIGNhbnZhcywgYW5kIHNldCBpdCB0byBhIHNwZWNpZmljIChDU1MpIGNvbG91ci4KICogSWYgbm8gYG5vR3JpZCgpYCBjYWxsIHdhcyBtYWRlLCB0aGlzIHdpbGwgdGhlbiBhbHNvIGRyYXcKICogdGhlIGJhY2tncm91bmQgZ3JpZC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBwaW5rYCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtjb2xvcn0gY29sb3I/IFRoZSAoQ1NTKSBiYWNrZ3JvdW5kIGNvbG9yIHRvIHVzZSAoZGVmYXVsdCA9IGB3aGl0ZWApCiAqLwpmdW5jdGlvbiBjbGVhcihjb2xvciA9IGB3aGl0ZWApIHsKICBzYXZlKCk7CiAgX19jYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yOwogIF9fY2FudmFzLndpZHRoID0gd2lkdGg7CiAgX19jdHggPSBfX2NhbnZhcy5nZXRDb250ZXh0KGAyZGApOwogIGlmIChfX2RyYXdfZ3JpZCkgZ3JpZCgpOwogIHJlc3RvcmUoKTsKfQoKLyoqCiAqIENvdW50ZXJwYXJ0IHRvIHN0YXJ0KCksIGZpbmFsaXplcyB0aGUgY3VycmVudCBzaGFwZSBhbmQKICogY29sb3VycyBpdC4gSWYgYGNsb3NlYCBpcyB0cnVlLCBpdCB3aWxsIGNsb3NlIHRoZSBwYXRoCiAqIGJlZm9yZSBjb2xvdXJpbmcuCiAqCiAqIElmIGBub0ZpbGwoKWAgaXMgaW4gZWZmZWN0LCB0aGUgc2hhcGUgd2lsbCBub3QgYmUgZmlsbGVkLgogKiBpZiBgbm9TdHJva2UoKWAgaXMgaW4gZWZmZWN0LCB0aGUgc2hhcGUgb3V0bGluZSB3aWxsIG5vdCBiZSBjb2xvdXJlZC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYGdvbGRgKTsKICogICAgICAgc3RhcnQoKTsKICogICAgICAgdmVydGV4KDAsaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgMCk7CiAqICAgICAgIHZlcnRleCh3aWR0aCwgaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgZW5kKHRydWUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2U/IEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBjbG9zZSB0aGUgcGF0aCAoZGVmYXVsdCA9IGZhbHNlKQogKgogKiBAc2VlIHtAbGluayBzdGFydH0KICogQHNlZSB7QGxpbmsgdmVydGV4fQogKiBAc2VlIHtAbGluayBlbmRTaGFwZX0KICovCmZ1bmN0aW9uIGVuZChjbG9zZSA9IGZhbHNlKSB7CiAgaWYgKGNsb3NlKSBfX2N0eC5jbG9zZVBhdGgoKTsKICBfX2N0eC5maWxsKCk7CiAgX19jdHguc3Ryb2tlKCk7CiAgaWYgKF9fY3R4LmxpbmVXaWR0aCAlIDIgPT09IDEpIHsKICAgIF9fY3R4LnRyYW5zbGF0ZSgtMC41LCAtMC41KTsKICB9Cn0KCi8qKgogKiBDbGVhciB0aGUgY3VycmVudCBzaGFwZSwgb3B0aW9uYWxseSBjbG9zaW5nIGl0LgogKgogKiBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlPyBXaGVuIHVzZWQsIGNsb3NlcyB0aGUgc2hhcGUncyBjdXJyZW50IHN1YnBhdGguCiAqIEByZXR1cm5zIHtTaGFwZX0gVGhlIHNoYXBlIHRoYXQgZ290IGNsb3NlZAogKgogKiBAc2VlIHtAbGluayBlbmR9CiAqLwpmdW5jdGlvbiBlbmRTaGFwZShjbG9zZSA9IGZhbHNlKSB7CiAgaWYgKF9fc2hhcGUgJiYgY2xvc2UpIF9fc2hhcGUuY2xvc2UoKTsKICByZXR1cm4gX19zaGFwZTsKICBfX3NoYXBlID0gZmFsc2U7Cn0KCi8qKgogKiBEcmF3IGFuIGltYWdlIGluIGEgZ2l2ZW4gbG9jYXRpb24gd2l0aCBhbiBvcHRpb25hbAogKiB3aWR0aCBhbmQgaGVpZ2h0LiBJZiBvbWl0dGVkLCB0aGUgd2lkdGggYW5kIGhlaWdodAogKiB3aWxsIGJlIHRoZSBpbWFnZSdzIG93biBkaW1lbnNpb25zLiBOb3RlIHRoYXQgdGhlCiAqIGltYWdlIG1heSBiZSBlaXRoZXIgYSBVUkwsIG9yIGFuIDxpbWc+IGVsZW1lbnQuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGFzeW5jIGZ1bmN0aW9uOiBpZiBpdCBpcyBpbXBvcnRhbnQKICogdGhhdCBub3RoaW5nIGdldHMgZHJhd24gdW50aWwgdGhlIGltYWdlIGhhcyBiZWVuIGRyYXduLAogKiByZW1lbWJlciB0byBgYXdhaXRgIGl0cyBjYWxsLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgYXN5bmMgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIGF3YWl0IGltYWdlKGBodHRwczovL2R1bW15aW1hZ2UuY29tLzEwMHgxMDBgLCA1MCwgNTAsIDEwMCwgMTAwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge0ltYWdlfHN0cmluZ30gaW1nT3JVUkwgVGhlIGltYWdlIHRvIGRyYXcgZWl0aGVyIGFzIEltYWdlIG9iamVjdCwgb3IgaW1hZ2UgVVJMLgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgZHJhdyBwb3NpdGlvbidzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGRyYXcgcG9zaXRpb24ncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcmV0dXJucyB7SW1hZ2V9IFRoZSBkcmF3biBpbWFnZQogKgogKiBAcGFyYW0ge0ltYWdlfHN0cmluZ30gaW1nT3JVUkwgVGhlIGltYWdlIHRvIGRyYXcgZWl0aGVyIGFzIEltYWdlIG9iamVjdCwgb3IgaW1hZ2UgVVJMLgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgZHJhdyBwb3NpdGlvbiBhcyB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcmV0dXJucyB7SW1hZ2V9IFRoZSBkcmF3biBpbWFnZQogKi8KYXN5bmMgZnVuY3Rpb24gaW1hZ2UoaW1nLCB4ID0gMCwgeSA9IDAsIHcsIGgpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIGggPSB3OwogICAgdyA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIGlmICh0eXBlb2YgaW1nID09PSBgc3RyaW5nYCkgewogICAgaW1nID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBpbWdgKTsKICAgICAgdGFnLm9ubG9hZCA9ICgpID0+IHJlc29sdmUodGFnKTsKICAgICAgdGFnLm9uZXJyb3IgPSAoKSA9PiByZWplY3QoKTsKICAgICAgdGFnLnNyYyA9IGltZzsKICAgIH0pOwogIH0KICBfX2N0eC5kcmF3SW1hZ2UoaW1nLCB4LCB5LCB3IHx8IGltZy53aWR0aCwgaCB8fCBpbWcuaGVpZ2h0KTsKICByZXR1cm4gaW1nOwp9CgovKioKICogRHJhdyBhIGxpbmUgZnJvbSBvbmUgY29vcmRpbmF0ZSB0byBhbm90aGVyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgcmFuZ2UoMCxoZWlnaHQsMjAsIChpKSA9PiBsaW5lKDAsIDAsIHdpZHRoLCBpKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHgxIFRoZSBmaXJzdCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHgyIFRoZSBzZWNvbmQgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MiBUaGUgc2Vjb25kIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDEgVGhlIGZpcnN0IHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDIgVGhlIHNlY29uZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICovCmZ1bmN0aW9uIGxpbmUoeDEsIHkxLCB4MiwgeTIpIHsKICBpZiAoeDEueCAhPT0gdW5kZWZpbmVkICYmIHgxLnkgIT09IHVuZGVmaW5lZCkgewogICAgeTIgPSB5MS55OwogICAgeDIgPSB5MS54OwogICAgeTEgPSB4MS55OwogICAgeDEgPSB4MS54OwogIH0KCiAgc3RhcnQoKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICB2ZXJ0ZXgoeDIsIHkyKTsKICBlbmQoKTsKfQoKLyoqCiAqIFN0YXJ0IGEgbmV3IHN1YiBwYXRoIGluIGEgc2hhcGUuCiAqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2U/IENsb3NlcyB0aGUgY3VycmVudCBzdWJwYXRoIGJlZm9yZSBvcGVuaW5nIGEgbmV3IG9uZSAoZGVmYXVsdCA9IHRydWUpCiAqCiAqIEBzZWUge0BsaW5rIHN0YXJ0U2hhcGV9CiAqIEBzZWUge0BsaW5rIGVuZFNoYXBlfQogKi8KZnVuY3Rpb24gbmV3UGF0aChjbG9zZSA9IHRydWUpIHsKICBfX3NoYXBlLm5ld1BhdGgoY2xvc2UpOwp9CgovKioKICogUGxvdCBhIHk9Zih4KSBmdW5jdGlvbi4gVGhlIGlucHV0IHRvIHRoZSBmdW5jdGlvbgogKiB3aWxsIHNwYW4gdGhlIGludGVydmFsIFthLGJdIHVzaW5nIHRoZSBpbmRpY2F0ZWQKICogbnVtYmVyIG9mIHN0ZXBzLCBhbmQgdGhlIHJlIHN1bHQgbWF5IGJlIHNjYWxlZCBib3RoCiAqIGluIHRoZSB4IGFuZCB5IGRpcmVjdGlvbiBpbiBvcmRlciB0byBkcmF3IHNvbWV0aGluZwogKiB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgc2VlIChlLmcuIGlmIHlvdSdyZSBwbG90dGluZwogKiB0byB0aGUgZG9tYWluIFswLDFdIHlvdSB3b3VsZG4ndCBiZSBhYmxlIHRvIHNlZSB0aGUKICogcmVzdWx0IHdpdGhvdXQgc2NhbGluZykuCiAqCiAqIFRoaXMgZnVuY3Rpb24gaXMgYXdhcmUgb2YsIGFuZCB3aWxsIHBsb3QsIGRpc2NvbnRpbnVpdGllcwogKiB1c2luZyB0aGUgc3RhbmRhcmQgb3BlbiBjaXJjbGUgbm90YXRpb24sIHVubGVzcyBpbnN0cnVjdGVkCiAqIG5vdCB0byBkbyBzbyB1c2luZyB0aGUgYGlnbm9yZURpc2NvbnRpbnVpdHlgIGJvb2xlYW4gZmxhZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0IC8gMik7CiAqICAgICAgIGNvbnN0IGZuID0gKHgpID0+IGNvcyh4KSAqKiA2IC8gc2luKHgpIC0gc2luKHgpLzI7CiAqICAgICAgIHBsb3QoZm4sIDAsIDIqVEFVLCAxMjAsIHdpZHRoIC8gVEFVLCBoZWlnaHQgLyAyKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIHRoZSBgeSA9IGYoeClgIGZ1bmN0aW9uIHRvIHBsb3QKICogQHBhcmFtIHtudW1iZXJ9IGE/IFRoZSBsb3dlciBib3VuZCBmb3IgdGhlIGlucHV0IHZhbHVlIChkZWZhdWx0ID0gMCkKICogQHBhcmFtIHtudW1iZXJ9IGI/IFRoZSB1cHBlciBib3VuZCBmb3IgdGhlIGlucHV0IHZhbHVlIChkZWZhdWx0ID0gMSkKICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBzPyBUaGUgbnVtYmVyIG9mIHBsb3QgcG9pbnRzIHRvIHBsb3Qgb3ZlciB0aGUgaW50ZXJ2YWwgW2EsYl0gKGRlZmF1bHQgPSAxMDApCiAqIEBwYXJhbSB7bnVtYmVyfSB4c2NhbGU/IEFuIG9wdGlvbmFsIHNjYWxpbmcgZmFjdG9yIHRvIGFwcGx5IHRvIGVhY2ggcGxvdCBwb2ludCdzIHggdmFsdWUgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0ge251bWJlcn0geXNjYWxlPyBBbiBvcHRpb25hbCBzY2FsaW5nIGZhY3RvciB0byBhcHBseSB0byBlYWNoIHBsb3QgcG9pbnQncyB5IHZhbHVlIChkZWZhdWx0ID0gMSkKICogQHBhcmFtIHtib29sZWFufSBpZ25vcmVEaXNjb250aW51aXR5PyBEbyBub3QgZHJhdyBzcGVjaWFsIGVsZW1lbnRzIGZvciBkaXNjb250aW51aXRpZXMgKGRlZmF1bHQgPSBmYWxzZSkKICoKICogQHNlZSB7QGxpbmsgcGxvdERhdGF9CiAqLwpmdW5jdGlvbiBwbG90KAogIGYsCiAgYSA9IDAsCiAgYiA9IDEsCiAgc3RlcHMgPSAxMDAsCiAgeHNjYWxlID0gMSwKICB5c2NhbGUgPSAxLAogIGlnbm9yZURpc2NvbnRpbnVpdHkgPSBmYWxzZQopIHsKICBjb25zdCBpbnRlcnZhbCA9IGIgLSBhOwogIHN0YXJ0KCk7CiAgbGV0IFtweSwgZHksIHBkeV0gPSBbMCwgMCwgMF07CiAgY29uc3Qgc3RlcCA9IGludGVydmFsIC8gKHN0ZXBzIC0gMSk7CiAgY29uc3QgZGlzY29udGludWl0eSA9IChpLCB4LCB5KSA9PiB7CiAgICBlbmQoKTsKICAgIHNhdmUoKTsKICAgIG5vRmlsbCgpOwogICAgcG9pbnQoeCAqIHhzY2FsZSwgcHkgKiB5c2NhbGUpOwogICAgcG9pbnQoeCAqIHhzY2FsZSwgeSAqIHlzY2FsZSk7CiAgICByZXN0b3JlKCk7CiAgICBzdGFydCgpOwogIH07CiAgZm9yIChsZXQgaSA9IDAsIHgsIHk7IGkgPCBzdGVwczsgaSsrKSB7CiAgICB4ID0gYSArIGkgKiBzdGVwOwogICAgeSA9IGYoeCk7CiAgICAvLyBJZiBmKHgpIGNoYW5nZXMgaW4gdmlvbGF0aW9uIG9mIHdoYXQgaXRzIGYnKHgpIHN1Z2dlc3RlZCwKICAgIC8vIHRoYXQncyBhIGRpc2NvbnRpbnVpdHkgYW5kIHdlIGRyYXcgYW4gYXN5bXB0b3RlLgogICAgZHkgPSAoeSAtIHB5KSAqIHN0ZXA7CiAgICBpZiAoIWlnbm9yZURpc2NvbnRpbnVpdHkpIHsKICAgICAgaWYgKHBkeSAhPT0gbnVsbCAmJiBzaWduKHkgLSBweSkgIT09IHNpZ24ocGR5KSAmJiBhYnMocGR5KSA+IDAuMDEpIHsKICAgICAgICBkaXNjb250aW51aXR5KGksIHgsIHkpOwogICAgICAgIHBkeSA9IG51bGw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGR5ID0gZHk7CiAgICAgIH0KICAgIH0KICAgIHZlcnRleCh4ICogeHNjYWxlLCB5ICogeXNjYWxlKTsKICAgIHB5ID0geTsKICB9CiAgZW5kKCk7Cn0KCi8qKgogKiBQbG90IGEgMkQgZ3JhcGggdXNpbmcgYSBjb2xsZWN0aW9uIG9mIGFueS1kaW1lbnNpb25hbCBkYXRhLAogKiBieSBpbmRpY2F0aW5nIHdoaWNoIGRpbWVuc2lvbiBzaG91bGQgYmUgdHJlYXRlZCBhcyB0aGUgYHhgCiAqIGFuZCB3aGljaCBkaW1lbnNpb24gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdGhlIGB5YC4gSWYgbm8gYHhgCiAqIGFuZCBgeWAgYXJlIHByb3ZpZGVkLCBgZGF0YWAgd2lsbCBiZSB0cmVhdGVkIGEgMUQgYXJyYXkgYW5kCiAqIHdpbGwgcGxvdCB3aXRoIHRoZSBhcnJheSBpbmRleCBhcyBgeGAgYW5kIGVsZW1lbnQgYXQgdGhhdAogKiBpbmRleCBhcyBgeWAuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHRyYW5zbGF0ZSgwLCBoZWlnaHQvMik7CiAqCiAqICAgICAgIHNldFN0cm9rZShgZGFya2dyZWVuYCk7CiAqICAgICAgIGxldCBkYXRhID0gYXJyYXkod2lkdGgsIChpKSA9PiBbaSwgaGVpZ2h0LzIgKiBzaW4oaS8yNSldKTsKICogICAgICAgcGxvdERhdGEoZGF0YSwgMCwgMSk7CiAqCiAqICAgICAgIHNldFN0cm9rZShgcHVycGxlYCk7CiAqICAgICAgIGRhdGEgPSBhcnJheSh3aWR0aCwgKGkpID0+ICh7CiAqICAgICAgICAgbWVlcDogaSwKICogICAgICAgICBtb29wOiBoZWlnaHQvMiAqIGNvcyhpLzI1KQogKiAgICAgICB9KSk7CiAqICAgICAgIHBsb3REYXRhKGRhdGEsIGBtZWVwYCwgYG1vb3BgKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge29iamVjdFtdfSBkYXRhIFRoZSBhbnktZGltZW5zaW9uYWwgZGF0YSBmcm9tIHdoaWNoIHRvIHBsb3Qgb25lIGRpbWVuc2lvbiBhZ2FpbiBhbm90aGVyCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geD8gVGhlIHByb3BlcnR5IG5hbWUgb3IgaW5kaXZpZHVhbCBlbGVtZW50IGFycmF5IGluZGV4IHRvIHVzZSBhcyB4IGRpbWVuc2lvbgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHk/IFRoZSBwcm9wZXJ0eSBuYW1lIG9yIGluZGl2aWR1YWwgZWxlbWVudCBhcnJheSBpbmRleCB0byB1c2UgYXMgeSBkaW1lbnNpb24KICoKICogQHNlZSB7QGxpbmsgcGxvdH0KICovCmZ1bmN0aW9uIHBsb3REYXRhKGRhdGEsIHgsIHkpIHsKICBzdGFydCgpOwogIGlmICh4ICE9PSB1bmRlZmluZWQgJiYgeSAhPT0gdW5kZWZpbmVkKSB7CiAgICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgICAgeSA9IHgueTsKICAgICAgeCA9IHgueDsKICAgIH0KICAgIGRhdGEuZm9yRWFjaCgocCkgPT4gdmVydGV4KHBbeF0sIHBbeV0pKTsKICB9IGVsc2UgewogICAgZGF0YS5mb3JFYWNoKCh5LCB4KSA9PiB2ZXJ0ZXgoeCwgeSkpOwogIH0KICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBwb2ludCAoZWl0aGVyIGZyb20geC95IG9yIHBvaW50LWxpa2UpLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHJhbmdlKDAsIFRBVSwgKGEpID0+IHsKICogICAgICAgICBwb2ludCg0MCAqIGNvcyhhKSwgNDAgKiBzaW4oYSkpOwogKiAgICAgICB9KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgcG9pbnQncyBjZW50ZXIgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgcG9pbnQncyBjZW50ZXIgeSBwaXhlbCB2YWx1ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgcG9pbnQncyBjZW50ZXIge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBjaXJjbGV9CiAqLwpmdW5jdGlvbiBwb2ludCh4LCB5KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgY2lyY2xlKHgsIHksIDMpOwp9CgovKioKICogRHJhdyBhIHJlY3RhbmdsZSBhdCB0aGUgc3BlY2lmaWVkIGNvb3JkaW5hdGUsIHdpdGgKICogdGhlIHNwZWNpZmljIHdpZHRoIGFuZCBoZWlnaHQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGByZWRgKTsKICogICAgICAgcmVjdCg0MCwgNDAsIHdpZHRoIC0gODAsIGhlaWdodCAtIDgwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgcmVjdCdzIGNvcm5lciAgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgcmVjdCdzIGNvcm5lciAgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0gdyBUaGUgd2lkdGggb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcGFyYW0ge251bWJlcn0gaCBUaGUgaGVpZ2h0IG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHJlY3Q7cyBjb3JkZXIge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0gdyBUaGUgd2lkdGggb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcGFyYW0ge251bWJlcn0gaCBUaGUgaGVpZ2h0IG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICovCmZ1bmN0aW9uIHJlY3QoeCwgeSwgdywgaCkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgaCA9IHc7CiAgICB3ID0geTsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KCiAgc3RhcnQoKTsKICB2ZXJ0ZXgoeCwgeSk7CiAgdmVydGV4KHggKyB3LCB5KTsKICB2ZXJ0ZXgoeCArIHcsIHkgKyBoKTsKICB2ZXJ0ZXgoeCwgeSArIGgpOwogIHZlcnRleCh4LCB5KTsKICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBjYXJkaW5hbCAoaGVybWl0ZSkgc3BsaW5lIHRoYXQgcGFzc2VzIHRocm91Z2ggZWFjaAogKiBwb2ludCBwcm92aWRlZCwgdXNpbmcgYSBtYXRoZW1hdGljYWxseSB2aXJ0dWFsIHN0YXJ0IGFuZAogKiBlbmQgdG8gZW5zdXJlIHRoZSBjdXJ2ZSBzdGFydHMgYW5kIGVuZHMgYXQgdGhlIHByb3ZpZGVkCiAqIHN0YXJ0IGFuZCBlbmQgcG9pbnQuIFRoaXMgY2FuIGJlIGJ5cGFzc2VkIGJ5IHNldHRpbmcKICogdGhlIGB2aXJ0dWFsYCBhcmd1bWVudCB0byBgZmFsc2VgLgogKgogKiBBZGRpdGlvbmFsbHksIHRoZSBzcGxpbmUncyB0aWdodG5lc3MsIHdoaWNoIGNvbnRyb2xzCiAqIGhvdyAiYmVuZHkiIHRoZSBzcGxpbmUgaXMgKHRoZSB0aWdodGVyIHRoZSBzcGxpbmUsCiAqIHRoZSBzaGFycGVyIGJlbmRzIGJlY29tZSkgY2FuIGJlIGNvbnRyb2xsZWQgYnkgc2V0dGluZwogKiB0aGUgYHRpZ2h0bmVzc2AgdmFsdWUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgcmFuZ2UoMCwgVEFVLCBQSSAvIDUsIChhKSA9PiBwb2ludHMucHVzaCgKICogICAgICAgICBuZXcgUG9pbnQoCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBjb3MoYSksCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBzaW4oYSkKICogICAgICAgICApCiAqICAgICAgICkpOwogKiAgICAgICBzZXRNb3ZhYmxlKC4uLnBvaW50cyk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7CiAqICAgICAgIHNldEZpbGwoYCMwMDAyYCk7CiAqICAgICAgIHNwbGluZSguLi5wb2ludHMpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHBvaW50cy5mb3JFYWNoKHAgPT4gcG9pbnQocCkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlW119IC4uLnBvaW50cyBUaGUgcG9pbnRzIGFjcm9zcyB3aGljaCB0byBmaXQgYSBzcGxpbmUKICogQHBhcmFtIHtib29sZWFufSB2aXJ0dWFsPyBXaGV0aGVyIG9yIG5vdCB0byBpbnZlbnQgbmV3IG1hdGhlbWF0aWNhbCBwb2ludHMgdGhhdCBlbnN1cmUgdGhlIGN1cnZlIHN0YXJ0cyBhbmQgZW5kcyBhdCB0aGUgcHJvdmlkZWQgc3RhcnQgYW5kIGVuZCBwb2ludHMuIChkZWZhdWx0ID0gdHJ1ZSkKICogQHBhcmFtIHtudW1iZXJ9IHRpZ2h0bmVzcz8gSG93IHRpZ2h0IHRoaXMgc3BsaW5lIHNob3VsZCBiZSBmaXQgdGhyb3VnaCB0aGUgcG9pbnRzIHByb3ZpZGVkLiBUaGUgaGlnaGVyIHRoZSB0aWdodG5lc3MsIHRoZSBtb3JlIHBvbHlnb25hbCB0aGUgY3VydmUgYmVjb21lcyAoZGVmYXVsdCA9IDEpCiAqCiAqIEBzZWUge0BsaW5rIGJlemllcn0KICogQHNlZSB7QGxpbmsgYnNwbGluZX0KICovCmZ1bmN0aW9uIHNwbGluZSguLi5hcmdzKSB7CiAgbGV0IHBvaW50cyA9IGFyZ3M7CiAgbGV0IHZpcnR1YWwgPSB0cnVlOwogIGxldCBUID0gMTsKCiAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IGBib29sZWFuYCkgewogICAgW3ZpcnR1YWxdID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKTsKICB9CgogIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDJdID09PSBgYm9vbGVhbmApIHsKICAgIFt2aXJ0dWFsLCBUXSA9IGFyZ3Muc3BsaWNlKGFyZ3MubGVuZ3RoIC0gMiwgMik7CiAgfQoKICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IGBudW1iZXJgKSB7CiAgICBwb2ludHMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikgewogICAgICBwb2ludHMucHVzaCh7IHg6IGFyZ3NbaV0sIHk6IGFyZ3NbaSArIDFdIH0pOwogICAgfQogIH0KCiAgbGV0IGNwb2ludHMgPSBwb2ludHM7CiAgaWYgKHZpcnR1YWwpIHsKICAgIGNvbnN0IGYwID0gcG9pbnRzWzBdLAogICAgICBmMSA9IHBvaW50c1sxXSwKICAgICAgZjIgPSBwb2ludHNbMl0sCiAgICAgIGZzbSA9IG5ldyBWZWN0b3IoZjAueCAvIDIgKyBmMi54IC8gMiwgZjAueSAvIDIgKyBmMi55IC8gMiksCiAgICAgIGYwciA9IG5ldyBWZWN0b3IoZjApLnJlZmxlY3QoZjEpLAogICAgICBmc3IgPSBmc20ucmVmbGVjdChmMSksCiAgICAgIGZuID0gbmV3IFZlY3RvcihmMHIueCAvIDIgKyBmc3IueCAvIDIsIGYwci55IC8gMiArIGZzci55IC8gMiksCiAgICAgIGwyID0gcG9pbnRzLmF0KC0zKSwKICAgICAgbDEgPSBwb2ludHMuYXQoLTIpLAogICAgICBsMCA9IHBvaW50cy5hdCgtMSksCiAgICAgIGxzbSA9IG5ldyBWZWN0b3IobDAueCAvIDIgKyBsMi54IC8gMiwgbDAueSAvIDIgKyBsMi55IC8gMiksCiAgICAgIGwwciA9IG5ldyBWZWN0b3IobDApLnJlZmxlY3QobDEpLAogICAgICBsbiA9IG5ldyBWZWN0b3IobDByLnggLyAyICsgbHNtLnggLyAyLCBsMHIueSAvIDIgKyBsc20ueSAvIDIpOwogICAgY3BvaW50cyA9IFtmbiwgLi4ucG9pbnRzLCBsbl07CiAgfQoKICAvLyBmb3VyIHBvaW50IHNsaWRpbmcgd2luZG93IG92ZXIgdGhlIHNlZ21lbnQKICBjb25zdCBiZXppZXJQb2ludHMgPSBbXTsKICBmb3IgKGxldCBpID0gMCwgZSA9IGNwb2ludHMubGVuZ3RoIC0gMzsgaSA8IGU7IGkrKykgewogICAgbGV0IFtjMSwgYzIsIGMzLCBjNF0gPSBjcG9pbnRzLnNsaWNlKGksIGkgKyA0KTsKICAgIGxldCBwMiA9IHsKICAgICAgeDogYzIueCArIChjMy54IC0gYzEueCkgLyAoNiAqIFQpLAogICAgICB5OiBjMi55ICsgKGMzLnkgLSBjMS55KSAvICg2ICogVCksCiAgICB9OwogICAgbGV0IHAzID0gewogICAgICB4OiBjMy54IC0gKGM0LnggLSBjMi54KSAvICg2ICogVCksCiAgICAgIHk6IGMzLnkgLSAoYzQueSAtIGMyLnkpIC8gKDYgKiBUKSwKICAgIH07CiAgICBpZiAoaSA9PT0gMCkgYmV6aWVyUG9pbnRzLnB1c2goYzIpOwogICAgYmV6aWVyUG9pbnRzLnB1c2gocDIsIHAzLCBjMyk7CiAgfQoKICBiZXppZXIoLi4uYmV6aWVyUG9pbnRzKTsKfQoKLyoqCiAqIFN0YXJ0cyBhIChuZXcpIHNoYXBlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgZ29sZGApOwogKiAgICAgICBzdGFydCgpOwogKiAgICAgICB2ZXJ0ZXgoMCxoZWlnaHQvMik7CiAqICAgICAgIHZlcnRleCh3aWR0aC8yLCAwKTsKICogICAgICAgdmVydGV4KHdpZHRoLCBoZWlnaHQvMik7CiAqICAgICAgIHZlcnRleCh3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgICBlbmQodHJ1ZSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgZW5kfQogKiBAc2VlIHtAbGluayB2ZXJ0ZXh9CiAqIEBzZWUge0BsaW5rIHN0YXJ0U2hhcGV9CiAqLwpmdW5jdGlvbiBzdGFydCgpIHsKICBpZiAoX19jdHgubGluZVdpZHRoICUgMiA9PT0gMSkgewogICAgX19jdHgudHJhbnNsYXRlKDAuNSwgMC41KTsKICB9CiAgX19jdHguYmVnaW5QYXRoKCk7CiAgX19maXJzdCA9IGZhbHNlOwp9CgovKioKICogU3RhcnQgYSBuZXcgc2hhcGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBsZXQgc2hhcGU7CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNoYXBlID0gc3RhcnRTaGFwZSgpOwogKiAgICAgICBzZXRNb3ZhYmxlKHNoYXBlKTsKICogICAgIH0KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYGdvbGRgKTsKICogICAgICAgc3RhcnQoKTsKICogICAgICAgdmVydGV4KDAsaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgMCk7CiAqICAgICAgIHZlcnRleCh3aWR0aCwgaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgZW5kKHRydWUpOwogKiAgICAgfQogKgogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEByZXR1cm5zIHtTaGFwZX0gdGhlIG5ld2x5IGNyZWF0ZWQgc2hhcGUgb2JqZWN0CiAqCiAqIEBzZWUge0BsaW5rIHN0YXJ0fQogKi8KZnVuY3Rpb24gc3RhcnRTaGFwZSgpIHsKICByZXR1cm4gKF9fc2hhcGUgPSBuZXcgU2hhcGUoKSk7Cn0KCi8qKgogKiBEcmF3IHNvbWUgdGV4dCB0byB0aGUgc2NyZWVuLiBJdHMgcGxhY2VtZW50IGlzCiAqIGRldGVybWluZWQgYnkgYm90aCB0aGUgY29vcmRpbmF0ZSBwcm92aWRlZCwgYW5kCiAqIHRoZSB4L3kgYWxpZ25tZW50IHByb3ZpZGVkLiBWYWxpZCBgeEFsaWduYCB2YWx1ZXMKICogYXJlOgogKgogKiAtIENFTlRFUiAtIHRoZSB0ZXh0IGFuY2hvciBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0ZXh0LiBUZXh0IGlzIHBsYWNlZCBldmVubHkgb24gZWl0aGVyIHNpZGUuCiAqIC0gRU5EIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSByaWdodCBmb3IgTFRSIHRleHQsIGFuZCBvbiB0aGUgbGVmdCBmb3IgUlRMIHRleHQuCiAqIC0gTEVGVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSB0ZXh0LiBhbGwgdGV4dCBpcyB0byB0aGUgcmlnaHQuCiAqIC0gUklHSFQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHRleHQuIEFsbCB0ZXh0IGlzIHRvIHRoZSBsZWZ0LgogKiAtIFNUQVJUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSBsZWZ0IGZvciBMVFIgdGV4dCwgYW5kIG9uIHRoZSByaWdodCBmb3IgUlRMIHRleHQuCiAqCiAqIFZhbGlkIGB5QWxpZ25gIHZhbHVlcyBhcmU6CiAqCiAqIC0gQUxQSEFCRVRJQyAtIHN0YW5kYXJkIHRleHQgYWxpZ25tZW50CiAqIC0gQk9UVE9NIC0gdGhlIHRleHQgaXMgYWxpZ25lZCB0byB0aGUgYm90dG9tIG9mIHRoZSBib3VuZGluZyBib3gKICogLSBIQU5HSU5HIC0gcmVsZXZhbnQgZm9yIFRpYmV0YW4gYW5kIG90aGVyIEluZGljIHNjcmlwdHMuCiAqIC0gSURFT0dSQVBISUMgLSByZWxldmFudCBmb3IgaWRlb2dyYXBoaWMgQ0pLViB0ZXh0LgogKiAtIE1JRERMRSAtIFRoZSB2ZXJ0aWNhbCBlcXVpdmFsZW50IG9mICJjZW50ZXIiLgogKiAtIFRPUCAtIFRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIHRvcCBvZiB0aGUgdHlwb2dyYXBoaWMgImVtIHNxdWFyZSIuCiAqCiAqIE5vdGUgdGhhdCB0aGUgcHJpbWFyeSB0ZXh0IGNvbG91ciB1c2VzIHRoZSBmaWxsIGNvbG91ci4gSWYgdGV4dAogKiBzdHJva2luZyBpcyBlbmFibGVkLCB0aGUgdGhlIHRleHQgb3V0bGluZSB3aWxsIGJlIGNvbG91cmVkIHVzaW5nCiAqIHRoZSBjdXJyZW50IHN0cm9rZSBjb2xvdXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dCgibm9ybWFsIHRleHQiLCB3aWR0aC8yLCA2MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgdGV4dCgidW5maWxsZWQgdGV4dCIsIHdpZHRoLzIsIDEwMCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgICBzZXRTdHJva2UoYHJlZGApOwogKiAgICAgICBzZXRGaWxsKGB5ZWxsb3dgKTsKICogICAgICAgdGV4dCgiZmFuY3kgdGV4dCIsIHdpZHRoLzIsIDE0MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHQgd2Ugd2FudCB0byBzaG93CiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSB0ZXh0IGxvY2F0aW9uJ3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgdGV4dCBsb2NhdGlvbidzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtzdHJpbmd9IHhBbGlnbj8gQW4gb3B0aW9uYWwgaG9yaXpvbnRhbCBhbGlnbm1lbnQgc3RyaW5nCiAqIEBwYXJhbSB7c3RyaW5nfSB5QWxpZ24/IEFuIG9wdGlvbmFsIHZlcnRpY2FsICBhbGlnbm1lbnQgc3RyaW5nCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHQgd2Ugd2FudCB0byBzaG93CiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSB0ZXh0IGxvY2F0aW9uJ3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge3N0cmluZ30geEFsaWduPyBBbiBvcHRpb25hbCBob3Jpem9udGFsIGFsaWdubWVudCBzdHJpbmcKICogQHBhcmFtIHtzdHJpbmd9IHlBbGlnbj8gQW4gb3B0aW9uYWwgdmVydGljYWwgIGFsaWdubWVudCBzdHJpbmcKICoKICogQHNlZSB7QGxpbmsgc2V0VGV4dFN0cm9rZX0KICovCmZ1bmN0aW9uIHRleHQoc3RyLCB4LCB5LCB4QWxpZ24sIHlBbGlnbikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeUFsaWduID0geEFsaWduOwogICAgeEFsaWduID0geTsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KCiAgc2F2ZSgpOwogIGlmICh4QWxpZ24pIHsKICAgIHNldFRleHRBbGlnbih4QWxpZ24sIHlBbGlnbik7CiAgfQogIF9fY3R4LmZpbGxUZXh0KHN0ciwgeCwgeSk7CiAgaWYgKF9fdGV4dFN0cm9rZSkgewogICAgc2V0U3Ryb2tlKF9fdGV4dFN0cm9rZSk7CiAgICBfX2N0eC5zdHJva2VUZXh0KHN0ciwgeCwgeSk7CiAgfQogIHJlc3RvcmUoKTsKfQoKLyoqCiAqIERyYXcgYSB0cmlhbmdsZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICB0cmlhbmdsZSh3aWR0aC8yLCAzMCwgMS80ICogd2lkdGgsIDE2MCwgMy80ICogd2lkdGgsIDExMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHgxIFRoZSBmaXJzdCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHgyIFRoZSBzZWNvbmQgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MiBUaGUgc2Vjb25kIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geDMgVGhlIHRoaXJkIHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTMgVGhlIHRoaXJkIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDEgVGhlIGZpcnN0IHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDIgVGhlIHNlY29uZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpa2V9IHAzIFRoZSB0aGlyZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICovCmZ1bmN0aW9uIHRyaWFuZ2xlKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHsKICBpZiAoeDEueCAhPT0gdW5kZWZpbmVkICYmIHgxLnkgIT09IHVuZGVmaW5lZCkgewogICAgeTMgPSB4Mi55OwogICAgeDMgPSB4Mi54OwogICAgeTIgPSB5MS55OwogICAgeDIgPSB5MS54OwogICAgeTEgPSB4MS55OwogICAgeDEgPSB4MS54OwogIH0KCiAgc3RhcnQoKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICB2ZXJ0ZXgoeDIsIHkyKTsKICB2ZXJ0ZXgoeDMsIHkzKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICBlbmQoKTsKfQoKLyoqCiAqIEFkZCBhIHZlcnRleCB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBzaGFwZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICBzdGFydCgpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgMzApOwogKiAgICAgICB2ZXJ0ZXgoMS80ICogd2lkdGgsIDE2MCk7CiAqICAgICAgIHZlcnRleCgzLzQgKiB3aWR0aCwgMTEwKTsKICogICAgICAgZW5kKCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHZlcnRleCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHZlcnRleCdzIHkgcGl4ZWwgdmFsdWUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHZlcnRleCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIGVuZH0KICogQHNlZSB7QGxpbmsgc3RhcnR9CiAqLwpmdW5jdGlvbiB2ZXJ0ZXgoeCwgeSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGlmIChfX2ZpcnN0KSB7CiAgICBfX2N0eC5saW5lVG8oeCwgeSk7CiAgfSBlbHNlIHsKICAgIF9fZmlyc3QgPSB7IHgsIHkgfTsKICAgIF9fY3R4Lm1vdmVUbyh4LCB5KTsKICB9Cn0KLyoqCiAqIENyZWF0ZSBhbiBhcnJheSBvZiBzcGVjaWZpZWQgbGVuZ3RoLCBvcHRpb25hbGx5IGZpbGxlZCB1c2luZyBhCiAqIHRoYXQgdGFrZXMgYW4gaW5kZXggYXMgc2luZ2xlIGlucHV0IGFyZ3VtZW50IGZ1bmN0aW9uLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIG5vRmlsbCgpOwogKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0LzIpOwogKiAgICAgICBsZXQgZGF0YSA9IGFycmF5KHdpZHRoLCAoaSkgPT4gW2ksIGhlaWdodC8yICogc2luKGkvMjUpXSk7CiAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDEpOwogKiAgICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBzaXplIG9mIHRoZSBhcnJheSB5b3Ugd2FudAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWxsRnVuY3Rpb24/IFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IGdldHMgdXNlZCB0byBmaWxsIHRoZSBhcnJheQogKi8KZnVuY3Rpb24gYXJyYXkobGVuLCBmaWxsRnVuY3Rpb24pIHsKICBjb25zdCBhcnIgPSBuZXcgQXJyYXkobGVuKS5maWxsKCk7CiAgaWYgKGZpbGxGdW5jdGlvbikgewogICAgcmV0dXJuIGFyci5tYXAoKF8sIGkpID0+IGZpbGxGdW5jdGlvbihpKSk7CiAgfQogIHJldHVybiBhcnI7Cn0KCi8qKgogKiBFbXB0eSB0aGUgbGlzdCBvZiBtb3ZhYmxlIHBvaW50cyBpbiB5b3VyIGdyYXBoaWMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgYWRkQnV0dG9uKGBsb2NrYCwgKCkgPT4gewogKiAgICAgICAgIGNsZWFyTW92YWJsZSgpOwogKiAgICAgICAgIHJlZHJhdygpOwogKiAgICAgICB9KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBmb3IobGV0IHAgb2YgcG9pbnRzKSB7CiAqICAgICAgICAgc2V0Q29sb3IoaXNNb3ZhYmxlKHApID8gYHJlZGAgOiBgZ3JleWApOwogKiAgICAgICAgIHBvaW50KHApOwogKiAgICAgICB9CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LHkpIHsKICogICAgICAgaWYgKGN1cnJlbnRNb3ZhYmxlKSByZXR1cm47CiAqICAgICAgIGNvbnN0IHAgPSBuZXcgUG9pbnQoeCx5KTsKICogICAgICAgcG9pbnRzLnB1c2gocCk7CiAqICAgICAgIHNldE1vdmFibGUocCk7CiAqICAgICAgIHJlZHJhdygpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIGlzTW92YWJsZX0KICogQHNlZSB7QGxpbmsgc2V0TW92YWJsZX0KICovCmZ1bmN0aW9uIGNsZWFyTW92YWJsZSgpIHsKICBfX21vdmFibGVfcG9pbnRzLnNwbGljZSgwLCBfX21vdmFibGVfcG9pbnRzLmxlbmd0aCk7Cn0KCi8qKgogKiBDcmVhdGUgYSBjb3B5IG9mIHRoZSBjdXJyZW50IGNhbnZhcyBlbGVtZW50CiAqIGZvciB1c2Ugc29tZXdoZXJlIGVsc2UgaW4geW91ciBvd24gY29kZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBwaW5rYCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LHkpIHsKICogICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCgKICogICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoYGdyYXBoaWNzOnVwZGF0ZWAsIHsKICogICAgICAgICAgIGRldGFpbDogewogKiAgICAgICAgICAgICBjYW52YXM6IGNvcHkoKQogKiAgICAgICAgICAgfQogKiAgICAgICAgIH0pCiAqICAgICAgICk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fSBBIGNvcHkgb2YgdGhlIGN1cnJlbnQgY2FudmFzCiAqLwpmdW5jdGlvbiBjb3B5KCkgewogIGNvbnN0IGNvcHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBjYW52YXNgKTsKICBjb3B5LndpZHRoID0gd2lkdGg7CiAgY29weS5oZWlnaHQgPSBoZWlnaHQ7CiAgY29uc3QgY3R4ID0gY29weS5nZXRDb250ZXh0KGAyZGApOwogIGN0eC5kcmF3SW1hZ2UoX19jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpOwogIHJldHVybiBjb3B5Owp9CgovKioKICogR2VuZXJhdGVzIGEgY29sb3IgYmFzZWQgb24gdGhlIEhTTCBjb2xvciBzcGFjZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGNvbG9yKDQ1LCA4MCwgOTApKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gaHVlIGluIHRoZSByYW5nZSBbMCwgMzYwXQogKiBAcGFyYW0ge251bWJlcn0gc2F0dXJhdGlvbiBpbiB0aGUgcmFuZ2UgWzAsIDEwMF0KICogQHBhcmFtIHtudW1iZXJ9IGxpZ2h0bmVzcyBpbiB0aGUgcmFuZ2UgWzAsIDEwMF0KICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgaW4gdGhlIHJhbmdlIFswLCAxXQogKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBoc2xhIGNvbG9yIHN0cmluZwogKgogKiBAc2VlIHtAbGluayByYW5kb21Db2xvcn0KICovCmZ1bmN0aW9uIGNvbG9yKGggPSBfX2N1cnJlbnRfaHVlLCBzID0gNTAsIGwgPSA1MCwgYSA9IDEpIHsKICByZXR1cm4gYGhzbGEoJHtofSwke3N9JSwke2x9JSwke2F9KWA7Cn0KCi8qKgogKiBGaW5kIGFuIEhUTUwgZWxlbWVudCBpbnNpZGUgeW91ciBncmFwaGljcy1lbGVtZW50CiAqIGJ5IHF1ZXJ5IHNlbGVjdG9yLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG86CiAqCiAqIGBgYAogKiB5b3VyRWxlbWVudC5xdWVyeVNlbGVjdG9yKHFzKQogKiBgYGAKICoKICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U2VsZWN0b3IgQSBxdWVyeSBzZWxlY3RvcgogKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH0gVGhlIG1hdGNoZWQgZWxlbWVudCwgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guCiAqLwpmdW5jdGlvbiBmaW5kKHFzKSB7CiAgcmV0dXJuIF9fZWxlbWVudC5xdWVyeVNlbGVjdG9yKHFzKTsKfQoKLyoqCiAqIEZpbmQgYWxsIEhUTUwgZWxlbWVudHMgaW5zaWRlIHlvdXIgZ3JhcGhpY3MtZWxlbWVudAogKiB0aGF0IG1hdGNoIGEgZ2l2ZW4gcXVlcnkgc2VsZWN0b3IuIFRoaXMgaXMgZXF1aXZhbGVudCB0bzoKICoKICogYGBgCiAqIHlvdXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXMpCiAqIGBgYAogKgogKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBkb2VzIF9ub3RfIHJldHVybiBhIE5vZGVMaXN0CiAqIGFuZCBpbnN0ZWFkIHJldHVybnMgYSBwbGFpbiBhcnJheS4KICoKICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U2VsZWN0b3IgQSBxdWVyeSBzZWxlY3RvcgogKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX0gQW4gYXJyYXkgd2l0aCBhbGwgbWF0Y2hpbmcgZWxlbWVudHMsIFtdIGlmIHRoZXJlIHdlcmUgbm8gbWF0Y2hlcy4KICovCmZ1bmN0aW9uIGZpbmRBbGwocXMpIHsKICByZXR1cm4gWy4uLl9fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHFzKV07Cn0KCi8qKgogKiBNYXJrIGEgc3BlY2lmaWMgY29sb3IgYXMgdGhlIGhpZ2hsaWdodCBjb2xvciwKICogd2hpY2ggY2F1c2VzIHRoZSBncmFwaGljIHRvIHJlZHJhdyB3aXRoIHRoYXQKICogY29sb3IgcmVwbGFjZWQgYnkgd2hpY2hldmVyIGNvbG9yIHlvdSBwaWNrZWQKICogYXMgaGlnaGxpZ2h0IGNvbG9yLgogKgogKiBOb3RlIHRoYXQgeW91IGNhbiBvbmx5IHVzZSBuYW1lZCAoQ1NTKSBjb2xvcnMKICogd2l0aCB0aGlzIGZ1bmN0aW9uLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRIaWdobGlnaHRDb2xvcihgbGltZWApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHRleHQoImxldCdzIGdvIiwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyQWN0aXZlKHN0YXRlKSB7CiAqICAgICAgIGlmIChzdGF0ZSkgaGlnaGxpZ2h0KGByZWRgKTsKICogICAgICAgZWxzZSBoaWdobGlnaHQoZmFsc2UpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7Y29sb3J8Ym9vbGVhbn0gY29sb3IgU2V0IHRoZSBjb2xvciB0aGF0IHNob3VsZCBnZXQgcmVwbGFjZWQgd2l0aCB0aGUgaGlnaGxpZ2h0IGNvbG9yLCBvciBkaXNhYmxlIGhpZ2hsaWdodCB3aGVuIGNvbG9yIGlzIGBmYWxzZWAKICoKICogQHNlZSB7QGxpbmsgc2V0SGlnaGxpZ2h0Q29sb3J9CiAqLwpmdW5jdGlvbiBoaWdobGlnaHQoY29sb3IpIHsKICBpZiAoQ1NTX0NPTE9SX01BUFtjb2xvcl0pIHsKICAgIF9faGlnaGxpZ2h0X2NvbG9yID0gQ1NTX0NPTE9SX01BUFtjb2xvcl07CiAgfSBlbHNlIHsKICAgIF9faGlnaGxpZ2h0X2NvbG9yID0gY29sb3I7CiAgfQogIHJlZHJhdygpOwp9CgovKioKICogQ2hlY2sgd2hldGhlciBhIHBvaW50IGlzIHJlZ2lzdGVyZWQgYXMgbW92YWJsZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IHBvaW50cyA9IFtdOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBhZGRCdXR0b24oYGxvY2tgLCAoKSA9PiB7CiAqICAgICAgICAgY2xlYXJNb3ZhYmxlKCk7CiAqICAgICAgICAgcmVkcmF3KCk7CiAqICAgICAgIH0pOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIGZvcihsZXQgcCBvZiBwb2ludHMpIHsKICogICAgICAgICBzZXRDb2xvcihpc01vdmFibGUocCkgPyBgcmVkYCA6IGBncmV5YCk7CiAqICAgICAgICAgcG9pbnQocCk7CiAqICAgICAgIH0KICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKHgseSkgewogKiAgICAgICBpZiAoY3VycmVudE1vdmFibGUpIHJldHVybjsKICogICAgICAgY29uc3QgcCA9IG5ldyBQb2ludCh4LHkpOwogKiAgICAgICBwb2ludHMucHVzaChwKTsKICogICAgICAgc2V0TW92YWJsZShwKTsKICogICAgICAgcmVkcmF3KCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtQb2ludExpa2V9IFRoZSBwb2ludCB0aGF0IHdlIHdhbnQgdG8gY2hlY2sgIm1vdmFiaWxpdHkiIGZvcgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvdXIgcG9pbnQgaXMgaW4gdGhlIGxpc3Qgb2YgbW92YWJsZSBwb2ludHMsIG90aGVyd2lzZSBmYWxzZQogKgogKiBAc2VlIHtAbGluayBjbGVhck1vdmFibGV9CiAqIEBzZWUge0BsaW5rIHNldE1vdmFibGV9CiAqLwpmdW5jdGlvbiBpc01vdmFibGUocG9pbnQpIHsKICByZXR1cm4gX19tb3ZhYmxlX3BvaW50cy5pbmNsdWRlcyhwb2ludCk7Cn0KCi8qKgogKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCB0aGlzCiAqIGdyYXBoaWMgaGFzIGJlZW4gcnVubmluZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHBsYXkoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgY29uc3Qgc2Vjb25kcyA9IChtaWxsaXMoKS8xMDAwKXwwOwogKiAgICAgICB0ZXh0KGAke3NlY29uZHN9c2AsIHdpZHRoLzIsIGhlaWdodC8yKQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEByZXR1cm5zIHtudW1iZXJ9IG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGdyYXBoaWMgbG9hZGVkIGluCiAqLwpmdW5jdGlvbiBtaWxsaXMoKSB7CiAgcmV0dXJuIERhdGUubm93KCkgLSBfX3N0YXJ0X3RpbWU7Cn0KCi8qKgogKiBQYXVzZSB0aGUgZ3JhcGhpYyBpZiBpdHMgY3VycmVudGx5IHBsYXlpbmcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIGNvbnN0IHNlY29uZHMgPSAobWlsbGlzKCkvMTAwMCkudG9GaXhlZCgxKTsKICogICAgICAgdGV4dChgJHtzZWNvbmRzfXNgLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJBY3RpdmUoc3RhdGUpIHsKICogICAgICAgaWYoc3RhdGUpIHsKICogICAgICAgICBwYXVzZSgpOwogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIHBsYXkoKTsKICogICAgICAgfQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHBsYXl9CiAqIEBzZWUge0BsaW5rIHRvZ2dsZVBsYXl9CiAqLwpmdW5jdGlvbiBwYXVzZSgpIHsKICBwbGF5aW5nID0gZmFsc2U7Cn0KCi8qKgogKiBTdGFydCBwbGF5aW5nIHlvdXIgZ3JhcGhpYywgbWVhbmluZyBpdCB3aWxsIGNhbGwgZHJhdygpCiAqIGF0IHdoYXRldmVyIHJhdGUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBsb29wIGlzCiAqIGFsbG93ZWQgdG8gcnVuIG9uIHlvdXIgY29tcHV0ZXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBsZXQgZnBzID0gMDsKICogICAgIGxldCBjaGVja2VkID0gZmFsc2U7CiAqICAgICBsZXQgbGFzdEZyYW1lQ2hlY2sgPSAwOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBjb25zdCBzZWNvbmRzID0gKG1pbGxpcygpLzEwMDApLnRvRml4ZWQoMSk7CiAqICAgICAgIHRleHQoYGZwczogJHtmcHN9YCwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICAgIGlmIChzZWNvbmRzLmVuZHNXaXRoKGAuMGApKSB7CiAqICAgICAgICAgaWYgKCFjaGVja2VkKSB7CiAqICAgICAgICAgICBjaGVja2VkID0gdHJ1ZTsKICogICAgICAgICAgIGZwcyA9IGZyYW1lIC0gbGFzdEZyYW1lQ2hlY2s7CiAqICAgICAgICAgICBsYXN0RnJhbWVDaGVjayA9IGZyYW1lOwogKiAgICAgICAgIH0KICogICAgICAgfSBlbHNlIHsKICogICAgICAgICBjaGVja2VkID0gZmFsc2U7CiAqICAgICAgIH0KICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBwYXVzZX0KICogQHNlZSB7QGxpbmsgdG9nZ2xlUGxheX0KICovCmZ1bmN0aW9uIHBsYXkoKSB7CiAgcGxheWluZyA9IHRydWU7CiAgX19kcmF3KCk7Cn0KCi8qKgogKiBHZW5lcmF0ZSBhIHJhbmRvbSBjb2xvdXIuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uCiAqIGFsbG93cyB5b3UgdG8gZ2V0ICJ0aGUgY3VycmVudGx5IGdlbmVyYXRlZCByYW5kb20KICogY29sb3VyIiBpbiBkaWZmZXJlbnQgb3BhY2l0aWVzIGJ5IGNhbGxpbmcgdGhlIGZ1bmN0aW9uCiAqIHdpdGggYW4gb3BhY2l0eSB2YWx1ZSwgYW5kIGBmYWxzZWAgYXMgY3ljbGUgYXJndW1lbnQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihyYW5kb21Db2xvcigpKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKCkgewogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKgogKiBAcGFyYW0ge251bWJlcn0gb3BhY2l0eSBUaGUgb3BhY2l0eSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAsMV0KICogQHBhcmFtIHtudW1iZXJ9IGN5Y2xlPyBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gbW92ZSBvbiB0byB0aGUgbmV4dCBjb2xvdXIgKGRlZmF1bHQgPSB0cnVlKQogKgogKiBAc2VlIHtAbGluayBjb2xvcn0KICovCmZ1bmN0aW9uIHJhbmRvbUNvbG9yKGEgPSAxLjAsIGN5Y2xlID0gdHJ1ZSkgewogIGlmIChjeWNsZSkgX19jdXJyZW50X2h1ZSA9IHJhbmRvbSgwLCAzNjApOwogIHJldHVybiBgaHNsYSgke19fY3VycmVudF9odWV9LDUwJSw1MCUsJHthfSlgOwp9CgovKioKICogQW4gYWx0ZXJuYXRpdmUgdG8gd3JpdGluZyBmb3IgbG9vcHMsIGJlY2F1c2UKICogbm8gb25lIHdhbnRzIHRvIGNvbnN0YW50bHkgd3JpdGUgdmFyIGFsbG9jYXRpb25zCiAqIHRoYXQgb25seSBsaXZlIGZvciB0aGUgZHVyYXRpb24gb2YgYSBsb29wLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHJhbmdlKDAsIFRBVSwgKGEpID0+IHBvaW50KDQwICogY29zKGEpLCA0MCAqIHNpbihhKSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgZXF1aXZhbGVudCBvZiBhIGZvciBsb29wJ3MgaW5pdGlhbCBgbGV0IGkgPSAuLi5gCiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVxdWl2YWxlbnQgb2YgYSBmb3IgbG9vcCdzIGBpIDwgZW5kYAogKiBAcGFyYW0ge251bWJlcn0gc3RlcD8gVGhlIHN0ZXAgc2l6ZSBieSB3aGljaCB0byBpbmNyZW1lbnQgYXQgZWFjaCBpdGVyYXRpb24gKGRlZmF1bHRzID0gYChzdGFydC1lbmQpLzEwYCkKICogQHBhcmFtIHtGdW5jdGlvbn0gcnVuRnVuY3Rpb24gVGhlIGZ1bmN0aW9uIHRvIHJ1biBhdCBlYWNoIGl0ZXJhdGlvbgogKi8KZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgcnVuRnVuY3Rpb24pIHsKICBpZiAodHlwZW9mIHN0ZXAgPT09IGBmdW5jdGlvbmApIHsKICAgIHJ1bkZ1bmN0aW9uID0gc3RlcDsKICAgIHN0ZXAgPSAoZW5kIC0gc3RhcnQpIC8gMTA7CiAgfQogIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBzdGVwKSB7CiAgICBydW5GdW5jdGlvbihpKTsKICB9Cn0KCi8qKgogKiBTYWZlbHkgdHJpZ2dlciBhIG5ldyBkcmF3IHBhc3MuIElmIHRoZSBncmFwaGljIGlzIHJ1bm5pbmcKICogaW4gYW5pbWF0ZWQgbW9kZSwgb3IgYSByZWRyYXcoKSBpcyB0cmlnZ2VyZWQgX2R1cmluZ18gYQogKiByZWRyYXcoKSwgdGhpcyBjYWxsIHdpbGwgZG8gbm90aGluZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNvbnN0IGggPSBtYXAocG9pbnRlci54LCAwLCB3aWR0aCwgMCwgMzYwKTsKICogICAgICAgY29uc3QgbCA9IG1hcChwb2ludGVyLnksIDAsIGhlaWdodCwgNTAsIDApOwogKiAgICAgICBjbGVhcihjb2xvcihoLCAxMDAsIGwpKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKCkgewogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKi8KZnVuY3Rpb24gcmVkcmF3KCkgewogIGlmIChfX3JlZHJhd2luZykgcmV0dXJuOwogIGlmIChwbGF5aW5nKSByZXR1cm47CiAgX19yZWRyYXdpbmcgPSB0cnVlOwogIF9fZHJhdygpOwogIF9fcmVkcmF3aW5nID0gZmFsc2U7Cn0KCi8qKgogKiBSZXN0b3JlIHRoZSBncmFwaGljcyBjb250ZXh0ICh0cmFuc2Zvcm1zLAogKiBjdXJyZW50IGNvbG9ycywgZXRjKSB0byB3aGF0IHRoZXkgd2VyZQogKiB3aGVuIHNhdmUoKSB3YXMgY2FsbGVkLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICBsaW5lKDAsMCw4MCwwKTsKICogICAgICAgc2F2ZSgpOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCkKICogICAgICAgcmFuZ2UoMCwgNSwgMSwgKGEpID0+IHsKICogICAgICAgICByb3RhdGUoUEkvOCk7CiAqICAgICAgICAgbGluZSgwLDAsODAsMCk7CiAqICAgICAgIH0pOwogKiAgICAgICByZXN0b3JlKCk7CiAqICAgICAgIGxpbmUoLTIwLDAsLTgwLDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNhdmV9CiAqLwpmdW5jdGlvbiByZXN0b3JlKCkgewogIF9fY3R4LnJlc3RvcmUoKTsKfQoKLyoqCiAqIE1hcmsgb25lIG9yIG1vcmUgcG9pbnRzIGFzIG1vdmFibGUsIG1lYW5pbmcKICogdGhhdCB0aGUgdXNlciBjYW4gcmVwb3NpdGlvbiB0aGUgcG9pbnQgYXJvdW5kIG9uCiAqIHRoZSBjYW52YXMgYnkgdG91Y2gvY2xpY2stZHJhZ2dpbmcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgZm9yIChsZXQgaSA9IDQwOyBpIDwgMjAwOyBpICs9IDIwKSB7CiAqICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KGkgLSAyMCwgMTIwKSk7CiAqICAgICAgIH0KICogICAgICAgc2V0TW92YWJsZSguLi5wb2ludHMpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHNldFN0cm9rZShgcHVycGxlYCk7CiAqICAgICAgIGJzcGxpbmUoLi4ucG9pbnRzKTsKICogICAgICAgZm9yKGxldCBwIG9mIHBvaW50cykgcG9pbnQocCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtQb2ludExpa2Vbbl19IHBvaW50cyBPbmUgb3IgbW9yZSBwb2ludHMgdG8gbWFyayBhcyBtb3ZhYmxlLgogKgogKiBAc2VlIHtAbGluayBpc01vdmFibGV9CiAqIEBzZWUge0BsaW5rIGNsZWFyTW92YWJsZX0KICovCmZ1bmN0aW9uIHNldE1vdmFibGUoLi4ucG9pbnRzKSB7CiAgcG9pbnRzLmZvckVhY2goKHApID0+IHsKICAgIGlmIChfX21vdmFibGVfcG9pbnRzLmluZGV4T2YocCkgPT09IC0xKSB7CiAgICAgIF9fbW92YWJsZV9wb2ludHMucHVzaChwKTsKICAgIH0KICB9KTsKfQoKLyoqCiAqIFNldCAob3IgY2hhbmdlKSB0aGUgZ3JhcGhpYydzIHNpemUuIE5vdGUgdGhhdCB5b3VyIHdpZHRoCiAqIGFuZCBoZWlnaHQgdmFsdWVzIHdpbGwgZ2V0IHJvdW5kZWQgdG8gaW50ZWdlciB2YWx1ZXMuCiAqCiAqIE5vdGUgdGhhdCBgc2V0U2l6ZWAgd2lsbCBpbW1lZGlhdGVseSB0cmlnZ2VyIGEgcmVkcmF3LAogKiB3aGV0aGVyIHlvdSB3YW50IGl0IHRvIG9yIG5vdCwgYmVjYXVzZSBjaGFuZ2luZyBjYW52YXMKICogZGltZW5zaW9ucyBjbGVhcnMgdGhlIGNhbnZhcywgbmVjZXNzaXRhdGluZyBhIHJlZHJhdy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDQwMCwgMjAwKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIGNlbnRlcigpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKQogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHRleHQoYCR7d2lkdGh9LyR7aGVpZ2h0fWAsIDAsIDAsIENFTlRFUiwgTUlERExFKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJVcCgpIHsKICogICAgICAgc2V0U2l6ZShyYW5kb20oMTAwLDQwMCksIDIwMCk7CiAqICAgICAgIC8vIE5vdGUgdGhhdCB0aGVyZSBpcyBubyByZWRyYXcoKSBoZXJlIQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBUaGUgZ3JhcGhpY3Mgd2lkdGggaW4gcGl4ZWxzCiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVGhlIGdyYXBoaWNzIGhlaWdodCBpbiBwaXhlbHMKICovCmZ1bmN0aW9uIHNldFNpemUodyA9IDQwMCwgaCA9IDIwMCkgewogIHdpZHRoID0gX19jYW52YXMud2lkdGggPSB3IHwgMDsKICBoZWlnaHQgPSBfX2NhbnZhcy5oZWlnaHQgPSBoIHwgMDsKICBfX2VsZW1lbnQuc3R5bGUubWF4V2lkdGggPSBgY2FsYygyZW0gKyAke3dpZHRofXB4YDsKICBfX2N0eCA9IF9fY2FudmFzLmdldENvbnRleHQoYDJkYCk7CiAgX19kcmF3KCk7Cn0KCi8qKgogKiBTYXZlIHRoZSBjdXJyZW50IGdyYXBoaWNzIGNvbnRleHQgKHRyYW5zZm9ybXMsCiAqIGN1cnJlbnQgY29sb3JzLCBldGMpIHNvIHRoYXQgdGhvc2UgY2FuIGJlIHJlc3RvcmVkCiAqIGFmdGVyIGNoYW5naW5nIHRoZW0uCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUoMCwwLDgwLDApOwogKiAgICAgICBzYXZlKCk7CiAqICAgICAgIHNldENvbG9yKGBkYXJrZ3JlZW5gKQogKiAgICAgICByYW5nZSgwLCA1LCAxLCAoYSkgPT4gewogKiAgICAgICAgIHJvdGF0ZShQSS84KTsKICogICAgICAgICBsaW5lKDAsMCw4MCwwKTsKICogICAgICAgfSk7CiAqICAgICAgIHJlc3RvcmUoKTsKICogICAgICAgbGluZSgtMjAsMCwtODAsMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogKiBAc2VlIHtAbGluayByZXN0b3JlfQogKi8KZnVuY3Rpb24gc2F2ZSgpIHsKICBfX2N0eC5zYXZlKCk7Cn0KCi8qKgogKiBDb252ZXJ0IHRoZSBjdXJyZW50IGNhbnZhcyBpbnRvIGFuIGRhdGEgVVJMCiAqIHRoYXQgcmVwcmVzZW50cyBhIFBORyBpbWFnZS4KICoKICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgY2FudmFzIGFzIFBORyBkYXRhIFVSTAogKi8KZnVuY3Rpb24gdG9EYXRhVVJMKCkgewogIHJldHVybiBfX2NhbnZhcy50b0RhdGFVUkwoKTsKfQoKLyoqCiAqIElmIHRoZSBncmFwaGljIGlzIGN1cnJlbnRseSBwbGF5aW5nLCBwYXVzZSBpdCwKICogYW5kIGlmIGl0J3MgcGF1c2VkLCBwbGF5IGl0LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBjb25zdCBzZWNvbmRzID0gKG1pbGxpcygpLzEwMDApLnRvRml4ZWQoMSk7CiAqICAgICAgIHRleHQoYCR7c2Vjb25kc31zYCwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyQWN0aXZlKHN0YXRlKSB7CiAqICAgICAgIHRvZ2dsZVBsYXkoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIG5ldyBwbGF5IHN0YXRlCiAqCiAqIEBzZWUge0BsaW5rIHBhdXNlfQogKiBAc2VlIHtAbGluayBwbGF5fQogKi8KZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHsKICBwbGF5aW5nID8gcGF1c2UoKSA6IHBsYXkoKTsKICByZXR1cm4gcGxheWluZzsKfQpjb25zdCB7CiAgLyoqCiAgICogR2V0IHRoZSBhYnNvbHV0ZSB2YWx1ZSBmb3Igc29tZSBpbnB1dAogICAqCiAgICogRXhhbXBsZToKICAgKgogICAqIDxncmFwaGljcy1lbGVtZW50PgogICAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICAgKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICAgKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICAgKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0LzIpOwogICAqICAgICAgIG5vRmlsbCgpOwogICAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICAgKiAgICAgICBsaW5lKC1odWdlLCAwLCBodWdlLCAwKTsKICAgKgogICAqICAgICAgIGNvbnN0IHcyID0gd2lkdGgvMjsKICAgKiAgICAgICBjb25zdCBkYXRhID0gYXJyYXkod2lkdGgsICh4KSA9PiBbeCwgeCAtIHcyLCBhYnMoeCAtIHcyKV0pOwogICAqCiAgICogICAgICAgc2V0U3Ryb2tlKGByZWRgKTsKICAgKiAgICAgICBwbG90RGF0YShkYXRhLCAwLCAxKTsKICAgKgogICAqICAgICAgIHNldFN0cm9rZShgYmx1ZWApOwogICAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDIpOwogICAqICAgICB9CiAgICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICAgKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gdiBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGlucHV0IHZhbHVlIHdpdGggaXRzIHNpZ24gc2V0IHRvIHBvc2l0aXZlCiAgICovCiAgYWJzLAoKICAvKioKICAgKiBUaGUgaW52ZXJzZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSB2IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW52ZXJzZSBjb3NpbmUgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGFzaW59CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgYWNvcywKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgaW52ZXJzZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBoeXBlcmJvbGljIGludmVyc2UgY29zaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBhc2luaH0KICAgKiBAc2VlIHtAbGluayBhY29zfQogICAqLwogIGFjb3NoLAoKICAvKioKICAgKiBUaGUgaW52ZXJzZSBzaW5lIGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgaW52ZXJzZSBzaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBhY29zfQogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqLwogIGFzaW4sCgogIC8qKgogICAqIFRoZSBoeXBlcmJvbGljIGludmVyc2Ugc2luZSBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGh5cGVyYm9saWMgaW52ZXJzZSBzaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBhY29zaH0KICAgKiBAc2VlIHtAbGluayBhc2lufQogICAqLwogIGFzaW5oLAoKICAvKioKICAgKiBUaGUgaW52ZXJzZSB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgaW52ZXJzZSB0YW5nZW50CiAgICoKICAgKiBAc2VlIHtAbGluayB0YW59CiAgICovCiAgYXRhbiwKCiAgLyoqCiAgICogVGhlICJhdGFuMiIgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BdGFuMgogICAqCiAgICogQHBhcmFtIHt5fSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHBhcmFtIHt4fSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBhdGFuMiBhbmdsZSBmb3IgdGhpcyBudW1iZXIgcGFpcgogICAqLwogIGF0YW4yLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIHRhbmdlbnQgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBoeXBlcmJvbGljIGludmVyc2UgdGFuZ2VudAogICAqCiAgICogQHNlZSB7QGxpbmsgdGFufQogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqLwogIGF0YW5oLAoKICAvKioKICAgKiBUaGUgY3ViZSByb290IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgKHJlYWwpIGN1YmUgcm9vdCBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgc3FydH0KICAgKi8KICBjYnJ0LAoKICAvKioKICAgKiBUaGUgInJvdW5kIHVwIHRvIHRoZSBuZWFyZXN0IGludGVnZXIiIGZ1bmN0aW9uLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGludGVnZXIgcmVzdWx0IGFmdGVyIHJvdW5kaW5nIHVwLgogICAqCiAgICogQHNlZSB7QGxpbmsgZmxvb3J9CiAgICogQHNlZSB7QGxpbmsgcm91bmR9CiAgICovCiAgY2VpbCwKCiAgLyoqCiAgICogR2V0IHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvIGJpdHMgaW4gdGhlIDMyLWJpdCBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgYSBudW1iZXIKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvIGJpdHMgaW4gdGhlIDMyLWJpdCBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgdGhhdCBudW1iZXIuCiAgICovCiAgY2x6MzIsCgogIC8qKgogICAqIFRoZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBjb3NpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIHNpbn0KICAgKi8KICBjb3MsCgogIC8qKgogICAqIFRoZSBoeXBlcmJvbGljIGNvc2luZSBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGh5cGVyYm9saWMgY29zaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBjb3N9CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgY29zaCwKCiAgLyoqCiAgICogVGhlIGV4cG9uZW50IGZ1bmN0aW9uLCB0aGF0IGlzOiBlXngKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSB2YWx1ZSBvZiBFIHJhaXNlZCB0byB0aGF0IG51bWJlcidzIHBvd2VyCiAgICoKICAgKiBAc2VlIHtAbGluayBFfQogICAqLwogIGV4cCwKCiAgLyoqCiAgICogVGhlICJyb3VuZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIiIGZ1bmN0aW9uLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGludGVnZXIgcmVzdWx0IGFmdGVyIHJvdW5kaW5nIGRvd24uCiAgICoKICAgKiBAc2VlIHtAbGluayBjZWlsfQogICAqIEBzZWUge0BsaW5rIHJvdW5kfQogICAqLwogIGZsb29yLAoKICAvKioKICAgKiBSb3VuZCBhIG51bWJlciB0byB0aGUgbmVhcmVzdCAzMiBiaXQsIHJhdGhlciB0aGFuIHRoZQogICAqIHN0YW5kYXJkIEpTIDY0IGJpdCwgZmxvYXRpbmcgcG9pbnQgcmVwcmVzZW50YXRpb24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgbnVtYmVyIGFmdGVyIHJvdW5kaW5nIHRvIHRoZSBuZWFyZXN0IDMyIGJpdCBmbG9hdGluZyBwb2ludCByZXByZXNlbnRhdGlvbi4KICAgKgogICAqIEBzZWUge0BsaW5rIHJvdW5kfQogICAqLwogIGZyb3VuZCwKCiAgLyoqCiAgICogVGhlIEV1Y2xpZGVhbiBoeXBvdGVudXNlIGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcltdfSAuLi5pbnB1dCBUd28gb3IgbW9yZSBudW1iZXJzCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBoeXBvdGVudXNlIGdpdmVuIHRob3NlIG51bWJlcnMuCiAgICovCiAgaHlwb3QsCgogIC8qKgogICAqIFRoZSAzMiBiaXQgaW50ZWdlciBtdWx0aXBsaWNhdGlvbiBmdW5jdGlvbi4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBhIEFueSAzMiBiaXQgaW50ZWdlcgogICAqIEBwYXJhbSB7bnVtYmVyfSBiIEFueSAzMiBiaXQgaW50ZWdlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgMzIgYml0IGludGVnZXIgcmVzdWx0IG9mIGEgKiBiCiAgICovCiAgaW11bCwKCiAgLyoqCiAgICogVGhlIG5hdHVyYWwgbG9nYXJpdGhtIGZ1bmN0aW9uLCBpLmUuIHRoZSBiYXNlLUUgbG9nYXJpdGhtCiAgICoKICAgKiAoTm90ZSB0aGF0IGluIEpTIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkICJsb2ciIHJhdGhlciB0aGFuICJsbiIpCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIEV9CiAgICogQHNlZSB7QGxpbmsgbG9nfQogICAqLwogIGxvZzogbG4sCgogIC8qKgogICAqIFRoZSAiY29tbW9uIGxvZ2FyaXRobSIgZnVuY3Rpb24sIGkuZS4gdGhlIGJhc2UtMTAgbG9nYXJpdGhtLgogICAqCiAgICogKE5vdGUgdGhhdCBpbiBKUyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAibG9nMTAiIHJhdGhlciB0aGFuICJsb2ciKQogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGNvbW1vbiBsb2dhcml0aG0gb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGxufQogICAqLwogIGxvZzEwOiBsb2csCgogIC8qKgogICAqIFRoZSBiaW5hcnkgbG9nYXJpdGhtIGZ1bmN0aW9uLCBpLmUuIHRoZSBiYXNlLTIgbG9nYXJpdGhtLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGJhc2UgMiBsb2dhcml0aG0gb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGxufQogICAqIEBzZWUge0BsaW5rIGxvZ30KICAgKi8KICBsb2cyLAoKICAvKioKICAgKiBGaW5kIHRoZSBtYXhpbXVtIHZhbHVlIGluIGEgc2V0IG9mIG51bWJlcnMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSAuLi5pbnB1dCBBbnkgdHdvIG9yICBtb3JlIG51bWJlcnMKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGhpZ2hlc3QgdmFsdWVkIG51bWJlciBmcm9tIGFtb25nIHRoZSBpbnB1dC4KICAgKgogICAqIEBzZWUge0BsaW5rIG1pbn0KICAgKi8KICBtYXgsCgogIC8qKgogICAqIEZpbmQgdGhlIG1pbmltdW0gdmFsdWUgaW4gYSBzZXQgb2YgbnVtYmVycwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IC4uLmlucHV0IEFueSB0d28gb3IgIG1vcmUgbnVtYmVycwogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgbG93ZXN0IHZhbHVlZCBudW1iZXIgZnJvbSBhbW9uZyB0aGUgaW5wdXQuCiAgICoKICAgKiBAc2VlIHtAbGluayBtYXh9CiAgICovCiAgbWluLAoKICAvKioKICAgKiBUaGUgcG93ZXIgZnVuY3Rpb24uCiAgICoKICAgKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBhIGhvbGRvdmVyIGZyb20gYmVmb3JlIEpTCiAgICogaGFkIHRoZSBgKipgIG9wZXJhdG9yIGZvciBwZXJmb3JtaW5nIHRoaXMgY2FsY3VsYXRpb24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gYSBBbnkgbnVtYmVyCiAgICogQHBhcmFtIHtudW1iZXJ9IGIgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ8TmFOfSBvdXRwdXQgYSAqKiBiIG9yIE5hTiBpZiB0aGF0IGlzIHVuZGVmaW5lZAogICAqLwogIHBvdywKCiAgLyoqCiAgICogVGhlICJyb3VuZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIiBmdW5jdGlvbiwgcm91bmRpbmcgYW55CiAgICogdmFsdWUgW3guMCwgeC40OTk5Li4uXSB0byB4LCBhbmQgYW55IHZhbHVlIFt4LjUsIHguOTk5Li4uXQogICAqIHRvIHggKyAxLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGludGVnZXIgcmVzdWx0IGFmdGVyIHJvdW5kaW5nLgogICAqCiAgICogQHNlZSB7QGxpbmsgY2VpbH0KICAgKiBAc2VlIHtAbGluayBmbG9vcn0KICAgKi8KICByb3VuZCwKCiAgLyoqCiAgICogR2V0IHRoZSBzaWduIG9mIGEgbnVtYmVyCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCArMSBpZiB0aGUgbnVtYmVyIHdhcyBwb3NpdGl2ZSwgLTEgaWYgaXQgd2FzIG5lZ2F0aXZlLCBvciAwIGlmIHRoZSBpbnB1dCB3YXMgemVyby4KICAgKi8KICBzaWduLAoKICAvKioKICAgKiBUaGUgc2luZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIHNpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIGNvc30KICAgKi8KICBzaW4sCgogIC8qKgogICAqIFRoZSBoeXBlcmJvbGljIHNpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBoeXBlcmJvbGljIHNpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIHNpbn0KICAgKiBAc2VlIHtAbGluayBhY29zaH0KICAgKi8KICBzaW5oLAoKICAvKioKICAgKiBUaGUgc3F1YXJlIHJvb3QgZnVuY3Rpb24uCiAgICoKICAgKgogICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIGEgaG9sZG92ZXIgZnJvbSBiZWZvcmUgSlMKICAgKiBoYWQgdGhlIGAqKmAgb3BlcmF0b3IgZm9yIHBlcmZvcm1pbmcgdGhpcyBjYWxjdWxhdGlvbgogICAqIGJ5IHVzaW5nIGB4ICoqIDAuNWAuCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgc3F1YXJlIHJvb3Qgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGNicnR9CiAgICogQHNlZSB7QGxpbmsgcG93fQogICAqLwogIHNxcnQsCgogIC8qKgogICAqIFRoZSB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IG91dHB1dCBUaGUgdGFuZ2VudAogICAqLwogIHRhbiwKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgdGFuZ2VudCBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBvdXRwdXQgVGhlIGh5cGVyYm9saWMgdGFuZ2VudAogICAqCiAgICogQHNlZSB7QGxpbmsgdGFufQogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqLwogIHRhbmgsCgogIC8qKgogICAqIFRydW5jYXRlIGEgZnJhY3Rpb24gdG8gYW4gaW50ZWdlciBieSBzaW1wbHkgZHJvcHBpbmcgdGhlIGZyYWN0aW9uYWwgcGFydC4KICAgKiBOb3RlIHRoYXQgdGhpcyBkaWZmZXJzIGZyb20gdGhlIGBmbG9vcmAgZnVuY3Rpb246CiAgICoKICAgKiBgYGAKICAgKiBmbG9vcig0LjIpOyAgLy8gNAogICAqIGZsb29yKC00LjIpOyAvLyAtNQogICAqCiAgICogdHJ1bmMoNC4yKTsgIC8vIDQKICAgKiB0cnVuYygtNC4yKTsgLy8gLTQKICAgKiBgYGAKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gb3V0cHV0IFRoZSBpbnRlZ2VyIHBhcnQgb25seSBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgZmxvb3J9CiAgICovCiAgdHJ1bmMsCn0gPSBNYXRoOwoKLyoqCiAqIENvbnN0cmFpbiBhIG51bWJlciB0byB3aXRoaW4gYSBnaXZlbiByYW5nZS4KICogVGhpcyBpcyByZWFsbHkgbm90aGluZyBtb3JlIHRoYW4gYSBjb252ZW5pZW50CiAqIGZ1bmN0aW9uIHdyYXBwZXIgYXJvdW5kIHRoZSBzdGF0ZW1lbnQ6CiAqCiAqIGBgYAogKiB2IDwgcyA/IHMgOiB2ID4gZSA/IGUgOiB2CiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnN0cmFpbgogKiBAcGFyYW0ge251bWJlcn0gbG93ZXJCb3VuZCBUaGUgbG93ZXIgYm91bmQgb24gb3VyIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlckJvdW5kIFRoZSB1cHBlciBib3VuZCBvbiBvdXIgdmFsdWUKICogQHJldHVybnMge251bWJlcn0gVGhlIHZhbHVlLCBpZiBpdCBmYWxscyB3aXRoaW5nIFtsb3dlckJvdW5kLHVwcGVyQm91bmRdLCBvdGhlcndpc2Ugb25lIG9mIHRob3NlIGJvdW5kcy4KICoKICogQHNlZSB7QGxpbmsgY29uc3RyYWluTWFwfQogKi8KZnVuY3Rpb24gY29uc3RyYWluKHYsIHMsIGUpIHsKICByZXR1cm4gdiA8IHMgPyBzIDogdiA+IGUgPyBlIDogdjsKfQoKLyoqCiAqIFRoZSBjb3NlY2FudCBmdW5jdGlvbiwgd2hpY2ggaXM6CiAqCiAqIGBgYAogKiAxIC8gc2luKHYpCiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIGlucHV0IHZhbHVlLCBpbiByYWRpYW5zLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY29zZWNhbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayBzZWN9CiAqLwpmdW5jdGlvbiBjc2ModikgewogIHJldHVybiAxIC8gc2luKHYpOwp9CgovKioKICogVGhlIGNvdGFuZ2VudCBmdW5jdGlvbiwgd2hpY2ggaXM6CiAqCiAqIGBgYAogKiBjb3ModikgLyBzaW4odikKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgaW5wdXQgdmFsdWUsIGluIHJhZGlhbnMuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjb3RhbmdlbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayB0YW59CiAqLwpmdW5jdGlvbiBjdG4odikgewogIHJldHVybiBjb3ModikgLyBzaW4odik7Cn0KCi8qKgogKiBDb252ZXJ0IGEgbnVtYmVyIGluIHJhZGlhbnMgdG8gYSBudW1iZXIgaW4gZGVncmVlcy4KICogVGhpcyBpcyByZWFsbHkgbm90aGluZyBtb3JlIHRoYW4gYSBjb252ZW5pZW50CiAqIGZ1bmN0aW9uIHdyYXBwZXIgYXJvdW5kIHRoZSBzdGF0ZW1lbnQ6CiAqCiAqIGBgYAogKiB2L1BJICogMTgwCiAqIGBgYAogKgogKiBXaXRoIG9uZSB0cmljaywgaW4gdGhhdCBpdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB0aGUKICogcmVzdWx0YW50IHZhbHVlIHRvIHRoZSBzdGFuZGFyZCBbMCwgMzYwXSBpbnRlcnZhbC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb25zdHJhaW4KICogQHBhcmFtIHtib29sZWFufSBjb25zdHJhaW4/IEEgYm9vbGVhbiB0aGF0IGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gY29uc3RyYWluIHRoZSByZXN1bHRhbnQgdmFsdWUgdG8gWzAsIDM2MF0gKGRlZmF1bHQgPSBmYWxzZSkKICogQHJldHVybnMge251bWJlcn0gVGhlIGRlZ3JlZSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbnB1dCB2YWx1ZSBpbiByYWRpYW5zLCBvcHRpb25hbGx5IGNvbnN0cmFpbmVkIHRvIFswLCAzNjBdCiAqCiAqIEBzZWUge0BsaW5rIHJhZGlhbnN9CiAqIEBzZWUge0BsaW5rIGNvbnN0cmFpbn0KICovCmZ1bmN0aW9uIGRlZ3JlZXModiwgY29uc3RyYWluID0gZmFsc2UpIHsKICBsZXQgZCA9ICh2IC8gUEkpICogMTgwOwogIGlmICghY29uc3RyYWluKSByZXR1cm4gZDsKICB3aGlsZSAoZCA8IDApIGQgKz0gMzYwOwogIHJldHVybiBkICUgMzYwOwp9CgovKioKICogQ2FsY3VsYXRlIHRoZSAyRCBFdWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLgogKgogKiBAcGFyYW0ge251bWJlcn0geDEgVGhlIGZpcnN0IHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTEgVGhlIGZpcnN0IHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geDIgVGhlIHNlY29uZCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkyIFRoZSBzZWNvbmQgcG9pbnQncyB5IHBpeGVsIHZhbHVlCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBldWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIGNvb3JkaW5hdGVzCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwMSBUaGUgZmlyc3QgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwMiBUaGUgc2Vjb25kIHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBjb29yZGluYXRlcwogKi8KZnVuY3Rpb24gZGlzdCh4MSwgeTEsIHgyLCB5MikgewogIGlmICh4MS54ICE9PSB1bmRlZmluZWQgJiYgeDEueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5MiA9IHkxLnk7CiAgICB4MiA9IHkxLng7CiAgICB5MSA9IHgxLnk7CiAgICB4MSA9IHgxLnk7CiAgfQogIGNvbnN0IGR4ID0geDIgLSB4MTsKICBjb25zdCBkeSA9IHkyIC0geTE7CiAgcmV0dXJuIGh5cG90KGR4LCBkeSk7Cn0KCi8qKgogKiBQZXJmb3JtcyBhIGxpbmUvbGluZSBpbnRlcnNlY3Rpb24gdGVzdCBnaXZlIGVpdGhlciBmb3VyIHBvaW50cwogKiBkZWZpbmluZyB0aGUgbGluZXMgKHAxLS1wMikgYW5kIChwMy0tcDQpLCBvciBlaWdodCBjb29yZGluYXRlcwogKiBzcGFubmluZyBsaW5lcyAoeDEseTEpLS0oeDIseTIpIGFuZCAoeDMseTMpLS0oeDQseTQpLgogKgogKiBUaGlzIGZ1bmN0aW9uIGNvdmVycyBib3RoICJsaW5lL2xpbmUiIGFuZCAic2VnbWVudCIvInNlZ21lbnQiCiAqIHRlc3RpbmcgYnkgc2V0dGluZyBhIGJvb2xlYW4gdmFsdWUgYGluQm91bmRzYCBvbiB0aGUgcmVzdWx0OgogKiB3aGVuIGZhbHNlLCB0aGVyZSBpcyBvbmx5IGEgbGluZS9saW5lIGludGVyc2VjdGlvbiwgYnV0IHdoZW4KICogdHJ1ZSwgdGhlIGFjdHVhbCBsaW5lIHNlZ21lbnRzIGludGVyc2VjdC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIGNlbnRlcigpOwogKiAgICAgICAvLyAuLi5jb2RlIGdvZXMgaGVyZS4uLgogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4MSBUaGUgZmlyc3QgcG9pbnQncyB4IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geDIgVGhlIHNlY29uZCBwb2ludCdzIHggY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geTIgVGhlIHNlY29uZCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geDMgVGhlIHRoaXJkIHBvaW50J3MgeCBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MyBUaGUgdGhpcmQgcG9pbnQncyB5IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHg0IFRoZSBmb3VydGggcG9pbnQncyB4IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHk0IFRoZSBmb3VydGggcG9pbnQncyB5IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZXxmYWxzZX0gRWl0aGVyIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQsIG9yIGZhbHNlIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbgogKgogKiBAcGFyYW0ge1BvaW50TGluZX0gcDEgVGhlIGZpcnN0IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpbmV9IHAyIFRoZSBzZWNvbmQgY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGluZX0gcDMgVGhlIHRoaXJkIGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpbmV9IHA0IFRoZSBmb3VydGggY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfGZhbHNlfSBFaXRoZXIgdGhlIGludGVyc2VjdGlvbiBwb2ludCwgb3IgZmFsc2UgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uCiAqLwpmdW5jdGlvbiBsbGkoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7CiAgaWYgKHgxLnggIT09IHVuZGVmaW5lZCAmJiB4MS55ICE9PSB1bmRlZmluZWQpIHsKICAgIHk0ID0geTIueTsKICAgIHg0ID0geTIueDsKICAgIHkzID0geDIueTsKICAgIHgzID0geDIueDsKICAgIHkyID0geTEueTsKICAgIHgyID0geTEueDsKICAgIHkxID0geDEueTsKICAgIHgxID0geDEueDsKICB9CiAgY29uc3QgbnggPSAoeDEgKiB5MiAtIHkxICogeDIpICogKHgzIC0geDQpIC0gKHgxIC0geDIpICogKHgzICogeTQgLSB5MyAqIHg0KTsKICBjb25zdCBueSA9ICh4MSAqIHkyIC0geTEgKiB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgKiB5NCAtIHkzICogeDQpOwogIGNvbnN0IGQgPSAoeDEgLSB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgLSB4NCk7CgogIGlmIChkID09PSAwKSByZXR1cm4gZmFsc2U7CgogIGNvbnN0IHIgPSB7IHg6IG54IC8gZCwgeTogbnkgLyBkLCBpbkJvdW5kczogdHJ1ZSB9OwogIGxldCBhID0geDE7CiAgbGV0IGIgPSB4MjsKICBpZiAoeDEgPiB4MikgewogICAgYSA9IHgyOwogICAgYiA9IHgxOwogIH0KICBpZiAoci54IDwgYSB8fCByLnggPiBiKSByLmluQm91bmRzID0gZmFsc2U7CiAgZWxzZSB7CiAgICBhID0geTE7CiAgICBiID0geTI7CiAgICBpZiAoeTEgPiB5MikgewogICAgICBhID0geTI7CiAgICAgIGIgPSB5MTsKICAgIH0KICAgIGlmIChyLnkgPCBhIHx8IHIueSA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICAgIGVsc2UgewogICAgICBhID0geDM7CiAgICAgIGIgPSB4NDsKICAgICAgaWYgKHgzID4geDQpIHsKICAgICAgICBhID0geDQ7CiAgICAgICAgYiA9IHgzOwogICAgICB9CiAgICAgIGlmIChyLnggPCBhIHx8IHIueCA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICAgICAgZWxzZSB7CiAgICAgICAgYSA9IHkzOwogICAgICAgIGIgPSB5NDsKICAgICAgICBpZiAoeTMgPiB5NCkgewogICAgICAgICAgYSA9IHk0OwogICAgICAgICAgYiA9IHkzOwogICAgICAgIH0KICAgICAgICBpZiAoci55IDwgYSB8fCByLnkgPiBiKSByLmluQm91bmRzID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIHI7Cn0KCi8qKgogKiBNYXAgYSB2YWx1ZSBmcm9tIG9uZSBpbnRlcnZhbCB0byBhbm90aGVyLCBvcHRpb25hbGx5CiAqIGNvbnN0cmFpbmVkIHRvIHRoZSB0YXJnZXQgaW50ZXJ2YWwuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBPdXIgaW5wdXQgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbmFsU3RhcnQgVGhlIGxvd2VyIGJvdW5kIG9mIG91ciBkb21haW4KICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbmFsRW5kIFRoZSB1cHBlciBib3VuZCBvZiBvdXIgZG9tYWluCiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdTdGFydCBUaGUgbG93ZXIgYm91bmQgb2Ygb3VyIHRhcmdldCBpbnRlcnZhbAogKiBAcGFyYW0ge251bWJlcn0gbmV3RW5kIFRoZSB1cHBlciBib3VuZCBvbiBvdXIgdGFyZ2V0IGludGVydmFsCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29uc3RyYWluPyAgQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb25zdHJhaW4gdGhlIHJlc3VsdGFudCB2YWx1ZSB0byBbMCwzNjBdIChkZWZhdWx0ID0gZmFsc2UpCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZXN1bHQgb2YgbWFwcGluZyBvdXIgdmFsdWUgZnJvbSBvdXIgZG9tYWluIGludGVydmFsIHRvIG91ciB0YXJnZXQgaW50ZXJ2YWwsIG9wdGlvbmFsbHkgY29uc3RyYWluZWQgdG8gdGhlIHRhcmdldCBpbnRlcnZhbC4KICoKICogQHNlZSB7QGxpbmsgY29uc3RyYWlufQogKiBAc2VlIHtAbGluayBjb25zdHJhaW5NYXB9CiAqLwpmdW5jdGlvbiBtYXAodiwgcywgZSwgbnMsIG5lLCBjb25zdHJhaW5lZCA9IGZhbHNlKSB7CiAgY29uc3QgaTEgPSBlIC0gcywKICAgIGkyID0gbmUgLSBucywKICAgIHAgPSB2IC0gczsKICBsZXQgciA9IG5zICsgKHAgKiBpMikgLyBpMTsKICBpZiAoY29uc3RyYWluZWQpIHJldHVybiBjb25zdHJhaW4ociwgbnMsIG5lKTsKICByZXR1cm4gcjsKfQoKLyoqCiAqIENvbnZlcnQgYSBudW1iZXIgaW4gZGVncmVlcyB0byBhIG51bWJlciBpbiByYWRpYW5zLgogKiBUaGlzIGlzIHJlYWxseSBub3RoaW5nIG1vcmUgdGhhbiBhIGNvbnZlbmllbnQKICogZnVuY3Rpb24gd3JhcHBlciBhcm91bmQgdGhlIHN0YXRlbWVudDoKICoKICogYGBgCiAqIHYvMTgwICogUEkKICogYGBgCiAqCiAqIFdpdGggb25lIHRyaWNrLCBpbiB0aGF0IGl0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHRoZQogKiByZXN1bHRhbnQgdmFsdWUgdG8gdGhlIHN0YW5kYXJkIFswLCBUQVVdIGludGVydmFsLgogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnN0cmFpbgogKiBAcGFyYW0ge2Jvb2xlYW59IGNvbnN0cmFpbj8gQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb25zdHJhaW4gdGhlIHJlc3VsdGFudCB2YWx1ZSB0byBbMCwgVEFVXSAoZGVmYXVsdCA9IGZhbHNlKQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmFkaWFucyB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbnB1dCB2YWx1ZSBpbiBkZWdyZWVzLCBvcHRpb25hbGx5IGNvbnN0cmFpbmVkIHRvIFswLCBUQVVdCiAqCiAqIEBzZWUge0BsaW5rIGRlZ3JlZXN9CiAqIEBzZWUge0BsaW5rIGNvbnN0cmFpbn0KICovCmZ1bmN0aW9uIHJhZGlhbnModiwgY29uc3RyYWluID0gZmFsc2UpIHsKICBsZXQgciA9ICh2IC8gMTgwKSAqIFBJOwogIGlmICghY29uc3RyYWluKSByZXR1cm4gcjsKICB3aGlsZSAociA8IDApIHIgKz0gVEFVOwogIHJldHVybiByICUgVEFVOwp9CgovKioKICogR2VuZXJhdGUgYSBwc2V1ZG8tcmFuZG9tIG51bWJlci4KICoKICogVGhpcyBpcyBiYXNlZCBvbiB0aGUgU3BsaXRNaXgzMiBhbGdvcml0aG0sIGNvdmVyZWQKICogb3ZlciBvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc1OTMzMTYvNzQwNTUzCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDIwKTsKICogICAgICAgcmFuZ2UoMCwgaGVpZ2h0ICsgMjAsIDIwLCAodikgPT4gewogKiAgICAgICAgIHRleHQocmFuZG9tKCksIDUsIHYpOwogKiAgICAgICB9KQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqCiAqCiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBpbiB0aGUgaW50ZXJ2YWwgWzAsMSkKICoKICogQHBhcmFtIHtudW1iZXJ9IGEgVGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgcmFuZG9tIG51bWJlcgogKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgaW4gdGhlIGludGVydmFsIFswLGEpCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhIFRoZSBsb3dlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBudW1iZXIKICogQHBhcmFtIHtudW1iZXJ9IGIgVGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgcmFuZG9tIG51bWJlcgogKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgaW4gdGhlIGludGVydmFsIFthLCBiKQogKgogKiBAc2VlIHtAbGluayByYW5kb21TZWVkfQogKi8KZnVuY3Rpb24gcmFuZG9tKGEgPSAxLCBiKSB7CiAgY29uc3QgciA9IF9fcHJuZy5uZXh0KCk7CiAgaWYgKGIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGEgKiByOwogIHJldHVybiBhICsgciAqIChiIC0gYSk7Cn0KCi8qKgogKiBTZXQgdGhlIHBzZXVkby1yYW5kb20gbnVtYmVyIGdlbmVyYXRvciBzZWVkLiBJZiBubyBzZWVkCiAqIHZhbHVlIGlzIHByb3ZpZGVkLCB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZzoKICoKICogYGBgCiAqIHJhbmRvbVNlZWQoRGF0ZS5ub3coKSAqIE1hdGgucmFuZG9tKCkpCiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gc2VlZD8gVGhlIHJhbmRvbSBzZWVkIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayByYW5kb219CiAqLwpmdW5jdGlvbiByYW5kb21TZWVkKHNlZWQgPSBEYXRlLm5vdygpICogTWF0aC5yYW5kb20oKSkgewogIF9fcHJuZy5yZXNlZWQoc2VlZCk7Cn0KCi8qKgogKiBUaGUgc2VjYW50IGZ1bmN0aW9uLCB3aGljaCBpczoKICoKICogYGBgCiAqIDEgLyBjb3ModikKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgaW5wdXQgdmFsdWUsIGluIHJhZGlhbnMuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzZWNhbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayBjc2N9CiAqLwpmdW5jdGlvbiBzZWModikgewogIHJldHVybiAxIC8gY29zKHYpOwp9Ci8qKgogKiBQcm9qZWN0IGEgM0QgY29vcmRpbmF0ZSB0byAyRC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0UHJvamVjdG9yKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgNTAsIC0wLjQpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGdyZWVuYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIDNEIGNvb3JkaW5hdGUncyB4IHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSAzRCBjb29yZGluYXRlJ3MgeCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geiBUaGUgM0QgY29vcmRpbmF0ZSdzIHggdmFsdWUKICogQHJldHVybnMge1BvaW50TGlrZX0gcCAgVGhlIHByb2plY3RlZCAyRCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSAyRCBjb29yZGluYXRlIGFzIHt4LHksen0gY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwICBUaGUgcHJvamVjdGVkIDJEIHt4LHl9IGNvb3JkaW5hdGUKICoKICogQHNlZSB7QGxpbmsgc2V0UHJvamVjdG9yfQogKi8KZnVuY3Rpb24gcHJvamVjdCh4LCB5LCB6KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkICYmIHgueiAhPT0gdW5kZWZpbmVkKSB7CiAgICB6ID0geC56OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIHJldHVybiBfX3Byb2plY3Rvci5wcm9qZWN0KHgsIHksIHopOwp9CgovKioKICogU2V0IHRoZSBwcm9qZWN0b3IncyB4LCB5LCBhbmQgeiBheGlzIHJvdGF0aW9uCiAqIGluIHJhZGlhbnMuIE5vdGUgdGhhdCB0aGVzZSBhcmUgYXBwbGllZCBpbiBvcmRlci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0UHJvamVjdG9yKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgNTAsIC0wLjQpOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgY29uc3QgbSA9IG1pbGxpcygpIC8gNTAwMDsKICogICAgICAgcm90YXRlUHJvamVjdG9yKG0sIDIgKiBtLCAzICogbSk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGdyZWVuYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIG92ZXIgdGhlIHggYXhpcyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSBhbmdsZSBvZiByb3RhdGlvbiBvdmVyIHRoZSB5IGF4aXMgaW4gcmFkaWFucwogKiBAcGFyYW0ge251bWJlcn0geiBUaGUgYW5nbGUgb2Ygcm90YXRpb24gb3ZlciB0aGUgeiBheGlzIGluIHJhZGlhbnMKICoKICogQHNlZSB7QGxpbmsgcHJvamVjdH0KICovCmZ1bmN0aW9uIHJvdGF0ZVByb2plY3Rvcih4LCB5LCB6KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkICYmIHgueiAhPT0gdW5kZWZpbmVkKSB7CiAgICB6ID0geC56OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIF9fcHJvamVjdG9yLnNldFJvdGF0aW9uKHgsIHksIHopOwp9CgovKioKICogU2V0IHRoZSBwcm9qZWN0IHBhcmFtZXRlcnMuIEN1cnJlbnRseSwgb25seQogKiBjYWJpbmV0IHByb2plY3QgaXMgc3VwcG9ydGVkLCB3aGljaCBhY2NlcHRzCiAqIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczoKICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0UHJvamVjdG9yKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgNTAsIC0wLjQpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIDEpKTsKICogICAgICAgc2V0Q29sb3IoYGdyZWVuYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAxKSwgcHJvamVjdCgxLCAtMSwgMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtICB7bnVtYmVyfSB4T2Zmc2V0IG9mIHRoZSBwcm9qZWN0aW9uIHdydCB0aGUgY2FudmFzIChkZWZhdWx0ID0gMCkKICogQHBhcmFtICB7bnVtYmVyfSB5T2Zmc2V0IG9mIHRoZSBwcm9qZWN0aW9uIHdydCB0aGUgY2FudmFzIChkZWZhdWx0ID0gMCkKICogQHBhcmFtICB7bnVtYmVyfSBzY2FsZSBmYWN0b3IgZm9yIHRoZSAzRCBpbnB1dCAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSAge251bWJlcn0gY2FiaW5ldCBhbmdsZSBpbiByYWRpYW5zIChkZWZhdWx0ID0gLXBpLzYpCiAqCiAqIEBzZWUge0BsaW5rIHByb2plY3R9CiAqLwpmdW5jdGlvbiBzZXRQcm9qZWN0b3IoLi4uYXJncykgewogIF9fcHJvamVjdG9yLnVwZGF0ZSguLi5hcmdzKTsKfQovKioKICogU2V0IGEgYm9yZGVyIGFyb3VuZCB0aGUgY2FudmFzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRCb3JkZXIoMTAsIGByZWRgKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcnxib29sZWFufSB3aWR0aD8gVGhlIHdpZHRoIG9mIHRoZSBib3JkZXIgaW4gcGl4ZWxzLCBkaXNhYmxpbmcgdGhlIGJvcmRlciBvbWl0dGVkCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvcj8gVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIgKGRlZmF1bHQgPSBibGFjaykKICoKICogQHNlZSB7QGxpbmsgbm9Cb3JkZXJ9CiAqLwpmdW5jdGlvbiBzZXRCb3JkZXIod2lkdGggPSAxLCBjb2xvciA9IGBibGFja2ApIHsKICBpZiAoIXdpZHRoKSB7CiAgICBfX2NhbnZhcy5zdHlsZS5ib3JkZXIgPSBgbm9uZWA7CiAgfSBlbHNlIHsKICAgIF9fY2FudmFzLnN0eWxlLmJvcmRlciA9IGAke3dpZHRofXB4IHNvbGlkICR7Y29sb3J9YDsKICB9Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgc3Ryb2tlIGFuZCBmaWxsIGNvbG91ciBhdAogKiB0aGUgc2FtZSB0aW1lLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgcmVjdCg1MCwgNTAsIDEwMCwgMTAwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIKICoKICogQHNlZSB7QGxpbmsgc2V0U3Ryb2tlfQogKiBAc2VlIHtAbGluayBzZXRGaWxsfQogKiBAc2VlIHtAbGluayBub0NvbG9yfQogKi8KZnVuY3Rpb24gc2V0Q29sb3IoY29sb3IpIHsKICBzZXRGaWxsKGNvbG9yKTsKICBzZXRTdHJva2UoY29sb3IpOwp9CgovKioKICogQ2hhbmdlIHRoZSBjdXJzb3IgdG8gYSBzcGVjaWZpYyBpY29uOgogKgogKiAtIEFVVE8gLSB1c2Ugd2hhdGV2ZXIgdGhlIGJyb3dzZXIgd291bGQgb3RoZXJ3aXNlIHVzZQogKiAtIENST1NTIC0gdXNlIGEgY3Jvc3MtaGFpciBpY29uCiAqIC0gUE9JTlRFUiAtIHVzZSB0aGUgInBvaW50ZXIiIGljb24gdGhhdCBpcyBhbHNvIHVzZWQgZm9yIGNsaWNrYWJsZSBsaW5rcwogKgogKiBVc2UgYW55IG90aGVyIHN0cmluZyBmb3VuZCBvdmVyIG9uIHRoZSBNRE4gY3Vyc29yIGFydGljbGUgdG8gc2V0IGEgY3Vyc29yIG5vdCBjb3ZlcmVkIGJ5IHRoZSBhYm92ZSBjb25zdGFudHMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYCNGRjAyYCk7CiAqICAgICAgIHJlY3QoMCwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgc2V0Q29sb3IoYCMwRkYyYCk7CiAqICAgICAgIHJlY3Qod2lkdGgvMiwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKHgsIHkpIHsKICogICAgICAgaWYgKHggPCB3aWR0aC8yKSB7CiAqICAgICAgICAgc2V0Q3Vyc29yKEFVVE8pOwogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIG5vQ3Vyc29yKCk7CiAqICAgICAgIH0KICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgQ1NTIGN1cnNvciB0eXBlCiAqCiAqIEBzZWUge0BsaW5rIG5vQ3Vyc29yfQogKi8KZnVuY3Rpb24gc2V0Q3Vyc29yKHR5cGUpIHsKICBfX2N1cnJlbnRfY3Vyc29yID0gdHlwZTsKICBfX2NhbnZhcy5zdHlsZS5jdXJzb3IgPSBfX2N1cnJlbnRfY3Vyc29yOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IGZpbGwgY29sb3VyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGByZWRgKTsKICogICAgICAgcmVjdCg1MCwgNTAsIDEwMCwgMTAwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIgKGRlZmF1bHQgPSBibGFjaykKICoKICogQHNlZSB7QGxpbmsgbm9GaWxsfQogKi8KZnVuY3Rpb24gc2V0RmlsbChjb2xvciA9IGBibGFja2ApIHsKICBpZiAoQ1NTX0NPTE9SX01BUFtjb2xvcl0gPT09IF9faGlnaGxpZ2h0X2NvbG9yKSB7CiAgICBjb2xvciA9IF9fY3VycmVudF9oaWdobGlnaHRfY29sb3I7CiAgfQogIF9fY3R4LmZpbGxTdHlsZSA9IGNvbG9yOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IGZvbnQgdXNpbmcgYSBzaW5nbGUgc3RyaW5nLiBGb3IgdGhlIHN5bnRheCwKICogc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBmb250IEEgQ1NTIHNob3J0aGFuZCBmb250IHByb3BlcnR5CiAqCiAqIEBzZWUge0BsaW5rIHNldEZvbnRGYW1pbHl9CiAqIEBzZWUge0BsaW5rIHNldEZvbnRTaXplfQogKiBAc2VlIHtAbGluayBzZXRGb250V2VpZ2h0fQogKi8KZnVuY3Rpb24gc2V0Rm9udChmb250KSB7CiAgX19jdHguZm9udCA9IGZvbnQgfHwgYCR7X19mb250LndlaWdodH0gJHtfX2ZvbnQuc2l6ZX1weCAke19fZm9udC5mYW1pbHl9YDsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBmb250IGZhbWlseS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIENTUyBmb250IGZhbWlseSBuYW1lCiAqCiAqIEBzZWUge0BsaW5rIHNldEZvbnRTaXplfQogKiBAc2VlIHtAbGluayBzZXRGb250V2VpZ2h0fQogKi8KZnVuY3Rpb24gc2V0Rm9udEZhbWlseShuYW1lKSB7CiAgX19mb250LmZhbWlseSA9IG5hbWU7CiAgc2V0Rm9udCgpOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IGZvbnQgc2l6ZQogKgogKiBAcGFyYW0ge251bWJlcn0gcHggVGhlIGZvbnQgc2l6ZSBpbiBwaXhlbHMKICoKICogQHNlZSB7QGxpbmsgc2V0Rm9udEZhbWlseX0KICogQHNlZSB7QGxpbmsgc2V0Rm9udFdlaWdodH0KICovCmZ1bmN0aW9uIHNldEZvbnRTaXplKHB4KSB7CiAgX19mb250LnNpemUgPSBweDsKICBzZXRGb250KCk7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgZm9udCB3ZWlnaHQKICoKICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWwgVGhlIENTUyB3ZWlnaHQgbnVtYmVyIG9yIGVpdGhlciBvZiB0aGUgc3BlY2lhbCBzdHJpbmdzICJub3JtYWwiLCAiYm9sZCIsICJib2xkZXIiLCBvciAibGlnaHRlciIuCiAqCiAqIEBzZWUge0BsaW5rIHNldEZvbnRGYW1pbHl9CiAqIEBzZWUge0BsaW5rIHNldEZvbnRTaXplfQogKi8KZnVuY3Rpb24gc2V0Rm9udFdlaWdodCh2YWwpIHsKICBfX2ZvbnQud2VpZ2h0ID0gdmFsOwogIHNldEZvbnQoKTsKfQoKLyoqCiAqIFNldCB0aGUgYmFja2dyb3VuZCBncmlkIHNwYWNpbmcgYW5kIGNvbG91ci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEdyaWQoMjAsIGBsYXZlbmRlcmApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHNwYWNpbmc/IFRoZSBzcGFjaW5nIGJldHdlZW4gZ3JpZCBsaW5lcyBpbiBwaXhlbHMgKGRlZmF1bHQgPSAyMCkKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yPyBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlciAoZGVmYXVsdCA9IGxpZ2h0Z3JleSkKICoKICogQHNlZSB7QGxpbmsgbm9HcmlkfQogKi8KZnVuY3Rpb24gc2V0R3JpZChzcGFjaW5nID0gMjAsIGNvbG9yID0gYGxpZ2h0Z3JleWApIHsKICBfX2RyYXdfZ3JpZCA9IHRydWU7CiAgX19ncmlkX3NwYWNpbmcgPSBzcGFjaW5nOwogIF9fZ3JpZF9jb2xvciA9IGNvbG9yOwp9CgovKioKICogU2V0IHRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcGxhY2Ugd2hhdGV2ZXIKICogaGlnaGxpZ2h0KCkgbWFya2VkIGFzIHRoZSAidG8gaGlnaGxpZ2h0IiBjb2xvci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0SGlnaGxpZ2h0Q29sb3IoYGxpbWVgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICB0ZXh0KCJsZXQncyBnbyIsIHdpZHRoLzIsIGhlaWdodC8yKQogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckFjdGl2ZShzdGF0ZSkgewogKiAgICAgICBpZiAoc3RhdGUpIGhpZ2hsaWdodChgcmVkYCk7CiAqICAgICAgIGVsc2UgaGlnaGxpZ2h0KGZhbHNlKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIKICoKICogQHNlZSB7QGxpbmsgaGlnaGxpZ2h0fQogKi8KZnVuY3Rpb24gc2V0SGlnaGxpZ2h0Q29sb3IoY29sb3IpIHsKICBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yID0gY29sb3I7Cn0KCi8qKgogKiBTZXQgdGhlIGxpbmUgZGFzaCBwcm9wZXJ0eS4gU2VlIHRoZSBmb2xsb3dpbmcgTUROIGFydGljbGUgZm9yIHRoZSBkZXRhaWxzOgogKgogKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3NldExpbmVEYXNoCiAqCiAqIEBwYXJhbSAge251bWJlcltdfSAuLi52YWx1ZXMgVGhlIGRhc2ggaW50ZXJ2YWxzIGluIHBpeGVsCiAqCiAqIEBzZWUge0BsaW5rIG5vTGluZURhc2h9CiAqLwpmdW5jdGlvbiBzZXRMaW5lRGFzaCguLi52YWx1ZXMpIHsKICBfX2N0eC5zZXRMaW5lRGFzaCh2YWx1ZXMpOwp9CgovKioKICogU2V0IHRoZSBsaW5lIHdpZHRoIGluIHBpeGVscy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcmFuZ2UoMSwgMTAsIChpKSA9PiB7CiAqICAgICAgICAgc2V0TGluZVdpZHRoKGkpOwogKiAgICAgICAgIGxpbmUoMjAsIGkgKiAyMCwgMTgwLCBpICogMjApOwogKiAgICAgICB9KQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aD8gVGhlIGxpbmUgd2lkdGggaW4gcGl4ZWxzIChkZWZhdWx0ID0gMSkKICoKICogQHNlZSB7QGxpbmsgc2V0VGV4dFN0cm9rZX0KICovCmZ1bmN0aW9uIHNldExpbmVXaWR0aCh3aWR0aCA9IDEpIHsKICBfX2N0eC5saW5lV2lkdGggPSB3aWR0aDsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBzdHJva2UgY29sb3VyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGByZWRgKTsKICogICAgICAgcmVjdCg1MCwgNTAsIDEwMCwgMTAwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIgKGRlZmF1bHQgPSBibGFjaykKICoKICogQHNlZSB7QGxpbmsgc2V0RmlsbH0KICogQHNlZSB7QGxpbmsgc2V0Q29sb3J9CiAqLwpmdW5jdGlvbiBzZXRTdHJva2UoY29sb3IgPSBgYmxhY2tgKSB7CiAgaWYgKENTU19DT0xPUl9NQVBbY29sb3JdID09PSBfX2hpZ2hsaWdodF9jb2xvcikgewogICAgY29sb3IgPSBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yOwogIH0KICBfX2N0eC5zdHJva2VTdHlsZSA9IGNvbG9yOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IHRleHQgYWxpZ25tZW50IHZhbHVlcy4KICoKICogVmFsaWQgYHhBbGlnbmAgdmFsdWVzIGFyZToKICoKICogLSBDRU5URVIgLSB0aGUgdGV4dCBhbmNob3IgaXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGV4dC4gVGV4dCBpcyBwbGFjZWQgZXZlbmx5IG9uIGVpdGhlciBzaWRlLgogKiAtIEVORCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgcmlnaHQgZm9yIExUUiB0ZXh0LCBhbmQgb24gdGhlIGxlZnQgZm9yIFJUTCB0ZXh0LgogKiAtIExFRlQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgdGV4dC4gYWxsIHRleHQgaXMgdG8gdGhlIHJpZ2h0LgogKiAtIFJJR0hUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSB0ZXh0LiBBbGwgdGV4dCBpcyB0byB0aGUgbGVmdC4KICogLSBTVEFSVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgbGVmdCBmb3IgTFRSIHRleHQsIGFuZCBvbiB0aGUgcmlnaHQgZm9yIFJUTCB0ZXh0LgogKgogKiBWYWxpZCBgeUFsaWduYCB2YWx1ZXMgYXJlOgogKgogKiAtIEFMUEhBQkVUSUMgLSBzdGFuZGFyZCB0ZXh0IGFsaWdubWVudCAoZGVmYXVsdCkKICogLSBCT1RUT00gLSB0aGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBib3R0b20gb2YgdGhlIGJvdW5kaW5nIGJveAogKiAtIEhBTkdJTkcgLSByZWxldmFudCBmb3IgVGliZXRhbiBhbmQgb3RoZXIgSW5kaWMgc2NyaXB0cy4KICogLSBJREVPR1JBUEhJQyAtIHJlbGV2YW50IGZvciBpZGVvZ3JhcGhpYyBDSktWIHRleHQuCiAqIC0gTUlERExFIC0gVGhlIHZlcnRpY2FsIGVxdWl2YWxlbnQgb2YgImNlbnRlciIuCiAqIC0gVE9QIC0gVGhlIHRleHQgaXMgYWxpZ25lZCB0byB0aGUgdG9wIG9mIHRoZSB0eXBvZ3JhcGhpYyAiZW0gc3F1YXJlIi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRGb250U2l6ZSgyMCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBsaW5lKHdpZHRoIC8gMiwgMCwgd2lkdGggLyAyLCBoZWlnaHQpOwogKiAgICAgICBsaW5lKDAsIGhlaWdodCAvIDIsIHdpZHRoLCBoZWlnaHQgLyAyKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dCgiY2VudGVyIG1pZGRsZSIsIHdpZHRoIC8gMiwgaGVpZ2h0LzIpOwogKiAgICAgICBsaW5lKDAsIGhlaWdodCAvIDIgLSA1MCwgd2lkdGgsIGhlaWdodCAvIDIgLSA1MCk7CiAqICAgICAgIHNldFRleHRBbGlnbihSSUdIVCwgVE9QKTsKICogICAgICAgdGV4dCgicmlnaHQgdG9wIiwgd2lkdGggLyAyLCBoZWlnaHQvMiAtIDUwKTsKICogICAgICAgbGluZSgwLCBoZWlnaHQgLyAyICsgNTAsIHdpZHRoLCBoZWlnaHQgLyAyICsgNTApOwogKiAgICAgICBzZXRUZXh0QWxpZ24oTEVGVCwgQk9UVE9NKTsKICogICAgICAgdGV4dCgibGVmdCBib3R0b20iLCB3aWR0aCAvIDIsIGhlaWdodC8yICsgNTApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB4QWxpZ24gVGhlIENTUyBob3Jpem9udGFsIGFsaWdubWVudAogKiBAcGFyYW0ge3N0cmluZ30geUFsaWduIFRoZSBDU1MgdmVydGljYWwgYWxpZ25tZW50CiAqLwpmdW5jdGlvbiBzZXRUZXh0QWxpZ24oeEFsaWduLCB5QWxpZ24pIHsKICBfX2N0eC50ZXh0QWxpZ24gPSB4QWxpZ247CiAgX19jdHgudGV4dEJhc2VsaW5lID0geUFsaWduOwp9CgovKioKICogU2V0IHRoZSB0ZXh0IG91dGxpbmUgc3Ryb2tpbmcgcHJvcGVydGllcy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRTdHJva2UoYHJlZGAsIDEpOwogKiAgICAgICBzZXRGaWxsKGB5ZWxsb3dgKTsKICogICAgICAgdGV4dCgiZmFuY3kgdGV4dCIsIHdpZHRoLzIsIDgwLCBDRU5URVIsIENFTlRFUik7CiAqICAgICAgIHNldEZvbnRTaXplKDY1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZShgcmVkYCwgMyk7CiAqICAgICAgIHNldEZpbGwoYHllbGxvd2ApOwogKiAgICAgICB0ZXh0KCJmYW5jeSB0ZXh0Iiwgd2lkdGgvMiwgMTQwLCBDRU5URVIsIENFTlRFUik7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyCiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aD8gVGhlIHRleHQgc3Ryb2tlIHdpZHRoIGluIHBpeGVscyAoZGVmYXVsdCA9IDEpCiAqCiAqIEBzZWUge0BsaW5rIHNldFN0cm9rZX0KICogQHNlZSB7QGxpbmsgc2V0TGluZVdpZHRofQogKi8KZnVuY3Rpb24gc2V0VGV4dFN0cm9rZShjb2xvciwgd2lkdGggPSAxKSB7CiAgX190ZXh0U3Ryb2tlID0gY29sb3I7CiAgc2V0TGluZVdpZHRoKHdpZHRoKTsKfQovKioKICogQ2VudGVycyB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb24geW91ciBncmFwaGljLgogKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZzoKICoKICogYGBgCiAqIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqIGBgYAogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgY2VudGVyKCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBsaW5lKDAsIC1odWdlLCAwLCBodWdlKTsKICogICAgICAgbGluZSgtaHVnZSwgMCwgaHVnZSwgMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCggMTAsICAxMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCggMTAsIC0xMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCgtMTAsIC0xMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCgtMTAsICAxMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICovCmZ1bmN0aW9uIGNlbnRlcigpIHsKICB0cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTsKfQoKLyoqCiAqIFJlc2V0IHRoZSBjb29yZGluYXRlIHRyYW5zZm9ybSBtYXRyaXguCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYGxpZ2h0Z3JleWApOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHRyYW5zbGF0ZSg1MCw1MCk7CiAqICAgICAgIGxpbmUoMCwwLDEwMCwwKTsKICogICAgICAgcG9pbnQoMCwwKTsKICogICAgICAgc2V0Q29sb3IoYGRhcmtncmVlbmApOwogKiAgICAgICBwb2ludCgxMCwwKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBwb2ludCgxMCwwKTsKICogICAgICAgbGluZSgwLDAsMTAwLDApOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICByb3RhdGUoLVBJLzYpCiAqICAgICAgIHBvaW50KDEwMCwwKTsKICogICAgICAgc2NhbGUoMC41LCAwLjUpOwogKiAgICAgICBwb2ludCgxMDAsMCk7CiAqICAgICAgIGxpbmUoMTAwLDAsMjAwLDApOwogKiAgICAgICByZXNldFRyYW5zZm9ybSgpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgbGluZSgwLDMsMTAwLDMpOwogKiAgICAgICBwb2ludCgwLDMpOwogKiAgICAgICBwb2ludCgxMCwzKTsKICogICAgICAgcG9pbnQoMTAwLDMpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHJlc2V0VHJhbnNmb3JtKCkgewogIF9fY3R4LnJlc2V0VHJhbnNmb3JtKCk7Cn0KCi8qKgogKiBSb3RhdGUgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIHdydCB0aGUgY3VycmVudCBvcmlnaW4uCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYGxpZ2h0Z3JleWApOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcG9pbnQoMCwwKTsKICogICAgICAgc2V0Q29sb3IoYGRhcmtncmVlbmApOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgVGhlIGFuZ2xlIGJ5IHdoaWNoIHRvIHJvdGF0ZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gaW4gcmFkaWFucwogKgogKiBAc2VlIHtAbGluayB0cmFuc2Zvcm19CiAqIEBzZWUge0BsaW5rIHJlc2V0VHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gcm90YXRlKGFuZ2xlID0gMCkgewogIF9fY3R4LnJvdGF0ZShhbmdsZSk7Cn0KCi8qKgogKiBTY2FsZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gd3J0IHRoZSBjdXJyZW50IG9yaWdpbi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgbm9HcmlkKCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgbGlnaHRncmV5YCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwb2ludCgwLDApOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCk7CiAqICAgICAgIGxpbmUoMCwwLDIwLDIwKTsKICogICAgICAgcG9pbnQoMjAsMjApOwogKiAgICAgICByb3RhdGUoUEkvNCk7CiAqICAgICAgIHNjYWxlKDIpOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgYW1vdW50IGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSB4IGNvb3JkaW5hdGVzLgogKiBAcGFyYW0ge251bWJlcn0geT8gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgeCBjb29yZGluYXRlcyAoZGVmYXVsdCA9IHNhbWUgYXMgeCkKICoKICogQHNlZSB7QGxpbmsgdHJhbnNmb3JtfQogKiBAc2VlIHtAbGluayByZXNldFRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHNjYWxlKHggPSAxLCB5ID0geCkgewogIF9fY3R4LnNjYWxlKHgsIHkpOwp9CgovKioKICogQ29udmVydCBhIHNjcmVlbiAoZS5nLiBicm93c2VyKSBjb29yZGluYXRlIGludG8gaXRzCiAqIGNvcnJlc3BvbmRpbmcgInRyYW5zZm9ybWVkIiBjb29yZGluYXRlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBub0dyaWQoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBsaWdodGdyZXlgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBzY2FsZSgwLjUpOwogKiAgICAgICBpZiAocG9pbnRlci5hY3RpdmUpIHsKICogICAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgICAgcG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpOwogKiAgICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgICAgcG9pbnQoc2NyZWVuVG9Xb3JsZChwb2ludGVyLngsIHBvaW50ZXIueSkpOwogKiAgICAgICB9CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyTW92ZSgpIHsKICogICAgICAgcmVkcmF3KCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHNjcmVlbiBjb29yZGluYXRlJ3MgeCB2YWx1ZSBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHNjcmVlbiBjb29yZGluYXRlJ3MgeSB2YWx1ZSBpbiBwaXhlbHMKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgd29ybGQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgc2NyZWVuIHt4LHl9IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgd29ybGQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBwcm9qZWN0fQogKiBAc2VlIHtAbGluayB3b3JsZFRvU2NyZWVufQogKi8KZnVuY3Rpb24gc2NyZWVuVG9Xb3JsZCh4LCB5KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIGxldCBNID0gX19jdHguZ2V0VHJhbnNmb3JtKCkuaW52ZXJ0U2VsZigpOwoKICByZXR1cm4gbmV3IFBvaW50KHggKiBNLmEgKyB5ICogTS5jICsgTS5lLCB4ICogTS5iICsgeSAqIE0uZCArIE0uZik7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIG1hdHJpeCwgYmFzZWQgb24gYXBwbHlpbmc6CiAqCiAqICAgICAgIHwgYSBiIGMgfAogKiAgIG0gPSB8IGQgZSBmIHwKICogICAgICAgfCAwIDAgMSB8CiAqCiAqIFdpdGggdGhlIHBhcmFtZXRlcnMgZGVmYXVsdGluZyB0byB0aGUgaWRlbnRpdHkgbWF0cml4LgogKgogKiBTZWUgdGhlIGZvbGxvd2luZyBNRE4gYXJ0aWNsZSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHRoaXMgZnVuY3Rpb246CiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvdHJhbnNmb3JtCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhIChkZWZhdWx0ID0gMSkKICogQHBhcmFtIHtudW1iZXJ9IGIgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0ge251bWJlcn0gYyAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSB7bnVtYmVyfSBkIChkZWZhdWx0ID0gMCkKICogQHBhcmFtIHtudW1iZXJ9IGUgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0ge251bWJlcn0gZiAoZGVmYXVsdCA9IDApCiAqCiAqIEBzZWUge0BsaW5rIHJlc2V0VHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gdHJhbnNmb3JtKGEgPSAxLCBiID0gMCwgYyA9IDAsIGQgPSAwLCBlID0gMSwgZiA9IDApIHsKICBfX2N0eC50cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7Cn0KCi8qKgogKiBUcmFuc2xhdGUgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIGJ5IHNvbWUgYW1vdW50IG9mIHggYW5kIHkgdW5pdHMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICBwb2ludCgwLDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSB4IHZhbHVlIGluIHBpeGVscyB0byBiZSB0cmVhdGVkIGFzIHRoZSBuZXcgInplcm8iCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSB5IHZhbHVlIGluIHBpeGVscyB0byBiZSB0cmVhdGVkIGFzIHRoZSBuZXcgInplcm8iCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSB7eCx5fSBjb29yZGluYXRlIHRvIGJlIHRyZWF0ZWQgYXMgdGhlIG5ldyAiemVybyIKICoKICogQHNlZSB7QGxpbmsgdHJhbnNmb3JtfQogKiBAc2VlIHtAbGluayByZXNldFRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHRyYW5zbGF0ZSh4ID0gMCwgeSA9IDApIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICBfX2N0eC50cmFuc2xhdGUoeCwgeSk7Cn0KCi8qKgogKiBDb252ZXJ0IGFuIGluLWNhbnZhcyAidHJhbnNmb3JtZWQiIGNvb3JkaW5hdGUgaW50byBpdHMKICogY29ycmVzcG9uZGluZyAic2NyZWVuIiAoaS5lLiBicm93c2VyIGNhbnZhcyBvZmZzZXQpIGNvb3JkaW5hdGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHBsYXkoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpOwogKgogKiAgICAgICByb3RhdGUobWlsbGlzKCkgLyAyMDAwKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBjb25zdCBwID0gbmV3IFBvaW50KDMwLCAwKTsKICogICAgICAgcG9pbnQocCk7CiAqICAgICAgIHRleHQoYCR7cC54fSwke3AueX1gLCBwLnggKyAxMCwgcC55ICsgMTApOwogKgogKiAgICAgICBjb25zdCB7eCwgeX0gPSB3b3JsZFRvU2NyZWVuKHApOwogKiAgICAgICByZXNldFRyYW5zZm9ybSgpOwogKiAgICAgICBzZXRGb250U2l6ZSgxNik7CiAqICAgICAgIHRleHQoYCR7eC50b0ZpeGVkKCl9LCR7eS50b0ZpeGVkKCl9YCwgeCAtIDI1LCB5IC0gMTUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSB3b3JsZCBjb29yZGluYXRlJ3MgeCB2YWx1ZSBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHdvcmxkIGNvb3JkaW5hdGUncyB5IHZhbHVlIGluIHBpeGVscwogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwIFRoZSBzY3JlZW4ge3gseX0gY29vcmRpbmF0ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgd29ybGQge3gseX0gY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwIFRoZSBzY3JlZW4ge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBwcm9qZWN0fQogKiBAc2VlIHtAbGluayBzY3JlZW5Ub1dvcmxkfQogKi8KZnVuY3Rpb24gd29ybGRUb1NjcmVlbih4LCB5KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIGxldCBNID0gX19jdHguZ2V0VHJhbnNmb3JtKCk7CgogIHJldHVybiBuZXcgUG9pbnQoeCAqIE0uYSArIHkgKiBNLmMgKyBNLmUsIHggKiBNLmIgKyB5ICogTS5kICsgTS5mKTsKfQo="),w=class extends E{static{f(this,"GraphicsElement")}handleAttributeChange(...e){}handleChildChanges(...e){}connectedCallback(){super.connectedCallback(),this.label=document.createElement("label"),this.title||(console.warn("<graphics-element> is missing a title attribute. Always caption your figures."),this.title=""),this.label.textContent=this.title,B(this)?this.loadSource():new IntersectionObserver((e,t)=>e.forEach(r=>{r.isIntersecting&&(this.loadSource(),t.disconnect())}),{threshold:.1,rootMargin:`${window.innerHeight}px`}).observe(this)}getStyle(){return`
:host([hidden]) { display: none; }
style { display: none; }
.top-title { display: flex; flex-direction: row; justify-content: space-between; }
canvas { touch-action: none; user-select: none; position: relative; z-index: 1; display: block; margin: auto; border-radius: 0; box-sizing: content-box !important; border: 1px solid lightgrey;
&.crisp { image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }
&:focus { border: 1px solid red; }}
a { &.view-source { font-size: 60%; text-decoration: none;
&.plus { padding-left: 0.5em; }}}
button.reset { font-size: 0.5em; top: -0.35em; position: relative; }
label:not(:empty) { display: block; font-style: italic; font-size: 0.9em; text-align: right; padding-right: 1em; margin-top: 0.35em; }
`}async loadSource(e,t=this.width,r=this.height,$){if(!t&&!r&&(t=parseFloat(this.getAttribute("width")),r=parseFloat(this.getAttribute("height")),isNaN(t)&&(t=void 0),isNaN(r)&&(r=void 0)),e){if(typeof e=="function")return console.warn(".loadSource() called with a function rather than string data: use .loadFromFunction() instead."),this.loadFromFunction(e)}else if(this.userCode)e=this.userCode;else{let s=this.getAttribute("src");if(s)e=await(await fetch(s)).text();else{let o=this.querySelector("graphics-source");o?e=o.textContent:e=`function setup() {
}
function draw() {
}
`}}if(this.userCode=e,!$)if(this.additionalSources)$=this.additionalSources;else{let s=this.querySelectorAll("source");$=await Promise.all(Array.from(s).map(o=>fetch(o.src).then(g=>g.text())))}this.additionalSources=$;let x=this.userCode;this.additionalSources.length>0&&(x=this.loadAdditionalSources(this.userCode,this.additionalSources));let l=x.matchAll(/addSlider\(['"`](.*)['"`]/g),i=[];for(let s of l)i.push(s[1]),x=x.replace(s[0],s[0]+`, (v) => (${s[1]} = v)`);if(i.length&&(x="let "+i.join(", ")+`;
`+x),x=x.replaceAll(/ from ['"].([^'"]+)['"]/g,` from "${k(location.href)}/$1"`),x.includes("function setup()")||(x=`function setup() {
}
`+x),!x.includes("setSize(")){let s="setSize();";t&&r&&(s=`setSize(${t}, ${r});`),x=x.replace("function setup() {",`function setup() {
  ${s}`)}import(`data:text/javascript;base64,${S(['"use strict";',`import { BSpline, Point, Circle, Vector, Matrix, CSS_COLOR_MAP } from "${_}";`,`const __randomId = "${Date.now()}";`,W,x,"export { reset as start, __canvas as canvas, halt, highlight, __getDescription as getDescription }"].join(`
`))}`).then(async s=>{let{start:o,canvas:g,halt:c,highlight:b,getDescription:L}=s;this.canvas=g,this.halt=()=>c(),this.highlight=A=>b(A),this.render();let{width:u,height:d}=await o(this),m="graphics-element-description";this.querySelector(`.${m}`)?.remove(),this.querySelector("p")||this.handleGraphicsDescription(m,L),u&&d&&(this.style.width="",this.style.height="",this.width=u,this.height=d,this.setAttribute("width",u),this.setAttribute("height",d)),this.dispatchEvent(new CustomEvent("load")),this.onload&&this.onload()})}handleGraphicsDescription(e,t=()=>{}){try{let r=t();if(r){let $=new DocumentFragment,x=document.createElement("div");x.classList.add(e),$.append(x),x.innerHTML=r,this.append(x),this.crossLink(!0)}}catch(r){console.error(r)}}loadAdditionalSources(e,t){if(!t)return e;let r=new Array(t.length);return e+`
`+t.map(($,x)=>$.replace("function setup()",`function setup${x+1}()`).replace("function draw()",`function draw${x+1}()`)).join(`
`)+`
function __more_setup() { ${[...r].map(($,x)=>`if (typeof setup${x+1} !== \`undefined\`) setup${x+1}();`).join(`
`)} }
function __more_draw() { ${[...r].map(($,x)=>`if (typeof draw${x+1} !== \`undefined\`) draw${x+1}();`).join(`
`)} }
`}loadFromFunction(e){let t=e.toString();this.reset(t.substring(t.indexOf("{")+1,t.lastIndexOf("}")))}reset(e,t=[]){this.halt&&this.halt(),this.querySelector("button.remove-color")?.remove(),this.loadSource(e||this.userCode,this.width,this.height,t||this.additionalSources)}render(){super.render();let e=this._slot.parentNode;this.canvas&&e.insertBefore(this.canvas,this._slot),this.label&&e.insertBefore(this.label,this._slot);let t=document.createElement("div");t.classList.add("top-title");let r=document.createElement("span");r.classList.add("sources"),t.append(r);let $=document.createElement("button");$.classList.add("reset"),$.textContent=this.getAttribute("reset")||"reset",$.addEventListener("click",()=>this.reset()),t.append($);let x=this.getAttribute("src");if(x||(x=`data:text/plain;base64,${S(this.userCode)}`),x){let i=document.createElement("a");i.classList.add("view-source"),i.textContent=this.getAttribute("viewSource")||"view source",i.href=x,i.target="_blank",r.append(i),x.startsWith("data")&&(delete i.href,delete i.target,i.classList.add("fake-source-link"),i.addEventListener("click",()=>{let n=`<iframe width="100%" height="100%" src="${x}"></iframe>`,s=window.open(""),{document:o}=s;o.open(),o.write(n),o.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),o.close()}))}let l=this.querySelectorAll("source");l.length===0&&(l=(this.additionalSources??[]).map(i=>({src:`data:text/plain;base64,${S(i)}`}))),l.length&&l.forEach((i,n)=>{let{src:s}=i,o=document.createElement("a");o.classList.add("view-source","plus"),o.textContent=`[+${n+1}]`,o.href=s,o.target="_blank",r.append(o),s.startsWith("data")&&(delete o.href,delete o.target,o.classList.add("fake-source-link"),o.addEventListener("click",()=>{let g=`<iframe width="100%" height="100%" src="${s}"></iframe>`,c=window.open(""),{document:b}=c;b.open(),b.write(g),b.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),b.close()}))}),this.label&&e.insertBefore(t,this.canvas),this.crossLink()}crossLink(e){if(e&&(this.crossLinked=!1),this.crossLinked)return;this.crossLinked=!0;let t=!1;if(this.querySelectorAll("p").forEach(r=>{r.querySelectorAll("*").forEach($=>{if(!y.includes($.tagName))return;t=!0;let x;$.classList.remove("calm"),$.addEventListener("pointerenter",()=>{x??=getComputedStyle($)["-webkit-text-stroke-color"],this.highlight?.(x)}),$.addEventListener("pointerleave",()=>this.highlight?.(!1))})}),t){let r=document.createElement("button");r.textContent="remove colors",r.classList.add("remove-color"),r.addEventListener("click",()=>{this.querySelectorAll("p").forEach($=>{$.querySelectorAll("*").forEach(x=>{y.includes(x.tagName)&&x.classList.add("calm")})}),r.remove()}),this.append(r)}}},T=class extends E{static{f(this,"GraphicsSource")}constructor(){super(),this.style.display="none"}handleAttributeChange(){}handleChildChanges(){}};await E.register(w),await E.register(T);export{p as BSpline,v as CSS_COLOR_MAP,O as Circle,N as Matrix,R as Point,I as Vector};
