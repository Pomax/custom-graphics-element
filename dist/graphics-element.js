var v=Object.defineProperty;var l=(n,e)=>v(n,"name",{value:e,configurable:!0});var T="registered as custom element";function y(n,e){console.warn(`missing implementation for ${e}(...data) in ${n.__proto__.constructor.name}`)}l(y,"NotImplemented");function G(n){return n.prototype.constructor.name.replace(/([A-Z])([a-z])/g,(e,x,t,$)=>{let r=`${x.toLowerCase()}${t}`;return $>0?`-${r}`:r})}l(G,"getElementTagName");var h=class extends HTMLElement{static{l(this,"CustomElement")}static register(e){if(!e[T]){let x=e.tagName||G(e);return customElements.define(x,e),e[T]=!0,customElements.whenDefined(x)}return Promise.resolve()}static get tagName(){return G(this)}constructor(e={}){super(),customElements.resolveScope||(customElements.resolveScope=function($){try{return $.getRootNode().host}catch(r){console.warn(r)}return window}),this._options=e;let x={childList:$=>{this.handleChildChanges(Array.from($.addedNodes),Array.from($.removedNodes)),this.render()},attributes:$=>{this.handleAttributeChange($.attributeName,$.oldValue,this.getAttribute($.attributeName)),this.render()}};this._observer=new MutationObserver($=>{this.isConnected&&$.forEach(r=>{x[r.type](r)})}),this._observer.observe(this,{childList:!0,attributes:!0});let t={mode:"open"};this._shadow=this.attachShadow(t),this._style=document.createElement("style"),this._style.textContent=this.getStyle(),this._options.header!==!1&&(this._header=document.createElement("header")),this._options.slot!==!1&&this._options.void!==!0&&(this._slot=document.createElement("slot")),this._options.footer!==!1&&(this._footer=document.createElement("footer"))}connectedCallback(){this.render()}handleChildChanges(e,x){this._options.void||y(this,"handleChildChanges")}handleAttributeChange(e,x,t){y(this,"handleAttributeChange")}getStyle(){return""}render(){this._shadow.innerHTML="",this._shadow.append(this._style),this._options.header!==!1&&this._shadow.append(this._header),this._options.slot!==!1&&this._shadow.append(this._slot),this._options.footer!==!1&&this._shadow.append(this._footer)}};var O=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TRANSPARENT","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN"],w={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb(0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb(95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb(0, 255, 255)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb(0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(128, 128, 128)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb(75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb(0, 255, 0)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",rebeccapurple:"rgb(102, 51, 153)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb(65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb(0, 255, 127)",steelblue:"rgb(70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb(0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",transparent:"rgba(0,0,0,0)",turquoise:"rgb(64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)",ALICEBLUE:"rgb(240, 248, 255)",ANTIQUEWHITE:"rgb(250, 235, 215)",AQUA:"rgb(0, 255, 255)",AQUAMARINE:"rgb(127, 255, 212)",AZURE:"rgb(240, 255, 255)",BEIGE:"rgb(245, 245, 220)",BISQUE:"rgb(255, 228, 196)",BLACK:"rgb(0, 0, 0)",BLANCHEDALMOND:"rgb(255, 235, 205)",BLUE:"rgb(0, 0, 255)",BLUEVIOLET:"rgb(138, 43, 226)",BROWN:"rgb(165, 42, 42)",BURLYWOOD:"rgb(222, 184, 135)",CADETBLUE:"rgb(95, 158, 160)",CHARTREUSE:"rgb(127, 255, 0)",CHOCOLATE:"rgb(210, 105, 30)",CORAL:"rgb(255, 127, 80)",CORNFLOWERBLUE:"rgb(100, 149, 237)",CORNSILK:"rgb(255, 248, 220)",CRIMSON:"rgb(220, 20, 60)",CYAN:"rgb(0, 255, 255)",DARKBLUE:"rgb(0, 0, 139)",DARKCYAN:"rgb(0, 139, 139)",DARKGOLDENROD:"rgb(184, 134, 11)",DARKGRAY:"rgb(169, 169, 169)",DARKGREEN:"rgb(0, 100, 0)",DARKGREY:"rgb(169, 169, 169)",DARKKHAKI:"rgb(189, 183, 107)",DARKMAGENTA:"rgb(139, 0, 139)",DARKOLIVEGREEN:"rgb(85, 107, 47)",DARKORANGE:"rgb(255, 140, 0)",DARKORCHID:"rgb(153, 50, 204)",DARKRED:"rgb(139, 0, 0)",DARKSALMON:"rgb(233, 150, 122)",DARKSEAGREEN:"rgb(143, 188, 143)",DARKSLATEBLUE:"rgb(72, 61, 139)",DARKSLATEGRAY:"rgb(47, 79, 79)",DARKSLATEGREY:"rgb(47, 79, 79)",DARKTURQUOISE:"rgb(0, 206, 209)",DARKVIOLET:"rgb(148, 0, 211)",DEEPPINK:"rgb(255, 20, 147)",DEEPSKYBLUE:"rgb(0, 191, 255)",DIMGRAY:"rgb(105, 105, 105)",DIMGREY:"rgb(105, 105, 105)",DODGERBLUE:"rgb(30, 144, 255)",FIREBRICK:"rgb(178, 34, 34)",FLORALWHITE:"rgb(255, 250, 240)",FORESTGREEN:"rgb(34, 139, 34)",FUCHSIA:"rgb(255, 0, 255)",GAINSBORO:"rgb(220, 220, 220)",GHOSTWHITE:"rgb(248, 248, 255)",GOLD:"rgb(255, 215, 0)",GOLDENROD:"rgb(218, 165, 32)",GRAY:"rgb(128, 128, 128)",GREEN:"rgb(0, 128, 0)",GREENYELLOW:"rgb(173, 255, 47)",GREY:"rgb(128, 128, 128)",HONEYDEW:"rgb(240, 255, 240)",HOTPINK:"rgb(255, 105, 180)",INDIANRED:"rgb(205, 92, 92)",INDIGO:"rgb(75, 0, 130)",IVORY:"rgb(255, 255, 240)",KHAKI:"rgb(240, 230, 140)",LAVENDER:"rgb(230, 230, 250)",LAVENDERBLUSH:"rgb(255, 240, 245)",LAWNGREEN:"rgb(124, 252, 0)",LEMONCHIFFON:"rgb(255, 250, 205)",LIGHTBLUE:"rgb(173, 216, 230)",LIGHTCORAL:"rgb(240, 128, 128)",LIGHTCYAN:"rgb(224, 255, 255)",LIGHTGOLDENRODYELLOW:"rgb(250, 250, 210)",LIGHTGRAY:"rgb(211, 211, 211)",LIGHTGREEN:"rgb(144, 238, 144)",LIGHTGREY:"rgb(211, 211, 211)",LIGHTPINK:"rgb(255, 182, 193)",LIGHTSALMON:"rgb(255, 160, 122)",LIGHTSEAGREEN:"rgb(32, 178, 170)",LIGHTSKYBLUE:"rgb(135, 206, 250)",LIGHTSLATEGRAY:"rgb(119, 136, 153)",LIGHTSLATEGREY:"rgb(119, 136, 153)",LIGHTSTEELBLUE:"rgb(176, 196, 222)",LIGHTYELLOW:"rgb(255, 255, 224)",LIME:"rgb(0, 255, 0)",LIMEGREEN:"rgb(50, 205, 50)",LINEN:"rgb(250, 240, 230)",MAGENTA:"rgb(255, 0, 255)",MAROON:"rgb(128, 0, 0)",MEDIUMAQUAMARINE:"rgb(102, 205, 170)",MEDIUMBLUE:"rgb(0, 0, 205)",MEDIUMORCHID:"rgb(186, 85, 211)",MEDIUMPURPLE:"rgb(147, 112, 219)",MEDIUMSEAGREEN:"rgb(60, 179, 113)",MEDIUMSLATEBLUE:"rgb(123, 104, 238)",MEDIUMSPRINGGREEN:"rgb(0, 250, 154)",MEDIUMTURQUOISE:"rgb(72, 209, 204)",MEDIUMVIOLETRED:"rgb(199, 21, 133)",MIDNIGHTBLUE:"rgb(25, 25, 112)",MINTCREAM:"rgb(245, 255, 250)",MISTYROSE:"rgb(255, 228, 225)",MOCCASIN:"rgb(255, 228, 181)",NAVAJOWHITE:"rgb(255, 222, 173)",NAVY:"rgb(0, 0, 128)",OLDLACE:"rgb(253, 245, 230)",OLIVE:"rgb(128, 128, 0)",OLIVEDRAB:"rgb(107, 142, 35)",ORANGE:"rgb(255, 165, 0)",ORANGERED:"rgb(255, 69, 0)",ORCHID:"rgb(218, 112, 214)",PALEGOLDENROD:"rgb(238, 232, 170)",PALEGREEN:"rgb(152, 251, 152)",PALETURQUOISE:"rgb(175, 238, 238)",PALEVIOLETRED:"rgb(219, 112, 147)",PAPAYAWHIP:"rgb(255, 239, 213)",PEACHPUFF:"rgb(255, 218, 185)",PERU:"rgb(205, 133, 63)",PINK:"rgb(255, 192, 203)",PLUM:"rgb(221, 160, 221)",POWDERBLUE:"rgb(176, 224, 230)",PURPLE:"rgb(128, 0, 128)",REBECCAPURPLE:"rgb(102, 51, 153)",RED:"rgb(255, 0, 0)",ROSYBROWN:"rgb(188, 143, 143)",ROYALBLUE:"rgb(65, 105, 225)",SADDLEBROWN:"rgb(139, 69, 19)",SALMON:"rgb(250, 128, 114)",SANDYBROWN:"rgb(244, 164, 96)",SEAGREEN:"rgb(46, 139, 87)",SEASHELL:"rgb(255, 245, 238)",SIENNA:"rgb(160, 82, 45)",SILVER:"rgb(192, 192, 192)",SKYBLUE:"rgb(135, 206, 235)",SLATEBLUE:"rgb(106, 90, 205)",SLATEGRAY:"rgb(112, 128, 144)",SLATEGREY:"rgb(112, 128, 144)",SNOW:"rgb(255, 250, 250)",SPRINGGREEN:"rgb(0, 255, 127)",STEELBLUE:"rgb(70, 130, 180)",TAN:"rgb(210, 180, 140)",TEAL:"rgb(0, 128, 128)",THISTLE:"rgb(216, 191, 216)",TOMATO:"rgb(255, 99, 71)",TRANSPARENT:"rgba(0,0,0,0)",TURQUOISE:"rgb(64, 224, 208)",VIOLET:"rgb(238, 130, 238)",WHEAT:"rgb(245, 222, 179)",WHITE:"rgb(255, 255, 255)",WHITESMOKE:"rgb(245, 245, 245)",YELLOW:"rgb(255, 255, 0)",YELLOWGREEN:"rgb(154, 205, 50)"};function S(n,e,x,t,$,m,E){var i,s,f,a,o=x.length,g=x[0].length;if(e<1)throw new Error("degree must be at least 1 (linear)");if(e>o-1)throw new Error("degree must be less than or equal to point count - 1");if(!$)for($=[],i=0;i<o;i++)$[i]=1;if($.length<x.length&&($=$.concat($.slice(0,e))),t){if(t.length!==o+e+1)throw new Error("bad knot vector length")}else{var t=[];for(i=0;i<o+e+1;i++)t[i]=i}t.length===x.length&&(t=t.concat(t.slice(0,e)));var d=[e,t.length-1-e],A=t[d[0]],p=t[d[1]];if(E||(n=n*(p-A)+A),n<A||n>p)throw new Error("out of bounds");for(f=d[0];f<d[1]&&!(n>=t[f]&&n<=t[f+1]);f++);var b=[];for(i=0;i<o;i++){for(b[i]=[],s=0;s<g;s++)b[i][s]=x[i][s]*$[i];b[i][g]=$[i]}var u;for(a=1;a<=e+1;a++)for(i=f;i>f-e-1+a;i--)for(u=(n-t[i])/(t[i+e+1-a]-t[i]),s=0;s<g+1;s++)b[i][s]=(1-u)*b[i-1][s]+u*b[i][s];var m=m||[];for(i=0;i<g;i++)m[i]=b[f][i]/b[f][g];return m}l(S,"interpolate");var c=3,L=class{static{l(this,"BSpline")}constructor(e,x=!0){this.points=e,this.points=e.map(t=>t instanceof Array?t:[t.x,t.y]),this.formKnots(x),this.formWeights()}getLUT(e=100){let x=e-1;return[...new Array(e)].map((t,$)=>{let r=S($/x,c,this.points,this.knots,this.weights);return{x:r[0],y:r[1]}})}formKnots(e=!1){if(!e)return this.formUniformKnots();let x=[],t=this.points.length,$=t-c;for(let r=1;r<t-c;r++)x.push(r+c);for(let r=0;r<=c;r++)x=[c].concat(x);for(let r=0;r<=c;r++)x.push($+c);return this.knots=x}formUniformKnots(){return this.knots=[...new Array(this.points.length+c+1)].map((e,x)=>x)}formWeights(){return this.weights=this.points.map(e=>1)}};function I(n){let e=new TextEncoder().encode(n),x=String.fromCodePoint(...e);return btoa(x)}l(I,"base64");function U(n){let e=atob(n),x=Uint8Array.from(e,t=>t.codePointAt(0));return new TextDecoder().decode(x)}l(U,"decode64");function C(n){let e=/^(.*)\/([^.]+(\.([^\/?#]+))+)(\?[^#]*)?(#.*)?$/,x=n.match(e);if(x!==null){let{[1]:t,[2]:$,[4]:r}=x;n=t}return n}l(C,"getURLbase");function M(n){if(typeof window>"u"||typeof document>"u")return!0;var e=n.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}l(M,"isInViewport");var k=String(import.meta.url),B=U("Y29uc3QgQUxQSEFCRVRJQyA9IGBhbHBoYWJldGljYDsKY29uc3QgQVVUTyA9IGBhdXRvYDsKY29uc3QgQk9UVE9NID0gYGJvdHRvbWA7CmNvbnN0IEJPVFRPTV9MRUZUID0gYGJvdHRvbi1sZWZ0YDsKY29uc3QgQk9UVE9NX1JJR0hUID0gYGJvdHRvbS1yaWdodGA7CmNvbnN0IENFTlRFUiA9IGBjZW50ZXJgOwpjb25zdCBDT05TVFJBSU4gPSB0cnVlOwpjb25zdCBDUk9TUyA9IGBjcm9zc2hhaXJgOwpjb25zdCBFTkQgPSBgZW5kYDsKY29uc3QgSEFORCA9IGBwb2ludGVyYDsKY29uc3QgSEFOR0lORyA9IGBoYW5naW5nYDsKY29uc3QgSURFT0dSQVBISUMgPSBgaWRlb2dyYXBoaWNgOwpjb25zdCBMRUZUID0gYGxlZnRgOwpjb25zdCBNSURETEUgPSBgbWlkZGxlYDsKY29uc3QgUE9JTlRFUiA9IGBkZWZhdWx0YDsKY29uc3QgUklHSFQgPSBgcmlnaHRgOwpjb25zdCBTVEFSVCA9IGBzdGFydGA7CmNvbnN0IFRPUCA9IGB0b3BgOwpjb25zdCBUT1BfTEVGVCA9IGB0b3AtbGVmdGA7CmNvbnN0IFRPUF9SSUdIVCA9IGB0b3AtcmlnaHRgOwoKLy8gImludGVybmFsIiB2YXJzCgpsZXQgX19jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBjYW52YXNgKTsKX19jYW52YXMudGFiSW5kZXggPSAwOwpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBwb2ludGVyZG93bmAsICgpID0+IF9fY2FudmFzLmZvY3VzKCkpOwpsZXQgX19jdHggPSBfX2NhbnZhcy5nZXRDb250ZXh0KGAyZGApOwoKbGV0IF9fY3VycmVudF9jdXJzb3I7CmxldCBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19jdXJyZW50X2h1ZTsKbGV0IF9fZHJhd19ncmlkOwpsZXQgX19kcmF3aW5nOwpsZXQgX19lbGVtZW50OwpsZXQgX19maW5pc2hlZF9zZXR1cDsKbGV0IF9fZmlyc3Q7CmxldCBfX2ZvbnQ7CmxldCBfX2dyaWRfY29sb3I7CmxldCBfX2dyaWRfc3BhY2luZzsKbGV0IF9faGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19sYXN0X2ZyYW1lOwpsZXQgX19tb3ZhYmxlX3BvaW50czsKbGV0IF9fcmVkcmF3aW5nOwpsZXQgX19zaGFwZTsKbGV0IF9fc3RhcnRfdGltZTsKbGV0IF9fc3R5bGVfc3RhY2s7CmxldCBfX3RleHRTdHJva2U7Cgpjb25zdCBfX3BybmcgPSBuZXcgKGNsYXNzIHsKICBjb25zdHJ1Y3RvcihzZWVkID0gRGF0ZS5ub3coKSkgewogICAgdGhpcy5hID0gc2VlZDsKICB9CiAgcmVzZWVkKHNlZWQpIHsKICAgIHRoaXMuYSA9IHNlZWQ7CiAgfQogIG5leHQoKSB7CiAgICAvLyBTcGxpdE1peDMyLCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc1OTMzMTYvNzQwNTUzCiAgICBsZXQgeyBhIH0gPSB0aGlzOwogICAgYSB8PSAwOwogICAgYSA9IChhICsgMHg5ZTM3NzliOSkgfCAwOwogICAgbGV0IHQgPSBhIF4gKGEgPj4+IDE2KTsKICAgIHQgPSBNYXRoLmltdWwodCwgMHgyMWYwYWFhZCk7CiAgICB0ID0gdCBeICh0ID4+PiAxNSk7CiAgICB0ID0gTWF0aC5pbXVsKHQsIDB4NzM1YTJkOTcpOwogICAgdGhpcy5hID0gYTsKICAgIHJldHVybiAoKHQgPSB0IF4gKHQgPj4+IDE1KSkgPj4+IDApIC8gNDI5NDk2NzI5NjsKICB9Cn0pKCk7Cgphc3luYyBmdW5jdGlvbiBfX3Jlc2V0KGVsZW1lbnQgPSBfX2VsZW1lbnQpIHsKICBfX2VsZW1lbnQgPSBlbGVtZW50OwoKICAvLyBkZWZhdWx0IHZhcmlhYmxlIHZhbHVlcwogIF9fY3VycmVudF9jdXJzb3IgPSBgYXV0b2A7CiAgX19jdXJyZW50X2hpZ2hsaWdodF9jb2xvciA9IGByZ2IoMCwyNTQsMTI0KWA7CiAgX19jdXJyZW50X2h1ZSA9IDA7CiAgX19kcmF3X2dyaWQgPSB0cnVlOwogIF9fZHJhd2luZyA9IGZhbHNlOwogIF9fZmluaXNoZWRfc2V0dXAgPSBmYWxzZTsKICBfX2ZvbnQgPSB7IGZhbWlseTogYHNhbnMtc2VyaWZgLCBzaXplOiAxNiwgd2VpZ2h0OiA0MDAgfTsKICBfX2dyaWRfY29sb3IgPSBgbGlnaHRncmV5YDsKICBfX2dyaWRfc3BhY2luZyA9IDIwOwogIF9faGlnaGxpZ2h0X2NvbG9yID0gZmFsc2U7CiAgX19tb3ZhYmxlX3BvaW50cyA9IFtdOwogIF9fcmVkcmF3aW5nID0gZmFsc2U7CiAgX19zaGFwZSA9IHVuZGVmaW5lZDsKICBfX3N0YXJ0X3RpbWUgPSBEYXRlLm5vdygpOwogIF9fc3R5bGVfc3RhY2sgPSBbXTsKICBfX3RleHRTdHJva2UgPSBgdHJhbnNwYXJlbnRgOwoKICBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwogIHBsYXlpbmcgPSBmYWxzZTsKICBmcmFtZSA9IDA7CiAgcG9pbnRlci54ID0gMDsKICBwb2ludGVyLnkgPSAwOwogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGtleWJvYXJkKS5mb3JFYWNoKChuKSA9PiBkZWxldGUga2V5Ym9hcmRbbl0pOwoKICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWdlbmVyYXRlIHRoZXNlOgogIGNsZWFyU2xpZGVycygpOwogIGNsZWFyQnV0dG9ucygpOwoKICAvLyBydW4gc2V0dXAKICBhd2FpdCBfX3NldHVwKCk7CiAgX19maW5pc2hlZF9zZXR1cCA9IHRydWU7CgogIC8vIHJ1biBmaXJzdCBkcmF3CiAgX19sYXN0X2ZyYW1lID0gRGF0ZS5ub3coKTsKICBhd2FpdCBfX2RyYXcoKTsKCiAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9Owp9CgpmdW5jdGlvbiBfX2hhbHQoKSB7CiAgcGxheWluZyA9IGZhbHNlOwogIF9fY2FudmFzID0gdW5kZWZpbmVkOwogIF9fY3R4ID0gdW5kZWZpbmVkOwogIF9fZmluaXNoZWRfc2V0dXAgPSBmYWxzZTsKICBfX2RyYXdpbmcgPSB0cnVlOwogIF9fcmVkcmF3aW5nID0gdHJ1ZTsKICBfX2ZpcnN0ID0gdW5kZWZpbmVkOwogIF9fbW92YWJsZV9wb2ludHMgPSB1bmRlZmluZWQ7CiAgX19jdXJyZW50X2N1cnNvciA9IHVuZGVmaW5lZDsKICBfX2N1cnJlbnRfaHVlID0gMDsKICBfX2ZvbnQgPSB1bmRlZmluZWQ7CiAgX19zdGFydF90aW1lID0gMDsKICBjbGVhclNsaWRlcnMoKTsKICBjbGVhckJ1dHRvbnMoKTsKfQoKZnVuY3Rpb24gX19nZXREZXNjcmlwdGlvbigpIHsKICBpZiAodHlwZW9mIGdldERlc2NyaXB0aW9uICE9PSBgdW5kZWZpbmVkYCkgcmV0dXJuIGdldERlc2NyaXB0aW9uKCk7Cn0KCmFzeW5jIGZ1bmN0aW9uIF9fc2V0dXAoKSB7CiAgaWYgKHR5cGVvZiBzZXR1cCAhPT0gYHVuZGVmaW5lZGApIGF3YWl0IHNldHVwKCk7CiAgaWYgKHR5cGVvZiBfX21vcmVfc2V0dXAgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBfX21vcmVfc2V0dXAoKTsKICBpZiAoIXdpZHRoICYmICFoZWlnaHQpIHNldFNpemUoKTsKfQoKYXN5bmMgZnVuY3Rpb24gX19kcmF3KCkgewogIGlmICghX19maW5pc2hlZF9zZXR1cCkgcmV0dXJuOwogIGlmICghX19kcmF3aW5nKSB7CiAgICBfX2RyYXdpbmcgPSB0cnVlOwogICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTsKICAgIGZyYW1lRGVsdGEgPSBub3cgLSBfX2xhc3RfZnJhbWU7CiAgICBmcmFtZSsrOwogICAgcmVzZXRUcmFuc2Zvcm0oKTsKICAgIGlmICh0eXBlb2YgZHJhdyAhPT0gYHVuZGVmaW5lZGApIGF3YWl0IGRyYXcoKTsKICAgIGlmICh0eXBlb2YgX19tb3JlX2RyYXcgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBfX21vcmVfZHJhdygpOwogICAgX19kcmF3aW5nID0gZmFsc2U7CiAgICBfX2xhc3RfZnJhbWUgPSBub3c7CiAgICBpZiAocGxheWluZykgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IF9fZHJhdygpKTsKICB9Cn0KLyoqCiAqIFRoZSBjdXJyZW50IGZyYW1lIG51bWJlcgogKgogKiBAY29uc3RhbnQge251bWJlcn0KICovCmxldCBmcmFtZSA9IDA7CgovKioKICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGxhc3QgZnJhbWUuCiAqCiAqIEBjb25zdGFudCB7bnVtYmVyfQogKi8KbGV0IGZyYW1lRGVsdGEgPSAwOwoKLyoqCiAqIFRoZSBoZWlnaHQgb2YgdGhlIGNhbnZhcyBpbiBwaXhlbHMKICoKICogQGNvbnN0YW50IHtudW1iZXJ9CiAqLwpsZXQgaGVpZ2h0ID0gMDsKCi8qKgogKiBUaGUgd2lkdGggb2YgdGhlIGNhbnZhcyBpbiBwaXhlbHMKICoKICogQGNvbnN0YW50IHtudW1iZXJ9CiAqLwpsZXQgd2lkdGggPSAwOwoKLyoqCiAqIFRoZSBjdXJyZW50IHBsYXkgc3RhdGUKICoKICogQGNvbnN0YW50IHtib29sZWFufQogKi8KbGV0IHBsYXlpbmcgPSBmYWxzZTsKCi8qKgogKiBUaGUgYHBvaW50ZXJgIG9iamVjdCByZXByZXNlbnRzIHRoZSBtb3VzZSBjdXJzb3IgKHdoZW4gdXNpbmcKICogYSBtb3VzZSkgb3IgZmluZ2VyIHBvc2l0aW9uIChmb3IgdG91Y2ggZGV2aWNlcyksIGFuZCBtb2RlbHMKICogc2V2ZXJhbCBhc3BlY3RzOgogKgogKiAtIGBhY3RpdmVgIChib29sZWFuKSBXaGV0aGVyIHRoZSBwb2ludGVyIGlzIGV2ZW4gb24gb3Igb3ZlciB0aGUgY2FudmFzLgogKiAtIGB4YCAobnVtYmVyKSBUaGUgcG9pbnRlcidzIHggb2Zmc2V0IGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGNhbnZhcwogKiAtIGB5YCAobnVtYmVyKSBUaGUgcG9pbnRlcidzIHkgb2Zmc2V0IGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGNhbnZhcwogKiAtIGBkb3duYCAoYm9vbGVhbikgV2hldGhlciB0aGUgcG9pbnRlciBpcyAiZW5nYWdlZCIgb3Igbm90CiAqIC0gYGRyYWdgIChib29sZWFuKSBXaGV0aGVyIGEgY2xpY2svdG91Y2gtZHJhZyBpcyBpbiBwcm9ncmVzcwogKiAtIGBtYXJrYCAoe3gseX0pIFdoZW4gZHJhZ2dpbmcsIHRoaXMgcmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRlciAiZG93biIgZXZlbnQKICoKICogQGNvbnN0YW50IHtvYmplY3R9CiAqLwpjb25zdCBwb2ludGVyID0geyB4OiAwLCB5OiAwIH07CgovKioKICogSWYgYW55IHBvaW50cyB3ZXJlIHJlZ2lzdGVyZWQgYXMgbW92YWJsZSwgYW5kIHRoZSBwb2ludGVyIGlzCiAqIG5lYXIgZW5vdWdoIHRvIGEgbW92YWJsZSBwb2ludCwgdGhpcyB2YWx1ZSB3aWxsIHBvaW50IHRvCiAqIHRoYXQgbW92YWJsZSBwb2ludCwgb3IgYGZhbHNlYCBpZiB0aGUgcG9pbnRlciBpcyBub3QgbmVhcgogKiBhbnkgbW92YWJsZSBwb2ludCAob3IsIG9mIGNvdXJzZSwgdGhlcmUgYXJlIG5vIG1vdmFibGUgcG9pbnRzKQogKgogKiBAY29uc3RhbnQge1BvaW50TGlrZXxmYWxzZX0KICovCmxldCBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwoKLyoqCiAqIFRoZSBga2V5Ym9hcmRgIG9iamVjdCBpcyBhIHRydXRoIHRhYmxlIHRoYXQgY2FuIGJlIGNoZWNrZWQgdG8KICogc2VlIGlmIGFueSBrZXkgaXMgY3VycmVudGx5IHByZXNzZWQsIGFuZCBpZiBzbywgd2hlbiB0aGF0CiAqIGtleXByZXNzIHdhcyBpbml0aWF0ZWQsIGJ5IHN0b3Jpbmc6CiAqCiAqIGBgYAogKiB7CiAqICAgW2tleTpzdHJpbmddOiBkYXRldGltZQogKiB9CiAqIGBgYAogKgogKiBXaGVuIGEga2V5IGlzIHJlbGVhc2VkLCBpdHMgbWFwcGluZyBpcyByZW1vdmVkIGVudGlyZWx5LAogKiByYXRoZXIgdGhhbiBpdCBiZWluZyBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuCiAqCiAqIEBjb25zdGFudCB7b2JqZWN0fQogKi8KY29uc3Qga2V5Ym9hcmQgPSB7fTsKCi8vIGNvbnN0YW50cy4uLgpjb25zdCB7CiAgLyoqCiAgICogVGhlIHJhdGlvIG9mIGEgY2lyY2xlJ3MgY2lyY3VtZmVyZW5jZSB0byBpdHMgZGlhbWV0ZXIuCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGkKICAgKgogICAqIEBjb25zdGFudCB7bnVtYmVyfQogICAqCiAgICogQHNlZSB7QGxpbmsgVEFVfQogICAqLwogIFBJLAoKICAvKioKICAgKiBUaGUgYmFzZSBmb3IgdGhlIG5hdHVyYWwgbG9nYXJpdGhtLgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VfKG1hdGhlbWF0aWNhbF9jb25zdGFudCkKICAgKgogICAqIEBjb25zdGFudCB7bnVtYmVyfQogICAqLwogIEUsCn0gPSBNYXRoOwoKY29uc3QgewogIC8qKgogICAqIEEgdmVyeSBzbWFsbCB2YWx1ZSBmb3IgcGVyZm9ybWluZyBpbXByZWNpc2UgbWF0aCBvcGVyYXRpb25zCiAgICogc3VjaCBhcyBjaGVja2luZyB3aGV0aGVyIGEgdmFsdWUgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZQogICAqIGFzIHNvbWUgb3RoZXIgdmFsdWUuCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKi8KICBlcHNpbG9uLAoKICAvKioKICAgKiBBIHZlcnkgbGFyZ2UgdmFsdWUgdGhhdCBjYW4gc3RpbGwgYmUgdXNlZCB0byBkcmF3IHRoaW5ncwogICAqIG9uIHRoZSBjYW52YXMgKHN1Y2ggYXMgbGluZXMgZnJvbSAtaHVnZSB0byAraHVnZSkuCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKi8KICBodWdlLAoKICAvKioKICAgKiBUaGUgcmF0aW8gb2YgYSBjaXJjbGUncyBjaXJjdW1mZXJlbmNlIHRvIGl0cyByYWRpdXMsIGkuZS4gMipQSQogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1R1cm5fKGFuZ2xlKSNUYXVfcHJvcG9zYWxzCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKgogICAqIEBzZWUge0BsaW5rIFBJfQogICAqLwogIFRBVSwKfSA9IHsgZXBzaWxvbjogMWUtMTAsIGh1Z2U6IDFfMDAwXzAwMCwgVEFVOiBQSSAqIDIgfTsKLyoqCiAqIEVuc3VyZSB0aGF0IHRoZXJlIGlzIG5vIGJvcmRlciBhcm91bmQgdGhlIGNhbnZhcyBlbGVtZW50LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRCb3JkZXIoNSwgYHJlZGApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHRleHQoYGNsaWNrIG1lYCwgd2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlclVwKHgsIHkpIHsKICogICAgICAgc2V0Qm9yZGVyKDUsIGByZWRgKTsKICogICAgICAgcmVkcmF3KCkKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKHgsIHkpIHsKICogICAgICAgbm9Cb3JkZXIoKTsKICogICAgICAgcmVkcmF3KCkKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRCb3JkZXJ9CiAqLwpmdW5jdGlvbiBub0JvcmRlcigpIHsKICBzZXRCb3JkZXIoZmFsc2UpOwp9CgovKioKICogRGlzYWJsZSBib3RoIHN0cm9rZSBhbmQgZmlsbCBjb2xvci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICB0ZXh0KGBOb3cgeW91IHNlZSBtZWAsIHdpZHRoLzIsIGhlaWdodC8yIC0gMjUpOwogKiAgICAgICBub0NvbG9yKCk7CiAqICAgICAgIHRleHQoYE5vdyB5b3UgZG9uJ3RgLCB3aWR0aC8yLCBoZWlnaHQvMiArIDI1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRDb2xvcn0KICogQHNlZSB7QGxpbmsgbm9TdHJva2V9CiAqIEBzZWUge0BsaW5rIG5vRmlsbH0KICovCmZ1bmN0aW9uIG5vQ29sb3IoKSB7CiAgbm9GaWxsKCk7CiAgbm9TdHJva2UoKTsKfQoKLyoqCiAqIEhpZGUgdGhlIGN1cnNvci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgI0ZGMDJgKTsKICogICAgICAgcmVjdCgwLCAwLCB3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgICBzZXRDb2xvcihgIzBGRjJgKTsKICogICAgICAgcmVjdCh3aWR0aC8yLCAwLCB3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlck1vdmUoeCwgeSkgewogKiAgICAgICBpZiAoeCA8IHdpZHRoLzIpIHsKICogICAgICAgICBzZXRDdXJzb3IoQVVUTyk7CiAqICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgbm9DdXJzb3IoKTsKICogICAgICAgfQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNldEN1cnNvcn0KICovCmZ1bmN0aW9uIG5vQ3Vyc29yKCkgewogIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IGBub25lYDsKfQoKLyoqCiAqIERpc2FibGUgdGhlIGZpbGwgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKDEpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcmVjdCgyMCwgNzAsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYGZpbGxlZGAsIHdpZHRoLzIsIGhlaWdodC8yIC0gMjUpOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgcmVjdCgzMCwgODAsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYG5vdCBmaWxsZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiArIDI1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRGaWxsfQogKi8KZnVuY3Rpb24gbm9GaWxsKCkgewogIHNldEZpbGwoYHRyYW5zcGFyZW50YCk7Cn0KCi8qKgogKiBEaXNhYmxlIHRoZSBkZWZhdWx0IGdyaWQgYmFja2dyb3VuZC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICB0ZXh0KGBjbGljayBtZWAsIHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJVcCh4LCB5KSB7CiAqICAgICAgIHNldEdyaWQoMjAsIGBsaWdodGdyZXlgKTsKICogICAgICAgcmVkcmF3KCkKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKHgsIHkpIHsKICogICAgICAgbm9HcmlkKCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0R3JpZH0KICovCmZ1bmN0aW9uIG5vR3JpZCgpIHsKICBfX2RyYXdfZ3JpZCA9IGZhbHNlOwp9CgovKioKICogU2V0IHRoZSBsaW5lIHN0cm9rZSB0byAic29saWQiLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBzZXRMaW5lRGFzaCgxKTsKICogICAgICAgbGluZSgwLDIwLHdpZHRoLDUwKTsKICogICAgICAgc2V0TGluZURhc2goNSk7CiAqICAgICAgIGxpbmUoMCwzMCx3aWR0aCw5MCk7CiAqICAgICAgIHNldExpbmVEYXNoKDEsMiwzLDQpOwogKiAgICAgICBsaW5lKDAsNDAsd2lkdGgsMTMwKTsKICogICAgICAgbm9MaW5lRGFzaCgpOwogKiAgICAgICBsaW5lKDAsNTAsd2lkdGgsMTgwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRMaW5lRGFzaH0KICovCgpmdW5jdGlvbiBub0xpbmVEYXNoKCkgewogIF9fY3R4LnNldExpbmVEYXNoKFtdKTsKfQoKLyoqCiAqIERpc2FibGUgdGhlIHN0cm9rZSBjb2xvci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRTdHJva2UoMSk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICByZWN0KDIwLCA3MCwgMjAsIDIwKTsKICogICAgICAgdGV4dChgc3Ryb2tlZGAsIHdpZHRoLzIsIGhlaWdodC8yIC0gMjUpOwogKiAgICAgICBub1N0cm9rZSgpOwogKiAgICAgICByZWN0KDQyLCA4MiwgMjAsIDIwKTsKICogICAgICAgdGV4dChgbm90IHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiArIDI1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRTdHJva2V9CiAqLwoKZnVuY3Rpb24gbm9TdHJva2UoKSB7CiAgc2V0U3Ryb2tlKGB0cmFuc3BhcmVudGApOwp9CgovKioKICogRGlzYWJsZSB0ZXh0IHN0cm9raW5nLCBidXQgbm90IHJlZ3VsYXIgc2hhcGUgc3Ryb2tpbmcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKDEpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgcmVjdCgyMCwgNzAsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9UZXh0U3Ryb2tlKCk7CiAqICAgICAgIHJlY3QoNDIsIDgyLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBub3Qgc3Ryb2tlZGAsIHdpZHRoLzIsIGhlaWdodC8yICsgMjUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNldFRleHRTdHJva2V9CiAqLwoKZnVuY3Rpb24gbm9UZXh0U3Ryb2tlKCkgewogIHNldFRleHRTdHJva2UoZmFsc2UsIHVuZGVmaW5lZCk7Cn0KLyoqCiAqIEFkZCBhIHNsaWRlciB0byB5b3VyIGZpZ3VyZSwgYWxsb3dpbmcgdXNlcnMgdG8gY29udHJvbAogKiBhIHZhcmlhYmxlIGluIHlvdXIgZ3JhcGhpY3MgY29kZSBkaXJlY3RseSBieSBpbnRlcmFjdGluZwogKiB3aXRoIHRoYXQgb24tcGFnZSBzbGlkZXIsIHdoaWNoIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGlmCiAqIHlvdSB3YW50IHlvdXIgZ3JhcGhpY3MgdG8gYmUgdXNlYWJsZSBieSB1c2VycyB3aG8gZG9uJ3QKICogaGF2ZSwgb3IgY2Fubm90IHVzZSwgYSBtb3VzZS4KICoKICogVGhlIGBwcm9wTGFiZWxgIHZhbHVlIHNob3VsZCBiZSB0aGUgbmFtZSBvZiB0aGUgdmFyaWFibGUKICogdGhhdCB5b3VyIGdyYXBoaWNzIGNvZGUgdXNlcywgYW5kIHNob3VsZCBfbm90XyBiZSAicHJlYWxsb2NhdGVkIgogKiBpbiB5b3VyIGNvZGUgd2l0aCBhIGNvbnN0LCBsZXQsIG9yIHZhcjogaXQgd2lsbCBhdXRvbWF0aWNhbGx5CiAqIGdldCBhZGRlZCBhcyBwYXJ0IG9mIHRoZSBzb3VyY2UgbG9hZGluZyBwcm9jZXNzLgogKgogKiBUaGUgb3B0aW9ucyBvYmplY3QgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYW5kIHZhbHVlczoKICoKICogLSBtaW4gLSB0aGUgc2xpZGVyJ3MgbWluaW11bSB2YWx1ZSwgZGVmYXVsdHMgdG8gMAogKiAtIG1heCAtIHRoZSBzbGlkZXIncyBtYXhpbXVtIHZhbHVlLCBkZWZhdWx0cyB0byAxCiAqIC0gc3RlcCAtIHRoZSBzdGVwIHNpemUsIGRlZmF1bHRzIHRvIChtYXggLSBtaW4pLzEwCiAqIC0gdmFsdWUgLSB0aGUgaW5pdGlhbCB2YWx1ZSwgZGVmYXVsdHMgdG8gKG1heCArIG1pbikvMgogKiAtIGNsYXNzZXMgLSB0aGUgQ1NTIGNsYXNzZXMgdGhhdCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRzIHRvIGAic2xpZGVyImAKICogLSB0cmFuc2Zvcm0gLSBhIHZhbHVlIHByZXByb2Nlc3NvciAgZGVmYXVsdHMgdG8gKHYpID0+IHYKICoKICogVGhlIGB0cmFuc2Zvcm1gIHByZS1wcm9jZXNzb3IgcnVucyBhZnRlciB0aGUgdXNlciB1cGRhdGVzCiAqIHRoZSBzbGlkZXIsIGJ1dCBiZWZvcmUgaXRzIHZhbHVlIGdldHMgYXNzaWduZWQgdG8geW91ciB2YXJpYWJsZSwKICogc28gdGhhdCB5b3UgY2FuIG1hcCBpdCB0byBzb21ldGhpbmcgZWxzZSAoZm9yIGluc3RhbmNlLCBudW1iZXJzCiAqIGluIG9uZSByYW5nZSB0byBudW1iZXJzIGluIGEgY29tcGxldGVseSBkaWZmZXJlbnQgcmFuZ2UsIG9yIGV2ZW4KICogbnVtYmVycyB0byBzdHJpbmdzIG9yIGVudGlyZSBvYmplY3RzKQogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoNDAwLCAyMDApOwogKiAgICAgICBhZGRTbGlkZXIoYGJnQ29sb3JgLCB7CiAqICAgICAgICAgbWluOiAwLAogKiAgICAgICAgIG1heDogMjU1LAogKiAgICAgICAgIHN0ZXA6IDEsCiAqICAgICAgICAgdmFsdWU6IDIwMCwKICogICAgICAgICB0cmFuc2Zvcm06ICh2KSA9PiB7CiAqICAgICAgICAgICAvLyBjb252ZXJ0IHYgaW50byBhIGhleCBjb2xvciBjb2RlCiAqICAgICAgICAgICB2ID0gKHYpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBgMGApOwogKiAgICAgICAgICAgcmV0dXJuIGAjJHt2fSR7dn0ke3Z9YDsKICogICAgICAgICB9CiAqICAgICAgIH0pOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYmdDb2xvcik7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IHZhck5hbWUgVGhlIG5hbWUgZm9yIHRoZSB2YXJpYWJsZSB0aGlzIHNsaWRlciBnZXRzIHRpZWQgdG8uCiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFNlZSBkZXNjcmlwdGlvbgogKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH0gdGhlIEhUTUwgaW5wdXQgZWxlbWVudCBmb3IgdGhpcyBzbGlkZXIKICoKICogQHNlZSB7QGxpbmsgY2xlYXJTbGlkZXJzfQogKi8KZnVuY3Rpb24gYWRkU2xpZGVyKHByb3BMYWJlbCwgYXNzaWduLCBvcHRpb25zID0ge30pIHsKICBsZXQgewogICAgbWluLAogICAgbWF4LAogICAgc3RlcCwKICAgIHZhbHVlLAogICAgY2xhc3NlcyA9IGBzbGlkZXJgLAogICAgdHJhbnNmb3JtID0gKHYpID0+IHYsCiAgfSA9IG9wdGlvbnM7CgogIG1pbiA9IG1pbiA9PT0gdW5kZWZpbmVkID8gMCA6IG1pbjsKICBtYXggPSBtYXggPT09IHVuZGVmaW5lZCA/IDEgOiBtYXg7CiAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChtYXggLSBtaW4pIC8gMTAgOiBzdGVwOwogIHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IChtYXggKyBtaW4pIC8gMiA6IHZhbHVlOwoKICAvLyBjdXN0b20gInJvdW5kaW5nIiwgcHVyZWx5IGZvciBzdHJpbmdzCiAgY29uc3Qgcm91bmQgPSAodiwgZCA9IDQpID0+IHsKICAgIHYgPSBgJHt2fWA7CiAgICBjb25zdCBmcyA9IHYuaW5kZXhPZihgLmApOwogICAgaWYgKGZzICE9PSAtMSkgewogICAgICBsZXQgcHJlYyA9IGQgLSBmcyA+IDAgPyBkIC0gZnMgOiAwOwogICAgICB2ID0gdi5zdWJzdHJpbmcoMCwgZnMgKyBwcmVjKTsKICAgIH0KICAgIHJldHVybiB2OwogIH07CgogIGNvbnN0IGNyZWF0ZSA9ICh0YWcpID0+IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTsKCiAgbGV0IHNsaWRlciA9IGNyZWF0ZShgaW5wdXRgKTsKICBzbGlkZXIudHlwZSA9IGByYW5nZWA7CiAgc2xpZGVyLm1pbiA9IG1pbjsKICBzbGlkZXIubWF4ID0gbWF4OwogIHNsaWRlci5zdGVwID0gc3RlcDsKICBzbGlkZXIuc2V0QXR0cmlidXRlKGB2YWx1ZWAsIHZhbHVlKTsKICBzbGlkZXIuc2V0QXR0cmlidXRlKGBjbGFzc2AsIGNsYXNzZXMpOwoKICBjb25zdCB1cGRhdGUgPSAoeyB2YWx1ZSB9KSA9PiB7CiAgICB2YWx1ZUZpZWxkLnRleHRDb250ZW50ID0gcm91bmQodmFsdWUpOwogICAgYXNzaWduKHRyYW5zZm9ybShwYXJzZUZsb2F0KHZhbHVlKSkpOwogICAgaWYgKCFwbGF5aW5nKSByZWRyYXcoKTsKICB9OwoKICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihgaW5wdXRgLCAoeyB0YXJnZXQgfSkgPT4gdXBkYXRlKHRhcmdldCkpOwoKICBsZXQgdGFibGUgPSBfX2VsZW1lbnQucXVlcnlTZWxlY3RvcihgdGFibGUuc2xpZGVyLXdyYXBwZXJgKTsKICBpZiAoIXRhYmxlKSB7CiAgICB0YWJsZSA9IGNyZWF0ZShgdGFibGVgKTsKICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoYHNsaWRlci13cmFwcGVyYCk7CiAgICBfX2VsZW1lbnQucHJlcGVuZCh0YWJsZSk7CiAgfQogIGxldCB0ciA9IGNyZWF0ZShgdHJgKTsKCiAgbGV0IHRkID0gY3JlYXRlKGB0ZGApOwogIGxldCBsYWJlbCA9IGNyZWF0ZShgbGFiZWxgKTsKICBsYWJlbC5jbGFzc0xpc3QuYWRkKGBzbGlkZXItbGFiZWxgKTsKICBsYWJlbC5pbm5lckhUTUwgPSBwcm9wTGFiZWwKICAgIC5yZXBsYWNlKC9fKC4rKSQvLCBgPHN1Yj4kMTwvc3ViPmApCiAgICAucmVwbGFjZSgvKFxkKykvLCBgPHN1Yj4kMTwvc3ViPmApOwogIHRkLmFwcGVuZChsYWJlbCk7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLW1pbmApOwogIHRkLnRleHRDb250ZW50ID0gcm91bmQoc2xpZGVyLm1pbik7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQud2lkdGggPSBgKmA7CiAgdGQuYXBwZW5kKHNsaWRlcik7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLW1heGApOwogIHRkLnRleHRDb250ZW50ID0gcm91bmQoc2xpZGVyLm1heCk7CiAgdHIuYXBwZW5kKHRkKTsKCiAgdGQgPSBjcmVhdGUoYHRkYCk7CiAgdmFyIHZhbHVlRmllbGQgPSBjcmVhdGUoYGxhYmVsYCk7IC8vIGZ1bmN0aW9uIHNjb3BlZAogIHZhbHVlRmllbGQuY2xhc3NMaXN0LmFkZChgc2xpZGVyLXZhbHVlYCk7CiAgdGQuYXBwZW5kKHZhbHVlRmllbGQpOwogIHRyLmFwcGVuZCh0ZCk7CiAgdGQuYWRkRXZlbnRMaXN0ZW5lcihgcG9pbnRlcmRvd25gLCAoKSA9PiB7CiAgICBjb25zdCB2YWx1ZSA9IHByb21wdChgbmV3IHZhbHVlP2AsIHNsaWRlci52YWx1ZSk7CiAgICBpZiAodmFsdWUgIT09IG51bGwpIHsKICAgICAgc2xpZGVyLnZhbHVlID0gdmFsdWU7CiAgICAgIHVwZGF0ZSh7IHZhbHVlIH0pOwogICAgfQogIH0pOwoKICB0YWJsZS5hcHBlbmQodHIpOwoKICB1cGRhdGUoc2xpZGVyKTsKICByZXR1cm4gc2xpZGVyOwp9CgovKioKICogUmVtb3ZlIGFsbCBzbGlkZXJzIGZvciB5b3VyIGZpZ3VyZSBmcm9tIHRoZSBwYWdlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBhZGRTbGlkZXIoYHhgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICB0ZXh0KGBjbGljayB0byBjbGVhcmAsIHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKCkgewogKiAgICAgICBjbGVhclNsaWRlcnMoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBhZGRTbGlkZXJ9CiAqLwoKZnVuY3Rpb24gY2xlYXJTbGlkZXJzKCkgewogIGNvbnN0IHRhYmxlID0gX19lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYHRhYmxlLnNsaWRlci13cmFwcGVyYCk7CiAgaWYgKHRhYmxlKSB0YWJsZS5pbm5lckhUTUwgPSBgYDsKfQoKLyoqCiAqIEFkZCBhIGJ1dHRvbiBiZWxvdyB5b3VyIGZpZ3VyZSB0aGF0IGNhbiB0cmlnZ2VyIGV2ZW50LWJhc2VkCiAqIGNvZGUsIHdoaWNoIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGlmIHlvdSB3YW50IHlvdXIgZ3JhcGhpY3MKICogdG8gYmUgdXNlYWJsZSBieSB1c2VycyB3aG8gZG9uJ3QgaGF2ZSwgb3IgY2Fubm90IHVzZSwgYSBtb3VzZS4KICoKICogb25DbGljayBpcyBzaW1pbGFyIHRvIHRoZSBzdGFuZGFyZCBKUyBldmVudCBoYW5kbGVyLCBleGNlcHQKICogdGhhdCB0aGUgY2FsbCBhcmd1bWVudCBpcyBhIHJlZmVyZW5jZSB0byB5b3VyIGJ1dHRvbiwgbm90CiAqIHRoZSBjbGljayBldmVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IGNvbG9ycyA9IFtgd2hpdGVgLCBgYmxhY2tgXTsKICogICAgIGxldCBiZ0NvbG9yID0gMDsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgYWRkQnV0dG9uKGBmbGlwIGJhY2tncm91bmRgLCAoYnV0dG9uKSA9PiB7CiAqICAgICAgICAgYmdDb2xvciA9IC0oYmdDb2xvciAtIDEpOwogKiAgICAgICAgIHJlZHJhdygpOwogKiAgICAgICB9KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGNvbG9yc1tiZ0NvbG9yXSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIFRoZSB0ZXh0IGxhYmVsIGZvciB5b3VyIGJ1dHRvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNsaWNrIFRoZSBjbGljayBoYW5kbGluZyBmdW5jdGlvbiwgc2VlIGRlc2NyaXB0aW9uLgogKiBAcmV0dXJucyB7SFRNTEJ1dHRvbkVsZW1lbnR9IFRoZSBidXR0b24gZWxlbWVudCB0aGlzIGFkZGVkIHRvIHRoZSBwYWdlCiAqCiAqIEBzZWUge0BsaW5rIGNsZWFyQnV0dG9uc30KICovCmZ1bmN0aW9uIGFkZEJ1dHRvbihsYWJlbCwgb25DbGljaykgewogIGlmICghb25DbGljaykgdGhyb3cgbmV3IEVycm9yKGBhIGJ1dHRvbiBtdXN0IGhhdmUgYW4gb25DbGljayBoYW5kbGVyYCk7CiAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgYnV0dG9uYCk7CiAgYnRuLmNsYXNzTGlzdC5hZGQoYGdyYXBoaWNzLWVsZW1lbnQtYnV0dG9uYCk7CiAgYnRuLnRleHRDb250ZW50ID0gbGFiZWw7CiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4gb25DbGljayhidG4pKTsKICBfX2VsZW1lbnQucHJlcGVuZChidG4pOwogIHJldHVybiBidG47Cn0KCi8qKgogKiBSZW1vdmUgYWxsIGJ1dHRvbnMgZm9yIHlvdXIgZmlndXJlIGZyb20gdGhlIHBhZ2UuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIGFkZEJ1dHRvbihgdGhpcyBkb2VzIG5vdGhpbmdgLCAoKSA9PiB7fSk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dChgY2xpY2sgdG8gY2xlYXJgLCB3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bigpIHsKICogICAgICAgY2xlYXJCdXR0b25zKCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgYWRkQnV0dG9ufQogKi8KZnVuY3Rpb24gY2xlYXJCdXR0b25zKCkgewogIF9fZWxlbWVudAogICAgLnF1ZXJ5U2VsZWN0b3JBbGwoYGJ1dHRvbi5ncmFwaGljcy1lbGVtZW50LWJ1dHRvbmApCiAgICAuZm9yRWFjaCgoZSkgPT4gZS5yZW1vdmUoKSk7Cn0KLyoqCiAqIERyYXcgYSBjaXJjdWxhciBhcmMgd2l0aCByYWRpdXMgYHJgIGF0ICh4LHkpLAogKiBzdGFydGluZyBhdCBhbmdsZSBgc2AgYW5kIGVuZGluZyBhdCBhbmdsZSBgZWAuCiAqIElmIGB3ZWRnZWAgaXMgdHJ1ZSwgdGhpcyB3aWxsIGRyYXcgYSBjbG9zZWQKICogc2hhcGUgdGhhdCBpcyBhbmNob3JlZCBhdCAoeCx5KS4gSWYgb21pdHRlZAogKiBvciBleHBsaWNpdGx5IHNldCB0byBmYWxzZSwgdGhpcyB3aWxsIGRyYXcKICogYW4gb3BlbiBzaGFwZSB3aXRoIGEgZmlsbCB0aGF0IGNvbm5lY3RzIHRoZQogKiBmaXJzdCBhbmQgbGFzdCBwb2ludCBvbiB0aGUgYXJjLCBidXQgbm8gY2xvc2luZwogKiBzdHJva2UuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBhcmMod2lkdGgvMiArIDMwLCBoZWlnaHQvMiAtIDQwLCA0MCwgMCwgMC42NipUQVUpOwogKiAgICAgICBhcmMod2lkdGgvMiAtIDMwLCBoZWlnaHQvMiArIDIwLCA0MCwgMCwgMC42NipUQVUsIHRydWUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBjaXJjdWxhciBjZW50ZXIgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgY2lyY3VsYXIgY2VudGVyIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIHRoaXMgYXJjIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZSBUaGUgc3RhcnQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlIFRoZSBlbmQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtib29sZWFufSBkcmF3V2VkZ2UgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBkcmF3IGEgd2VkZ2Ugb3IgY2FwcGVkIGNpcmNsZSAoZGVmYXVsdD1jaXJjbGUpCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwb2ludCBUaGUgY2lyY3VsYXIgY2VudGVyIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIHRoaXMgYXJjIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZSBUaGUgc3RhcnQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlIFRoZSBlbmQgYW5nbGUgZm9yIHRoaXMgYXJjIGluIHJhZGlhbnMKICogQHBhcmFtIHtib29sZWFufSBkcmF3V2VkZ2UgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBkcmF3IGEgd2VkZ2Ugb3IgY2FwcGVkIGNpcmNsZSAoZGVmYXVsdD1jaXJjbGUpCiAqCiAqIEBzZWUge0BsaW5rIGNpcmNsZX0KICovCmZ1bmN0aW9uIGFyYyh4LCB5LCByLCBzID0gMCwgZSA9IFRBVSwgd2VkZ2UgPSBmYWxzZSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgd2VkZ2UgPSBlOwogICAgZSA9IHM7CiAgICBzID0gcjsKICAgIHIgPSB5OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGNvbnN0IHN0ZXAgPSAwLjE7CiAgc3RhcnQoKTsKICBpZiAod2VkZ2UpIHZlcnRleCh4LCB5KTsKICBsZXQgYSA9IHM7CiAgdmVydGV4KHggKyByICogY29zKHMpLCB5ICsgciAqIHNpbihzKSk7CiAgZm9yIChhID0gcyArIHN0ZXA7IGEgPCBlOyBhICs9IHN0ZXApIHsKICAgIHZlcnRleCh4ICsgciAqIGNvcyhhKSwgeSArIHIgKiBzaW4oYSkpOwogIH0KICB2ZXJ0ZXgoeCArIHIgKiBjb3MoZSksIHkgKyByICogc2luKGUpKTsKICBpZiAod2VkZ2UpIHZlcnRleCh4LCB5KTsKICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBwYWlyIG9mIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGF4ZXMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEJvcmRlcigxLCBgYmxhY2tgKTsKICogICAgICAgc2V0R3JpZCg1MCwgYGxpZ2h0Z3JleWApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgc2V0Q3Vyc29yKGBub25lYCk7CiAqICAgICAgIGNsZWFyKGAjZmZmZWY3YCk7CiAqICAgICAgIHNldENvbG9yKGAjMzMzYCk7CiAqICAgICAgIHRyYW5zbGF0ZSgyNSwyNSk7CiAqICAgICAgIGF4ZXMoCiAqICAgICAgICAgYHRpbWUgKHMpYCwgMCwgd2lkdGgtNTAsCiAqICAgICAgICAgYGRpc3RhbmNlIChrbSlgLCAwLCBoZWlnaHQtNTAsCiAqICAgICAgICAgIjAiLCAiNjAiLAogKiAgICAgICAgICIwIiwgIjUwMCIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBoTGFiZWwgdGhlIGhvcml6b250YWwgYXhpcyBsYWJlbAogKiBAcGFyYW0ge251bWJlcn0gaHMgdGhlIHN0YXJ0IChsZWZ0KSBwaXhlbCB2YWx1ZSBmb3IgdGhlIGhvcml6b250YWwgYXhpcwogKiBAcGFyYW0ge251bWJlcn0gaGUgdGhlIGVuZCAocmlnaHQpIHBpeGVsIHZhbHVlIGZvciB0aGUgaG9yaXpvbnRhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSB2TGFiZWwgdGhlIHZlcnRpY2FsIGF4aXMgbGFiZWwKICogQHBhcmFtIHtudW1iZXJ9IHZzIHRoZSBzdGFydCAodG9wKSBwaXhlbCB2YWx1ZSBmb3IgdGhlIHZlcnRpY2FsIGF4aXMKICogQHBhcmFtIHtudW1iZXJ9IHZlIHRoZSBlbmQgKGJvdHRvbSkgcGl4ZWwgdmFsdWUgZm9yIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSBoc0xhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIHN0YXJ0IChsZWZ0KSBvZiB0aGUgaG9yaXpvbnRhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSBoZUxhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIGVuZCAocmlnaHQpIG9mIHRoZSBob3Jpem9udGFsIGF4aXMKICogQHBhcmFtIHtzdHJpbmd9IHZzTGFiZWw/IGFuIG9wdGlvbmFsIGxhYmVsIGZvciB0aGUgc3RhcnQgKHRvcCkgb2YgdGhlIHZlcnRpY2FsIGF4aXMKICogQHBhcmFtIHtzdHJpbmd9IHZlTGFiZWw/IGFuIG9wdGlvbmFsIGxhYmVsIGZvciB0aGUgZW5kIChib3R0b20pIG9mIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gYXhlcygKICBoTGFiZWwsCiAgaHMsCiAgaGUsCiAgdkxhYmVsLAogIHZzLAogIHZlLAogIGhzTGFiZWwgPSBmYWxzZSwKICBoZUxhYmVsID0gZmFsc2UsCiAgdnNMYWJlbCA9IGZhbHNlLAogIHZlTGFiZWwgPSBmYWxzZQopIHsKICBsaW5lKGhzLCAwLCBoZSwgMCk7CiAgbGluZSgwLCB2cywgMCwgdmUpOwoKICBjb25zdCBocG9zID0gMCAtIDU7CiAgdGV4dChgJHtoTGFiZWx9IOKGkmAsIHdpZHRoIC8gMiArIDUsIGhwb3MsIFJJR0hUKTsKICB0ZXh0KGhzTGFiZWwgPyBoc0xhYmVsIDogaHMsIGhzLCBocG9zLCBSSUdIVCk7CiAgdGV4dChoZUxhYmVsID8gaGVMYWJlbCA6IGhlLCBoZSwgaHBvcywgUklHSFQpOwoKICBjb25zdCB2cG9zID0gLTU7CiAgc2F2ZSgpOwogIHRyYW5zbGF0ZSh2cG9zLCBoZWlnaHQgLyAyKTsKICByb3RhdGUoLVBJIC8gMik7CiAgdGV4dChgJHt2TGFiZWx9YCwgMCwgMCwgTEVGVCk7CiAgcmVzdG9yZSgpOwogIHRleHQoYOKGk2AsIHZwb3MsIGhlaWdodCAvIDIgKyAxNiwgUklHSFQpOwogIHRleHQodnNMYWJlbCA/IHZzTGFiZWwgOiB2cywgdnBvcywgdnMgKyA1LCBSSUdIVCk7CiAgdGV4dCh2ZUxhYmVsID8gdmVMYWJlbCA6IHZlLCB2cG9zLCB2ZSwgUklHSFQpOwp9CgovKioKICogRHJhdyBvbmUgb3IgbW9yZSBCZXppZXIgY3VydmVzIGZyb20gYW4gYXJyYXkKICogb2YgUG9pbnQgb3IgUG9pbnQtbGlrZXMgdGhhdCBpbXBsZW1lbnQ6CiAqCiAqIGBgYAogKiB7CiAqICAgeDogbnVtYmVyCiAqICAgeTogbnVtYmVyCiAqIH0KICogYGBgCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBiZXppZXIoCiAqICAgICAgICAgbmV3IFBvaW50KDIwLCBoZWlnaHQgLSA1NSksCiAqICAgICAgICAgbmV3IFBvaW50KDIwLCAyNSksCiAqICAgICAgICAgeyB4OiB3aWR0aCAtIDIwLCB5OiAyNX0sCiAqICAgICAgICAgeyB4OiB3aWR0aCAtIDIwLCB5OiBoZWlnaHQgLSA1NX0KICogICAgICAgKTsKICogICAgICAgbm9GaWxsKCkKICogICAgICAgYmV6aWVyKAogKiAgICAgICAgIG5ldyBQb2ludCgwLCBoZWlnaHQgLSAyMCksCiAqICAgICAgICAgbmV3IFBvaW50KHdpZHRoIC0gMjAsIGhlaWdodCAtIDIwKSwKICogICAgICAgICB7IHg6IDIwLCB5OiAyMH0sCiAqICAgICAgICAgeyB4OiB3aWR0aCwgeTogMjB9CiAqICAgICAgICk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJbOF19IC4uLmNvb3JkaW5hdGVzIEVpZ2h0IHgsIHkgdmFsdWVzLgogKiBAcGFyYW0ge251bWJlcls2bl19IC4uLmFkZGl0aW9uYWxDb29yZGluYXRlcz8gTXVsdGlwbGVzIG9mIHNpeCB4LCB5IHZhbHVlcy4KICoKICogQHBhcmFtIHtQb2ludExpa2VbNF19IC4uLmNvb3JkaW5hdGVzIEZvdXIge3gseX0gY29vcmRpbmF0ZXMuCiAqIEBwYXJhbSB7UG9pbnRMaWtlWzNuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBNdWx0aXBsZXMgb2YgdGhyZWUge3gseX0gY29vcmRpbmF0ZXMuCiAqCiAqIEBzZWUge0BsaW5rIGJzcGxpbmV9CiAqIEBzZWUge0BsaW5rIHNwbGluZX0KICovCmZ1bmN0aW9uIGJlemllciguLi5hcmdzKSB7CiAgbGV0IHBvaW50cyA9IGFyZ3M7CgogIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gYG51bWJlcmApIHsKICAgIHBvaW50cyA9IFtdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIHBvaW50cy5wdXNoKHsgeDogYXJnc1tpXSwgeTogYXJnc1tpICsgMV0gfSk7CiAgICB9CiAgfQoKICBjb25zdCBiID0gKHQsIGEsIGIsIGMsIGQpID0+IHsKICAgIGNvbnN0IG10ID0gMSAtIHQ7CiAgICByZXR1cm4gYSAqIG10ICoqIDMgKyAzICogYiAqIG10ICoqIDIgKiB0ICsgMyAqIGMgKiBtdCAqIHQgKiogMiArIGQgKiB0ICoqIDM7CiAgfTsKCiAgbGV0IFtwMCwgLi4ucmVzdF0gPSBwb2ludHM7CiAgc3RhcnQoKTsKICBmb3IgKGxldCBpID0gMCwgZSA9IHJlc3QubGVuZ3RoOyBpIDwgZTsgaSArPSAzKSB7CiAgICBsZXQgW3AxLCBwMiwgcDNdID0gcmVzdC5zbGljZShpLCBpICsgMyk7CiAgICBpZiAocDEgJiYgcDIgJiYgcDMpIHsKICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCAxOyB0ICs9IDAuMDEpIHsKICAgICAgICB2ZXJ0ZXgoYih0LCBwMC54LCBwMS54LCBwMi54LCBwMy54KSwgYih0LCBwMC55LCBwMS55LCBwMi55LCBwMy55KSk7CiAgICAgIH0KICAgICAgdmVydGV4KHAzLngsIHAzLnkpOwogICAgICBwMCA9IHAzOwogICAgfQogIH0KICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBCLXNwbGluZSB1c2luZyBmb3VyIG9yIG1vcmUgUG9pbnQgb3IKICogUG9pbnQtbGlrZXMgdGhhdCBpbXBsZW1lbnQ6CiAqCiAqIGBgYAogKiB7CiAqICAgeDogbnVtYmVyCiAqICAgeTogbnVtYmVyCiAqIH0KICogYGBgCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgcmFuZ2UoMCwgVEFVLCBQSSAvIDUsIChhKSA9PiBwb2ludHMucHVzaCgKICogICAgICAgICBuZXcgUG9pbnQoCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBjb3MoYSksCiAqICAgICAgICAgICByYW5kb20oMzApICsgNTAgKiBzaW4oYSkKICogICAgICAgICApCiAqICAgICAgICkpOwogKiAgICAgICBzZXRNb3ZhYmxlKC4uLnBvaW50cyk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7CiAqICAgICAgIG5vU3Ryb2tlKCk7CiAqICAgICAgIHNldEZpbGwoYCMwMDAyYCk7CiAqICAgICAgIGJzcGxpbmUoLi4ucG9pbnRzKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBwb2ludHMuZm9yRWFjaChwID0+IHBvaW50KHApKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcls4XX0gLi4uY29vcmRpbmF0ZXMgRWlnaHQgeCwgeSB2YWx1ZXMuCiAqIEBwYXJhbSB7bnVtYmVyWzJuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBNdWx0aXBsZXMgb2YgeCwgeSB2YWx1ZXMuCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlWzRdfSAuLi5jb29yZGluYXRlcyBGb3VyIHt4LHl9IGNvb3JkaW5hdGVzLgogKiBAcGFyYW0ge1BvaW50TGlrZVtuXX0gLi4uYWRkaXRpb25hbENvb3JkaW5hdGVzPyBaZXJvIG9yIG1vcmUge3gseX0gY29vcmRpbmF0ZXMuCiAqCiAqIEBzZWUge0BsaW5rIGJlemllcn0KICogQHNlZSB7QGxpbmsgc3BsaW5lfQogKi8KCmZ1bmN0aW9uIGJzcGxpbmUoLi4uYXJncykgewogIGxldCBvcGVuID0gdHJ1ZTsKICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gYGJvb2xlYW5gKSB7CiAgICBvcGVuID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKVswXTsKICB9CgogIGxldCBwb2ludHMgPSBhcmdzOwoKICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IGBudW1iZXJgKSB7CiAgICBwb2ludHMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikgewogICAgICBwb2ludHMucHVzaCh7IHg6IGFyZ3NbaV0sIHk6IGFyZ3NbaSArIDFdIH0pOwogICAgfQogIH0KCiAgc3RhcnQoKTsKICBuZXcgQlNwbGluZShwb2ludHMsIG9wZW4pLmdldExVVCgpLmZvckVhY2goKHApID0+IHZlcnRleChwLngsIHAueSkpOwogIGVuZCgpOwp9CgovKioKICogRHJhdyBhIGNpcmNsZSB3aXRoIHJhZGl1cyBgcmAgYXQgYHgseWAuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGAjRjAwMmApOwogKiAgICAgICBjaXJjbGUod2lkdGgvMiwgaGVpZ2h0LzIsIDgwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgY2lyY2xlJ3MgY2VudGVyIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGNpcmNsZSdzIGNlbnRlciB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSByIFRoZSBjaXJjbGUncyByYWRpdXMgaW4gcGl4ZWxzCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSBjaXJjbGUncyBjZW50ZXIge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0gciBUaGUgY2lyY2xlJ3MgcmFkaXVzIGluIHBpeGVscwogKgogKiBAc2VlIHtAbGluayBhcmN9CiAqLwpmdW5jdGlvbiBjaXJjbGUoeCwgeSwgcikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgciA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgYXJjKHgsIHksIHIsIDAsIFRBVSwgZmFsc2UpOwp9CgovKioKICogQ2xlYXIgdGhlIGNhbnZhcywgYW5kIHNldCBpdCB0byBhIHNwZWNpZmljIChDU1MpIGNvbG91ci4KICogSWYgbm8gYG5vR3JpZCgpYCBjYWxsIHdhcyBtYWRlLCB0aGlzIHdpbGwgdGhlbiBhbHNvIGRyYXcKICogdGhlIGJhY2tncm91bmQgZ3JpZC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBwaW5rYCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtjb2xvcn0gY29sb3I/IFRoZSAoQ1NTKSBiYWNrZ3JvdW5kIGNvbG9yIHRvIHVzZSAoZGVmYXVsdCA9IGB3aGl0ZWApCiAqLwpmdW5jdGlvbiBjbGVhcihjb2xvciA9IGB3aGl0ZWApIHsKICBzYXZlKCk7CiAgX19jYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yOwogIF9fY2FudmFzLndpZHRoID0gd2lkdGg7CiAgX19jdHggPSBfX2NhbnZhcy5nZXRDb250ZXh0KGAyZGApOwogIGlmIChfX2RyYXdfZ3JpZCkgZ3JpZCgpOwogIHJlc3RvcmUoKTsKfQoKLyoqCiAqIENvdW50ZXJwYXJ0IHRvIHN0YXJ0KCksIGZpbmFsaXplcyB0aGUgY3VycmVudCBzaGFwZSBhbmQKICogY29sb3VycyBpdC4gSWYgYGNsb3NlYCBpcyB0cnVlLCBpdCB3aWxsIGNsb3NlIHRoZSBwYXRoCiAqIGJlZm9yZSBjb2xvdXJpbmcuCiAqCiAqIElmIGBub0ZpbGwoKWAgaXMgaW4gZWZmZWN0LCB0aGUgc2hhcGUgd2lsbCBub3QgYmUgZmlsbGVkLgogKiBpZiBgbm9TdHJva2UoKWAgaXMgaW4gZWZmZWN0LCB0aGUgc2hhcGUgb3V0bGluZSB3aWxsIG5vdCBiZSBjb2xvdXJlZC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYGdvbGRgKTsKICogICAgICAgc3RhcnQoKTsKICogICAgICAgdmVydGV4KDAsaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgMCk7CiAqICAgICAgIHZlcnRleCh3aWR0aCwgaGVpZ2h0LzIpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgZW5kKHRydWUpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2U/IEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBjbG9zZSB0aGUgcGF0aCAoZGVmYXVsdCA9IGZhbHNlKQogKgogKiBAc2VlIHtAbGluayBzdGFydH0KICogQHNlZSB7QGxpbmsgdmVydGV4fQogKiBAc2VlIHtAbGluayBlbmRTaGFwZX0KICovCmZ1bmN0aW9uIGVuZChjbG9zZSA9IGZhbHNlKSB7CiAgaWYgKGNsb3NlKSBfX2N0eC5jbG9zZVBhdGgoKTsKICBfX2N0eC5maWxsKCk7CiAgX19jdHguc3Ryb2tlKCk7CiAgaWYgKF9fY3R4LmxpbmVXaWR0aCAlIDIgPT09IDEpIHsKICAgIF9fY3R4LnRyYW5zbGF0ZSgtMC41LCAtMC41KTsKICB9Cn0KCi8qKgogKiBEcmF3IGFuIGltYWdlIGluIGEgZ2l2ZW4gbG9jYXRpb24gd2l0aCBhbiBvcHRpb25hbAogKiB3aWR0aCBhbmQgaGVpZ2h0LiBJZiBvbWl0dGVkLCB0aGUgd2lkdGggYW5kIGhlaWdodAogKiB3aWxsIGJlIHRoZSBpbWFnZSdzIG93biBkaW1lbnNpb25zLiBOb3RlIHRoYXQgdGhlCiAqIGltYWdlIG1heSBiZSBlaXRoZXIgYSBVUkwsIG9yIGFuIDxpbWc+IGVsZW1lbnQuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGFzeW5jIGZ1bmN0aW9uOiBpZiBpdCBpcyBpbXBvcnRhbnQKICogdGhhdCBub3RoaW5nIGdldHMgZHJhd24gdW50aWwgdGhlIGltYWdlIGhhcyBiZWVuIGRyYXduLAogKiByZW1lbWJlciB0byBgYXdhaXRgIGl0cyBjYWxsLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgYXN5bmMgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIGF3YWl0IGltYWdlKGBodHRwczovL2R1bW15aW1hZ2UuY29tLzEwMHgxMDBgLCA1MCwgNTAsIDEwMCwgMTAwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge0ltYWdlfHN0cmluZ30gaW1nT3JVUkwgVGhlIGltYWdlIHRvIGRyYXcgZWl0aGVyIGFzIEltYWdlIG9iamVjdCwgb3IgaW1hZ2UgVVJMLgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgZHJhdyBwb3NpdGlvbidzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGRyYXcgcG9zaXRpb24ncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcmV0dXJucyB7SW1hZ2V9IFRoZSBkcmF3biBpbWFnZQogKgogKiBAcGFyYW0ge0ltYWdlfHN0cmluZ30gaW1nT3JVUkwgVGhlIGltYWdlIHRvIGRyYXcgZWl0aGVyIGFzIEltYWdlIG9iamVjdCwgb3IgaW1hZ2UgVVJMLgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgZHJhdyBwb3NpdGlvbiBhcyB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcmV0dXJucyB7SW1hZ2V9IFRoZSBkcmF3biBpbWFnZQogKi8KYXN5bmMgZnVuY3Rpb24gaW1hZ2UoaW1nLCB4ID0gMCwgeSA9IDAsIHcsIGgpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIGggPSB3OwogICAgdyA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIGlmICh0eXBlb2YgaW1nID09PSBgc3RyaW5nYCkgewogICAgaW1nID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBpbWdgKTsKICAgICAgdGFnLm9ubG9hZCA9ICgpID0+IHJlc29sdmUodGFnKTsKICAgICAgdGFnLm9uZXJyb3IgPSAoKSA9PiByZWplY3QoKTsKICAgICAgdGFnLnNyYyA9IGltZzsKICAgIH0pOwogIH0KICBfX2N0eC5kcmF3SW1hZ2UoaW1nLCB4LCB5LCB3IHx8IGltZy53aWR0aCwgaCB8fCBpbWcuaGVpZ2h0KTsKICByZXR1cm4gaW1nOwp9CgovKioKICogRHJhdyBhIGxpbmUgZnJvbSBvbmUgY29vcmRpbmF0ZSB0byBhbm90aGVyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgcmFuZ2UoMCxoZWlnaHQsMjAsIChpKSA9PiBsaW5lKDAsIDAsIHdpZHRoLCBpKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHgxIFRoZSBmaXJzdCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHgyIFRoZSBzZWNvbmQgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MiBUaGUgc2Vjb25kIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDEgVGhlIGZpcnN0IHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDIgVGhlIHNlY29uZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICovCmZ1bmN0aW9uIGxpbmUoeDEsIHkxLCB4MiwgeTIpIHsKICBpZiAoeDEueCAhPT0gdW5kZWZpbmVkICYmIHgxLnkgIT09IHVuZGVmaW5lZCkgewogICAgeTIgPSB5MS55OwogICAgeDIgPSB5MS54OwogICAgeTEgPSB4MS55OwogICAgeDEgPSB4MS54OwogIH0KCiAgc3RhcnQoKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICB2ZXJ0ZXgoeDIsIHkyKTsKICBlbmQoKTsKfQoKLyoqCiAqIFBsb3QgYSB5PWYoeCkgZnVuY3Rpb24uIFRoZSBpbnB1dCB0byB0aGUgZnVuY3Rpb24KICogd2lsbCBzcGFuIHRoZSBpbnRlcnZhbCBbYSxiXSB1c2luZyB0aGUgaW5kaWNhdGVkCiAqIG51bWJlciBvZiBzdGVwcywgYW5kIHRoZSByZSBzdWx0IG1heSBiZSBzY2FsZWQgYm90aAogKiBpbiB0aGUgeCBhbmQgeSBkaXJlY3Rpb24gaW4gb3JkZXIgdG8gZHJhdyBzb21ldGhpbmcKICogdGhhdCB5b3UgY2FuIGFjdHVhbGx5IHNlZSAoZS5nLiBpZiB5b3UncmUgcGxvdHRpbmcKICogdG8gdGhlIGRvbWFpbiBbMCwxXSB5b3Ugd291bGRuJ3QgYmUgYWJsZSB0byBzZWUgdGhlCiAqIHJlc3VsdCB3aXRob3V0IHNjYWxpbmcpLgogKgogKiBUaGlzIGZ1bmN0aW9uIGlzIGF3YXJlIG9mLCBhbmQgd2lsbCBwbG90LCBkaXNjb250aW51aXRpZXMKICogdXNpbmcgdGhlIHN0YW5kYXJkIG9wZW4gY2lyY2xlIG5vdGF0aW9uLCB1bmxlc3MgaW5zdHJ1Y3RlZAogKiBub3QgdG8gZG8gc28gdXNpbmcgdGhlIGBpZ25vcmVEaXNjb250aW51aXR5YCBib29sZWFuIGZsYWcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgdHJhbnNsYXRlKDAsIGhlaWdodCAvIDIpOwogKiAgICAgICBjb25zdCBmbiA9ICh4KSA9PiBjb3MoeCkgKiogNiAvIHNpbih4KSAtIHNpbih4KS8yOwogKiAgICAgICBwbG90KGZuLCAwLCAyKlRBVSwgMTIwLCB3aWR0aCAvIFRBVSwgaGVpZ2h0IC8gMik7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtGdW5jdGlvbn0gZiB0aGUgYHkgPSBmKHgpYCBmdW5jdGlvbiB0byBwbG90CiAqIEBwYXJhbSB7bnVtYmVyfSBhPyBUaGUgbG93ZXIgYm91bmQgZm9yIHRoZSBpbnB1dCB2YWx1ZSAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSB7bnVtYmVyfSBiPyBUaGUgdXBwZXIgYm91bmQgZm9yIHRoZSBpbnB1dCB2YWx1ZSAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwcz8gVGhlIG51bWJlciBvZiBwbG90IHBvaW50cyB0byBwbG90IG92ZXIgdGhlIGludGVydmFsIFthLGJdIChkZWZhdWx0ID0gMTAwKQogKiBAcGFyYW0ge251bWJlcn0geHNjYWxlPyBBbiBvcHRpb25hbCBzY2FsaW5nIGZhY3RvciB0byBhcHBseSB0byBlYWNoIHBsb3QgcG9pbnQncyB4IHZhbHVlIChkZWZhdWx0ID0gMSkKICogQHBhcmFtIHtudW1iZXJ9IHlzY2FsZT8gQW4gb3B0aW9uYWwgc2NhbGluZyBmYWN0b3IgdG8gYXBwbHkgdG8gZWFjaCBwbG90IHBvaW50J3MgeSB2YWx1ZSAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlRGlzY29udGludWl0eT8gRG8gbm90IGRyYXcgc3BlY2lhbCBlbGVtZW50cyBmb3IgZGlzY29udGludWl0aWVzIChkZWZhdWx0ID0gZmFsc2UpCiAqCiAqIEBzZWUge0BsaW5rIHBsb3REYXRhfQogKi8KZnVuY3Rpb24gcGxvdCgKICBmLAogIGEgPSAwLAogIGIgPSAxLAogIHN0ZXBzID0gMTAwLAogIHhzY2FsZSA9IDEsCiAgeXNjYWxlID0gMSwKICBpZ25vcmVEaXNjb250aW51aXR5ID0gZmFsc2UKKSB7CiAgY29uc3QgaW50ZXJ2YWwgPSBiIC0gYTsKICBzdGFydCgpOwogIGxldCBbcHksIGR5LCBwZHldID0gWzAsIDAsIDBdOwogIGNvbnN0IHN0ZXAgPSBpbnRlcnZhbCAvIChzdGVwcyAtIDEpOwogIGNvbnN0IGRpc2NvbnRpbnVpdHkgPSAoaSwgeCwgeSkgPT4gewogICAgZW5kKCk7CiAgICBzYXZlKCk7CiAgICBub0ZpbGwoKTsKICAgIHBvaW50KHggKiB4c2NhbGUsIHB5ICogeXNjYWxlKTsKICAgIHBvaW50KHggKiB4c2NhbGUsIHkgKiB5c2NhbGUpOwogICAgcmVzdG9yZSgpOwogICAgc3RhcnQoKTsKICB9OwogIGZvciAobGV0IGkgPSAwLCB4LCB5OyBpIDwgc3RlcHM7IGkrKykgewogICAgeCA9IGEgKyBpICogc3RlcDsKICAgIHkgPSBmKHgpOwogICAgLy8gSWYgZih4KSBjaGFuZ2VzIGluIHZpb2xhdGlvbiBvZiB3aGF0IGl0cyBmJyh4KSBzdWdnZXN0ZWQsCiAgICAvLyB0aGF0J3MgYSBkaXNjb250aW51aXR5IGFuZCB3ZSBkcmF3IGFuIGFzeW1wdG90ZS4KICAgIGR5ID0gKHkgLSBweSkgKiBzdGVwOwogICAgaWYgKCFpZ25vcmVEaXNjb250aW51aXR5KSB7CiAgICAgIGlmIChwZHkgIT09IG51bGwgJiYgc2lnbih5IC0gcHkpICE9PSBzaWduKHBkeSkgJiYgYWJzKHBkeSkgPiAwLjAxKSB7CiAgICAgICAgZGlzY29udGludWl0eShpLCB4LCB5KTsKICAgICAgICBwZHkgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHBkeSA9IGR5OwogICAgICB9CiAgICB9CiAgICB2ZXJ0ZXgoeCAqIHhzY2FsZSwgeSAqIHlzY2FsZSk7CiAgICBweSA9IHk7CiAgfQogIGVuZCgpOwp9CgovKioKICogUGxvdCBhIDJEIGdyYXBoIHVzaW5nIGEgY29sbGVjdGlvbiBvZiBhbnktZGltZW5zaW9uYWwgZGF0YSwKICogYnkgaW5kaWNhdGluZyB3aGljaCBkaW1lbnNpb24gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdGhlIGB4YAogKiBhbmQgd2hpY2ggZGltZW5zaW9uIHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBgeWAuIElmIG5vIGB4YAogKiBhbmQgYHlgIGFyZSBwcm92aWRlZCwgYGRhdGFgIHdpbGwgYmUgdHJlYXRlZCBhIDFEIGFycmF5IGFuZAogKiB3aWxsIHBsb3Qgd2l0aCB0aGUgYXJyYXkgaW5kZXggYXMgYHhgIGFuZCBlbGVtZW50IGF0IHRoYXQKICogaW5kZXggYXMgYHlgLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIG5vRmlsbCgpOwogKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0LzIpOwogKgogKiAgICAgICBzZXRTdHJva2UoYGRhcmtncmVlbmApOwogKiAgICAgICBsZXQgZGF0YSA9IGFycmF5KHdpZHRoLCAoaSkgPT4gW2ksIGhlaWdodC8yICogc2luKGkvMjUpXSk7CiAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDEpOwogKgogKiAgICAgICBzZXRTdHJva2UoYHB1cnBsZWApOwogKiAgICAgICBkYXRhID0gYXJyYXkod2lkdGgsIChpKSA9PiAoewogKiAgICAgICAgIG1lZXA6IGksCiAqICAgICAgICAgbW9vcDogaGVpZ2h0LzIgKiBjb3MoaS8yNSkKICogICAgICAgfSkpOwogKiAgICAgICBwbG90RGF0YShkYXRhLCBgbWVlcGAsIGBtb29wYCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtvYmplY3RbXX0gZGF0YSBUaGUgYW55LWRpbWVuc2lvbmFsIGRhdGEgZnJvbSB3aGljaCB0byBwbG90IG9uZSBkaW1lbnNpb24gYWdhaW4gYW5vdGhlcgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHg/IFRoZSBwcm9wZXJ0eSBuYW1lIG9yIGluZGl2aWR1YWwgZWxlbWVudCBhcnJheSBpbmRleCB0byB1c2UgYXMgeCBkaW1lbnNpb24KICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB5PyBUaGUgcHJvcGVydHkgbmFtZSBvciBpbmRpdmlkdWFsIGVsZW1lbnQgYXJyYXkgaW5kZXggdG8gdXNlIGFzIHkgZGltZW5zaW9uCiAqCiAqIEBzZWUge0BsaW5rIHBsb3R9CiAqLwpmdW5jdGlvbiBwbG90RGF0YShkYXRhLCB4LCB5KSB7CiAgc3RhcnQoKTsKICBpZiAoeCAhPT0gdW5kZWZpbmVkICYmIHkgIT09IHVuZGVmaW5lZCkgewogICAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHkgPSB4Lnk7CiAgICAgIHggPSB4Lng7CiAgICB9CiAgICBkYXRhLmZvckVhY2goKHApID0+IHZlcnRleChwW3hdLCBwW3ldKSk7CiAgfSBlbHNlIHsKICAgIGRhdGEuZm9yRWFjaCgoeSwgeCkgPT4gdmVydGV4KHgsIHkpKTsKICB9CiAgZW5kKCk7Cn0KCi8qKgogKiBEcmF3IGEgcG9pbnQgKGVpdGhlciBmcm9tIHgveSBvciBwb2ludC1saWtlKS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICByYW5nZSgwLCBUQVUsIChhKSA9PiB7CiAqICAgICAgICAgcG9pbnQoNDAgKiBjb3MoYSksIDQwICogc2luKGEpKTsKICogICAgICAgfSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHBvaW50J3MgY2VudGVyIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHBvaW50J3MgY2VudGVyIHkgcGl4ZWwgdmFsdWUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHBvaW50J3MgY2VudGVyIHt4LHl9IGNvb3JkaW5hdGUKICoKICogQHNlZSB7QGxpbmsgY2lyY2xlfQogKi8KZnVuY3Rpb24gcG9pbnQoeCwgeSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGNpcmNsZSh4LCB5LCAzKTsKfQoKLyoqCiAqIERyYXcgYSByZWN0YW5nbGUgYXQgdGhlIHNwZWNpZmllZCBjb29yZGluYXRlLCB3aXRoCiAqIHRoZSBzcGVjaWZpYyB3aWR0aCBhbmQgaGVpZ2h0LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgcmVkYCk7CiAqICAgICAgIHJlY3QoNDAsIDQwLCB3aWR0aCAtIDgwLCBoZWlnaHQgLSA4MCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHJlY3QncyBjb3JuZXIgIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHJlY3QncyBjb3JuZXIgIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHcgVGhlIHdpZHRoIG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICogQHBhcmFtIHtudW1iZXJ9IGggVGhlIGhlaWdodCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSByZWN0O3MgY29yZGVyIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHcgVGhlIHdpZHRoIG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICogQHBhcmFtIHtudW1iZXJ9IGggVGhlIGhlaWdodCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqLwpmdW5jdGlvbiByZWN0KHgsIHksIHcsIGgpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIGggPSB3OwogICAgdyA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIHN0YXJ0KCk7CiAgdmVydGV4KHgsIHkpOwogIHZlcnRleCh4ICsgdywgeSk7CiAgdmVydGV4KHggKyB3LCB5ICsgaCk7CiAgdmVydGV4KHgsIHkgKyBoKTsKICB2ZXJ0ZXgoeCwgeSk7CiAgZW5kKCk7Cn0KCi8qKgogKiBEcmF3IGEgY2FyZGluYWwgKGhlcm1pdGUpIHNwbGluZSB0aGF0IHBhc3NlcyB0aHJvdWdoIGVhY2gKICogcG9pbnQgcHJvdmlkZWQsIHVzaW5nIGEgbWF0aGVtYXRpY2FsbHkgdmlydHVhbCBzdGFydCBhbmQKICogZW5kIHRvIGVuc3VyZSB0aGUgY3VydmUgc3RhcnRzIGFuZCBlbmRzIGF0IHRoZSBwcm92aWRlZAogKiBzdGFydCBhbmQgZW5kIHBvaW50LiBUaGlzIGNhbiBiZSBieXBhc3NlZCBieSBzZXR0aW5nCiAqIHRoZSBgdmlydHVhbGAgYXJndW1lbnQgdG8gYGZhbHNlYC4KICoKICogQWRkaXRpb25hbGx5LCB0aGUgc3BsaW5lJ3MgdGlnaHRuZXNzLCB3aGljaCBjb250cm9scwogKiBob3cgImJlbmR5IiB0aGUgc3BsaW5lIGlzICh0aGUgdGlnaHRlciB0aGUgc3BsaW5lLAogKiB0aGUgc2hhcnBlciBiZW5kcyBiZWNvbWUpIGNhbiBiZSBjb250cm9sbGVkIGJ5IHNldHRpbmcKICogdGhlIGB0aWdodG5lc3NgIHZhbHVlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHJhbmdlKDAsIFRBVSwgUEkgLyA1LCAoYSkgPT4gcG9pbnRzLnB1c2goCiAqICAgICAgICAgbmV3IFBvaW50KAogKiAgICAgICAgICAgcmFuZG9tKDMwKSArIDUwICogY29zKGEpLAogKiAgICAgICAgICAgcmFuZG9tKDMwKSArIDUwICogc2luKGEpCiAqICAgICAgICAgKQogKiAgICAgICApKTsKICogICAgICAgc2V0TW92YWJsZSguLi5wb2ludHMpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpOwogKiAgICAgICBzZXRGaWxsKGAjMDAwMmApOwogKiAgICAgICBzcGxpbmUoLi4ucG9pbnRzKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBwb2ludHMuZm9yRWFjaChwID0+IHBvaW50KHApKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKgogKiBAcGFyYW0ge1BvaW50TGlrZVtdfSAuLi5wb2ludHMgVGhlIHBvaW50cyBhY3Jvc3Mgd2hpY2ggdG8gZml0IGEgc3BsaW5lCiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlydHVhbD8gV2hldGhlciBvciBub3QgdG8gaW52ZW50IG5ldyBtYXRoZW1hdGljYWwgcG9pbnRzIHRoYXQgZW5zdXJlIHRoZSBjdXJ2ZSBzdGFydHMgYW5kIGVuZHMgYXQgdGhlIHByb3ZpZGVkIHN0YXJ0IGFuZCBlbmQgcG9pbnRzLiAoZGVmYXVsdCA9IHRydWUpCiAqIEBwYXJhbSB7bnVtYmVyfSB0aWdodG5lc3M/IEhvdyB0aWdodCB0aGlzIHNwbGluZSBzaG91bGQgYmUgZml0IHRocm91Z2ggdGhlIHBvaW50cyBwcm92aWRlZC4gVGhlIGhpZ2hlciB0aGUgdGlnaHRuZXNzLCB0aGUgbW9yZSBwb2x5Z29uYWwgdGhlIGN1cnZlIGJlY29tZXMgKGRlZmF1bHQgPSAxKQogKgogKiBAc2VlIHtAbGluayBiZXppZXJ9CiAqIEBzZWUge0BsaW5rIGJzcGxpbmV9CiAqLwpmdW5jdGlvbiBzcGxpbmUoLi4uYXJncykgewogIGxldCBwb2ludHMgPSBhcmdzOwogIGxldCB2aXJ0dWFsID0gdHJ1ZTsKICBsZXQgVCA9IDE7CgogIC8vIGlmIHRoZSBsYXN0IG9yIHNpbmdsZS10by1sYXN0IGlzIGEgYm9vbCwgdGhhdCdzIGB2aXJ0dWFsYDoKICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gYGJvb2xlYW5gKSB7CiAgICBbdmlydHVhbF0gPSBhcmdzLnNwbGljZShhcmdzLmxlbmd0aCAtIDEsIDEpOwogIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAyXSA9PT0gYGJvb2xlYW5gKSB7CiAgICBbdmlydHVhbF0gPSBhcmdzLnNwbGljZShhcmdzLmxlbmd0aCAtIDIsIDEpOwogIH0KCiAgLy8gSWYgdGhpcyBtYWtlcyB0aGUgbnVtYmVyIG9mIGFyZ3Mgb2RkLCB0aGUgbGFzdCBhcmcgaXMgVAogIGlmIChhcmdzLmxlbmd0aCAlIDIgPT09IDEpIHsKICAgIFtUXSA9IGFyZ3Muc3BsaWNlKGFyZ3MubGVuZ3RoIC0gMSwgMSk7CiAgfQoKICAvLyB0aGVuLCB3ZSBjYW4gY29udmVydAogIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gYG51bWJlcmApIHsKICAgIHBvaW50cyA9IFtdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIHBvaW50cy5wdXNoKHsgeDogYXJnc1tpXSwgeTogYXJnc1tpICsgMV0gfSk7CiAgICB9CiAgfQoKICBsZXQgY3BvaW50cyA9IHBvaW50czsKICBpZiAodmlydHVhbCkgewogICAgY29uc3QgZjAgPSBwb2ludHNbMF0sCiAgICAgIGYxID0gcG9pbnRzWzFdLAogICAgICBmMiA9IHBvaW50c1syXSwKICAgICAgZnNtID0gbmV3IFZlY3RvcihmMC54IC8gMiArIGYyLnggLyAyLCBmMC55IC8gMiArIGYyLnkgLyAyKSwKICAgICAgZjByID0gbmV3IFZlY3RvcihmMCkucmVmbGVjdChmMSksCiAgICAgIGZzciA9IGZzbS5yZWZsZWN0KGYxKSwKICAgICAgZm4gPSBuZXcgVmVjdG9yKGYwci54IC8gMiArIGZzci54IC8gMiwgZjByLnkgLyAyICsgZnNyLnkgLyAyKSwKICAgICAgbDIgPSBwb2ludHMuYXQoLTMpLAogICAgICBsMSA9IHBvaW50cy5hdCgtMiksCiAgICAgIGwwID0gcG9pbnRzLmF0KC0xKSwKICAgICAgbHNtID0gbmV3IFZlY3RvcihsMC54IC8gMiArIGwyLnggLyAyLCBsMC55IC8gMiArIGwyLnkgLyAyKSwKICAgICAgbDByID0gbmV3IFZlY3RvcihsMCkucmVmbGVjdChsMSksCiAgICAgIGxuID0gbmV3IFZlY3RvcihsMHIueCAvIDIgKyBsc20ueCAvIDIsIGwwci55IC8gMiArIGxzbS55IC8gMik7CiAgICBjcG9pbnRzID0gW2ZuLCAuLi5wb2ludHMsIGxuXTsKICB9CgogIC8vIGZvdXIgcG9pbnQgc2xpZGluZyB3aW5kb3cgb3ZlciB0aGUgc2VnbWVudAogIGNvbnN0IGJlemllclBvaW50cyA9IFtdOwogIGZvciAobGV0IGkgPSAwLCBlID0gY3BvaW50cy5sZW5ndGggLSAzOyBpIDwgZTsgaSsrKSB7CiAgICBsZXQgW2MxLCBjMiwgYzMsIGM0XSA9IGNwb2ludHMuc2xpY2UoaSwgaSArIDQpOwogICAgbGV0IHAyID0gewogICAgICB4OiBjMi54ICsgKGMzLnggLSBjMS54KSAvICg2ICogVCksCiAgICAgIHk6IGMyLnkgKyAoYzMueSAtIGMxLnkpIC8gKDYgKiBUKSwKICAgIH07CiAgICBsZXQgcDMgPSB7CiAgICAgIHg6IGMzLnggLSAoYzQueCAtIGMyLngpIC8gKDYgKiBUKSwKICAgICAgeTogYzMueSAtIChjNC55IC0gYzIueSkgLyAoNiAqIFQpLAogICAgfTsKICAgIGlmIChpID09PSAwKSBiZXppZXJQb2ludHMucHVzaChjMik7CiAgICBiZXppZXJQb2ludHMucHVzaChwMiwgcDMsIGMzKTsKICB9CgogIGJlemllciguLi5iZXppZXJQb2ludHMpOwp9CgovKioKICogU3RhcnRzIGEgKG5ldykgc2hhcGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGBnb2xkYCk7CiAqICAgICAgIHN0YXJ0KCk7CiAqICAgICAgIHZlcnRleCgwLGhlaWdodC8yKTsKICogICAgICAgdmVydGV4KHdpZHRoLzIsIDApOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgsIGhlaWdodC8yKTsKICogICAgICAgdmVydGV4KHdpZHRoLzIsIGhlaWdodCk7CiAqICAgICAgIGVuZCh0cnVlKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBlbmR9CiAqIEBzZWUge0BsaW5rIHZlcnRleH0KICogQHNlZSB7QGxpbmsgc3RhcnRTaGFwZX0KICovCmZ1bmN0aW9uIHN0YXJ0KCkgewogIGlmIChfX2N0eC5saW5lV2lkdGggJSAyID09PSAxKSB7CiAgICBfX2N0eC50cmFuc2xhdGUoMC41LCAwLjUpOwogIH0KICBfX2N0eC5iZWdpblBhdGgoKTsKICBfX2ZpcnN0ID0gZmFsc2U7Cn0KCi8qKgogKiBEcmF3IHNvbWUgdGV4dCB0byB0aGUgc2NyZWVuLiBJdHMgcGxhY2VtZW50IGlzCiAqIGRldGVybWluZWQgYnkgYm90aCB0aGUgY29vcmRpbmF0ZSBwcm92aWRlZCwgYW5kCiAqIHRoZSB4L3kgYWxpZ25tZW50IHByb3ZpZGVkLiBWYWxpZCBgeEFsaWduYCB2YWx1ZXMKICogYXJlOgogKgogKiAtIENFTlRFUiAtIHRoZSB0ZXh0IGFuY2hvciBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0ZXh0LiBUZXh0IGlzIHBsYWNlZCBldmVubHkgb24gZWl0aGVyIHNpZGUuCiAqIC0gRU5EIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSByaWdodCBmb3IgTFRSIHRleHQsIGFuZCBvbiB0aGUgbGVmdCBmb3IgUlRMIHRleHQuCiAqIC0gTEVGVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSB0ZXh0LiBhbGwgdGV4dCBpcyB0byB0aGUgcmlnaHQuCiAqIC0gUklHSFQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHRleHQuIEFsbCB0ZXh0IGlzIHRvIHRoZSBsZWZ0LgogKiAtIFNUQVJUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSBsZWZ0IGZvciBMVFIgdGV4dCwgYW5kIG9uIHRoZSByaWdodCBmb3IgUlRMIHRleHQuCiAqCiAqIFZhbGlkIGB5QWxpZ25gIHZhbHVlcyBhcmU6CiAqCiAqIC0gQUxQSEFCRVRJQyAtIHN0YW5kYXJkIHRleHQgYWxpZ25tZW50CiAqIC0gQk9UVE9NIC0gdGhlIHRleHQgaXMgYWxpZ25lZCB0byB0aGUgYm90dG9tIG9mIHRoZSBib3VuZGluZyBib3gKICogLSBIQU5HSU5HIC0gcmVsZXZhbnQgZm9yIFRpYmV0YW4gYW5kIG90aGVyIEluZGljIHNjcmlwdHMuCiAqIC0gSURFT0dSQVBISUMgLSByZWxldmFudCBmb3IgaWRlb2dyYXBoaWMgQ0pLViB0ZXh0LgogKiAtIE1JRERMRSAtIFRoZSB2ZXJ0aWNhbCBlcXVpdmFsZW50IG9mICJjZW50ZXIiLgogKiAtIFRPUCAtIFRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIHRvcCBvZiB0aGUgdHlwb2dyYXBoaWMgImVtIHNxdWFyZSIuCiAqCiAqIE5vdGUgdGhhdCB0aGUgcHJpbWFyeSB0ZXh0IGNvbG91ciB1c2VzIHRoZSBmaWxsIGNvbG91ci4gSWYgdGV4dAogKiBzdHJva2luZyBpcyBlbmFibGVkLCB0aGUgdGhlIHRleHQgb3V0bGluZSB3aWxsIGJlIGNvbG91cmVkIHVzaW5nCiAqIHRoZSBjdXJyZW50IHN0cm9rZSBjb2xvdXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dCgibm9ybWFsIHRleHQiLCB3aWR0aC8yLCA2MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgdGV4dCgidW5maWxsZWQgdGV4dCIsIHdpZHRoLzIsIDEwMCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgICBzZXRTdHJva2UoYHJlZGApOwogKiAgICAgICBzZXRGaWxsKGB5ZWxsb3dgKTsKICogICAgICAgdGV4dCgiZmFuY3kgdGV4dCIsIHdpZHRoLzIsIDE0MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHQgd2Ugd2FudCB0byBzaG93CiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSB0ZXh0IGxvY2F0aW9uJ3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgdGV4dCBsb2NhdGlvbidzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtzdHJpbmd9IHhBbGlnbj8gQW4gb3B0aW9uYWwgaG9yaXpvbnRhbCBhbGlnbm1lbnQgc3RyaW5nCiAqIEBwYXJhbSB7c3RyaW5nfSB5QWxpZ24/IEFuIG9wdGlvbmFsIHZlcnRpY2FsICBhbGlnbm1lbnQgc3RyaW5nCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHQgd2Ugd2FudCB0byBzaG93CiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSB0ZXh0IGxvY2F0aW9uJ3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge3N0cmluZ30geEFsaWduPyBBbiBvcHRpb25hbCBob3Jpem9udGFsIGFsaWdubWVudCBzdHJpbmcKICogQHBhcmFtIHtzdHJpbmd9IHlBbGlnbj8gQW4gb3B0aW9uYWwgdmVydGljYWwgIGFsaWdubWVudCBzdHJpbmcKICoKICogQHNlZSB7QGxpbmsgc2V0VGV4dFN0cm9rZX0KICovCmZ1bmN0aW9uIHRleHQoc3RyLCB4LCB5LCB4QWxpZ24sIHlBbGlnbikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeUFsaWduID0geEFsaWduOwogICAgeEFsaWduID0geTsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KCiAgc2F2ZSgpOwogIGlmICh4QWxpZ24pIHsKICAgIHNldFRleHRBbGlnbih4QWxpZ24sIHlBbGlnbik7CiAgfQogIF9fY3R4LmZpbGxUZXh0KHN0ciwgeCwgeSk7CiAgaWYgKF9fdGV4dFN0cm9rZSkgewogICAgc2V0U3Ryb2tlKF9fdGV4dFN0cm9rZSk7CiAgICBfX2N0eC5zdHJva2VUZXh0KHN0ciwgeCwgeSk7CiAgfQogIHJlc3RvcmUoKTsKfQoKLyoqCiAqIERyYXcgYSB0cmlhbmdsZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICB0cmlhbmdsZSh3aWR0aC8yLCAzMCwgMS80ICogd2lkdGgsIDE2MCwgMy80ICogd2lkdGgsIDExMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHgxIFRoZSBmaXJzdCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHgyIFRoZSBzZWNvbmQgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MiBUaGUgc2Vjb25kIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geDMgVGhlIHRoaXJkIHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTMgVGhlIHRoaXJkIHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDEgVGhlIGZpcnN0IHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGlrZX0gcDIgVGhlIHNlY29uZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpa2V9IHAzIFRoZSB0aGlyZCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICovCmZ1bmN0aW9uIHRyaWFuZ2xlKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHsKICBpZiAoeDEueCAhPT0gdW5kZWZpbmVkICYmIHgxLnkgIT09IHVuZGVmaW5lZCkgewogICAgeTMgPSB4Mi55OwogICAgeDMgPSB4Mi54OwogICAgeTIgPSB5MS55OwogICAgeDIgPSB5MS54OwogICAgeTEgPSB4MS55OwogICAgeDEgPSB4MS54OwogIH0KCiAgc3RhcnQoKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICB2ZXJ0ZXgoeDIsIHkyKTsKICB2ZXJ0ZXgoeDMsIHkzKTsKICB2ZXJ0ZXgoeDEsIHkxKTsKICBlbmQoKTsKfQoKLyoqCiAqIEFkZCBhIHZlcnRleCB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBzaGFwZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICBzdGFydCgpOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgvMiwgMzApOwogKiAgICAgICB2ZXJ0ZXgoMS80ICogd2lkdGgsIDE2MCk7CiAqICAgICAgIHZlcnRleCgzLzQgKiB3aWR0aCwgMTEwKTsKICogICAgICAgZW5kKCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHZlcnRleCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHZlcnRleCdzIHkgcGl4ZWwgdmFsdWUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHZlcnRleCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIGVuZH0KICogQHNlZSB7QGxpbmsgc3RhcnR9CiAqLwpmdW5jdGlvbiB2ZXJ0ZXgoeCwgeSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGlmIChfX2ZpcnN0KSB7CiAgICBfX2N0eC5saW5lVG8oeCwgeSk7CiAgfSBlbHNlIHsKICAgIF9fZmlyc3QgPSB7IHgsIHkgfTsKICAgIF9fY3R4Lm1vdmVUbyh4LCB5KTsKICB9Cn0KLyoqCiAqIENyZWF0ZSBhbiBhcnJheSBvZiBzcGVjaWZpZWQgbGVuZ3RoLCBvcHRpb25hbGx5IGZpbGxlZCB1c2luZyBhCiAqIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGVsZW1lbnQgaW5kZXggYXMgc2luZ2xlIGlucHV0IGFyZ3VtZW50LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIG5vRmlsbCgpOwogKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0LzIpOwogKiAgICAgICBsZXQgZGF0YSA9IGFycmF5KHdpZHRoLCAoaSkgPT4gW2ksIGhlaWdodC8yICogc2luKGkvMjUpXSk7CiAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDEpOwogKiAgICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBzaXplIG9mIHRoZSBhcnJheSB5b3Ugd2FudAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWxsRnVuY3Rpb24/IFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IGdldHMgdXNlZCB0byBmaWxsIHRoZSBhcnJheQogKi8KZnVuY3Rpb24gYXJyYXkobGVuLCBmaWxsRnVuY3Rpb24pIHsKICBjb25zdCBhcnIgPSBuZXcgQXJyYXkobGVuKS5maWxsKCk7CiAgaWYgKGZpbGxGdW5jdGlvbikgewogICAgcmV0dXJuIGFyci5tYXAoKF8sIGkpID0+IGZpbGxGdW5jdGlvbihpKSk7CiAgfQogIHJldHVybiBhcnI7Cn0KCi8qKgogKiBFbXB0eSB0aGUgbGlzdCBvZiBtb3ZhYmxlIHBvaW50cyBpbiB5b3VyIGdyYXBoaWMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgYWRkQnV0dG9uKGBsb2NrYCwgKCkgPT4gewogKiAgICAgICAgIGNsZWFyTW92YWJsZSgpOwogKiAgICAgICAgIHJlZHJhdygpOwogKiAgICAgICB9KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBmb3IobGV0IHAgb2YgcG9pbnRzKSB7CiAqICAgICAgICAgc2V0Q29sb3IoaXNNb3ZhYmxlKHApID8gYHJlZGAgOiBgZ3JleWApOwogKiAgICAgICAgIHBvaW50KHApOwogKiAgICAgICB9CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LHkpIHsKICogICAgICAgaWYgKGN1cnJlbnRNb3ZhYmxlKSByZXR1cm47CiAqICAgICAgIGNvbnN0IHAgPSBuZXcgUG9pbnQoeCx5KTsKICogICAgICAgcG9pbnRzLnB1c2gocCk7CiAqICAgICAgIHNldE1vdmFibGUocCk7CiAqICAgICAgIHJlZHJhdygpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIGlzTW92YWJsZX0KICogQHNlZSB7QGxpbmsgc2V0TW92YWJsZX0KICovCmZ1bmN0aW9uIGNsZWFyTW92YWJsZSgpIHsKICBfX21vdmFibGVfcG9pbnRzLnNwbGljZSgwLCBfX21vdmFibGVfcG9pbnRzLmxlbmd0aCk7Cn0KCi8qKgogKiBDcmVhdGUgYSBjb3B5IG9mIHRoZSBjdXJyZW50IGNhbnZhcyBlbGVtZW50CiAqIGZvciB1c2Ugc29tZXdoZXJlIGVsc2UgaW4geW91ciBvd24gY29kZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBwaW5rYCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LHkpIHsKICogICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCgKICogICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoYGdyYXBoaWNzOnVwZGF0ZWAsIHsKICogICAgICAgICAgIGRldGFpbDogewogKiAgICAgICAgICAgICBjYW52YXM6IGNvcHkoKQogKiAgICAgICAgICAgfQogKiAgICAgICAgIH0pCiAqICAgICAgICk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fSBBIGNvcHkgb2YgdGhlIGN1cnJlbnQgY2FudmFzCiAqLwpmdW5jdGlvbiBjb3B5KCkgewogIGNvbnN0IGNvcHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBjYW52YXNgKTsKICBjb3B5LndpZHRoID0gd2lkdGg7CiAgY29weS5oZWlnaHQgPSBoZWlnaHQ7CiAgY29uc3QgY3R4ID0gY29weS5nZXRDb250ZXh0KGAyZGApOwogIGN0eC5kcmF3SW1hZ2UoX19jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpOwogIHJldHVybiBjb3B5Owp9CgovKioKICogR2VuZXJhdGVzIGEgY29sb3IgYmFzZWQgb24gdGhlIEhTTCBjb2xvciBzcGFjZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGNvbG9yKDQ1LCA4MCwgOTApKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gaHVlIGluIHRoZSByYW5nZSBbMCwgMzYwXQogKiBAcGFyYW0ge251bWJlcn0gc2F0dXJhdGlvbiBpbiB0aGUgcmFuZ2UgWzAsIDEwMF0KICogQHBhcmFtIHtudW1iZXJ9IGxpZ2h0bmVzcyBpbiB0aGUgcmFuZ2UgWzAsIDEwMF0KICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgaW4gdGhlIHJhbmdlIFswLCAxXQogKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBoc2xhIGNvbG9yIHN0cmluZwogKgogKiBAc2VlIHtAbGluayByYW5kb21Db2xvcn0KICovCmZ1bmN0aW9uIGNvbG9yKGggPSBfX2N1cnJlbnRfaHVlLCBzID0gNTAsIGwgPSA1MCwgYSA9IDEpIHsKICByZXR1cm4gYGhzbGEoJHtofSwke3N9JSwke2x9JSwke2F9KWA7Cn0KCi8qKgogKiBGaW5kIGFuIEhUTUwgZWxlbWVudCBpbnNpZGUgeW91ciBncmFwaGljcy1lbGVtZW50CiAqIGJ5IHF1ZXJ5IHNlbGVjdG9yLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG86CiAqCiAqIGBgYAogKiB5b3VyRWxlbWVudC5xdWVyeVNlbGVjdG9yKHFzKQogKiBgYGAKICoKICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U2VsZWN0b3IgQSBxdWVyeSBzZWxlY3RvcgogKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH0gVGhlIG1hdGNoZWQgZWxlbWVudCwgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guCiAqLwpmdW5jdGlvbiBmaW5kKHFzKSB7CiAgcmV0dXJuIF9fZWxlbWVudC5xdWVyeVNlbGVjdG9yKHFzKTsKfQoKLyoqCiAqIEZpbmQgYWxsIEhUTUwgZWxlbWVudHMgaW5zaWRlIHlvdXIgZ3JhcGhpY3MtZWxlbWVudAogKiB0aGF0IG1hdGNoIGEgZ2l2ZW4gcXVlcnkgc2VsZWN0b3IuIFRoaXMgaXMgZXF1aXZhbGVudCB0bzoKICoKICogYGBgCiAqIEFycmF5LmZyb20oeW91ckVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChxcykpCiAqIGBgYAogKgogKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTZWxlY3RvciBBIHF1ZXJ5IHNlbGVjdG9yCiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfSBBbiBhcnJheSB3aXRoIGFsbCBtYXRjaGluZyBlbGVtZW50cywgW10gaWYgdGhlcmUgd2VyZSBubyBtYXRjaGVzLgogKi8KZnVuY3Rpb24gZmluZEFsbChxcykgewogIHJldHVybiBbLi4uX19lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXMpXTsKfQoKLyoqCiAqIE1hcmsgYSBzcGVjaWZpYyBjb2xvciBhcyB0aGUgaGlnaGxpZ2h0IGNvbG9yLAogKiB3aGljaCBjYXVzZXMgdGhlIGdyYXBoaWMgdG8gcmVkcmF3IHdpdGggdGhhdAogKiBjb2xvciByZXBsYWNlZCBieSB3aGljaGV2ZXIgY29sb3IgeW91IHBpY2tlZAogKiBhcyBoaWdobGlnaHQgY29sb3IuCiAqCiAqIE5vdGUgdGhhdCB5b3UgY2FuIG9ubHkgdXNlIG5hbWVkIChDU1MpIGNvbG9ycwogKiB3aXRoIHRoaXMgZnVuY3Rpb24uCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEhpZ2hsaWdodENvbG9yKGBsaW1lYCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dCgibGV0J3MgZ28iLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJBY3RpdmUoc3RhdGUpIHsKICogICAgICAgaWYgKHN0YXRlKSBoaWdobGlnaHQoYHJlZGApOwogKiAgICAgICBlbHNlIGhpZ2hsaWdodChmYWxzZSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtjb2xvcnxib29sZWFufSBjb2xvciBTZXQgdGhlIGNvbG9yIHRoYXQgc2hvdWxkIGdldCByZXBsYWNlZCB3aXRoIHRoZSBoaWdobGlnaHQgY29sb3IsIG9yIGRpc2FibGUgaGlnaGxpZ2h0IHdoZW4gY29sb3IgaXMgYGZhbHNlYAogKgogKiBAc2VlIHtAbGluayBzZXRIaWdobGlnaHRDb2xvcn0KICovCmZ1bmN0aW9uIGhpZ2hsaWdodChjb2xvcikgewogIGlmIChDU1NfQ09MT1JfTUFQW2NvbG9yXSkgewogICAgX19oaWdobGlnaHRfY29sb3IgPSBDU1NfQ09MT1JfTUFQW2NvbG9yXTsKICB9IGVsc2UgewogICAgX19oaWdobGlnaHRfY29sb3IgPSBjb2xvcjsKICB9CiAgcmVkcmF3KCk7Cn0KCi8qKgogKiBDaGVjayB3aGV0aGVyIGEgcG9pbnQgaXMgcmVnaXN0ZXJlZCBhcyBtb3ZhYmxlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIGFkZEJ1dHRvbihgbG9ja2AsICgpID0+IHsKICogICAgICAgICBjbGVhck1vdmFibGUoKTsKICogICAgICAgICByZWRyYXcoKTsKICogICAgICAgfSk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgZm9yKGxldCBwIG9mIHBvaW50cykgewogKiAgICAgICAgIHNldENvbG9yKGlzTW92YWJsZShwKSA/IGByZWRgIDogYGdyZXlgKTsKICogICAgICAgICBwb2ludChwKTsKICogICAgICAgfQogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckRvd24oeCx5KSB7CiAqICAgICAgIGlmIChjdXJyZW50TW92YWJsZSkgcmV0dXJuOwogKiAgICAgICBjb25zdCBwID0gbmV3IFBvaW50KHgseSk7CiAqICAgICAgIHBvaW50cy5wdXNoKHApOwogKiAgICAgICBzZXRNb3ZhYmxlKHApOwogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gVGhlIHBvaW50IHRoYXQgd2Ugd2FudCB0byBjaGVjayAibW92YWJpbGl0eSIgZm9yCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG91ciBwb2ludCBpcyBpbiB0aGUgbGlzdCBvZiBtb3ZhYmxlIHBvaW50cywgb3RoZXJ3aXNlIGZhbHNlCiAqCiAqIEBzZWUge0BsaW5rIGNsZWFyTW92YWJsZX0KICogQHNlZSB7QGxpbmsgc2V0TW92YWJsZX0KICovCmZ1bmN0aW9uIGlzTW92YWJsZShwb2ludCkgewogIHJldHVybiBfX21vdmFibGVfcG9pbnRzLmluY2x1ZGVzKHBvaW50KTsKfQoKLyoqCiAqIEdldCB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IHRoaXMKICogZ3JhcGhpYyBoYXMgYmVlbiBydW5uaW5nLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBjb25zdCBzZWNvbmRzID0gKG1pbGxpcygpLzEwMDApfDA7CiAqICAgICAgIHRleHQoYCR7c2Vjb25kc31zYCwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHJldHVybnMge251bWJlcn0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZ3JhcGhpYyBsb2FkZWQgaW4KICovCmZ1bmN0aW9uIG1pbGxpcygpIHsKICByZXR1cm4gRGF0ZS5ub3coKSAtIF9fc3RhcnRfdGltZTsKfQoKLyoqCiAqIFBhdXNlIHRoZSBncmFwaGljIGlmIGl0cyBjdXJyZW50bHkgcGxheWluZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHBsYXkoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgY29uc3Qgc2Vjb25kcyA9IChtaWxsaXMoKS8xMDAwKS50b0ZpeGVkKDEpOwogKiAgICAgICB0ZXh0KGAke3NlY29uZHN9c2AsIHdpZHRoLzIsIGhlaWdodC8yKQogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckFjdGl2ZShzdGF0ZSkgewogKiAgICAgICBpZihzdGF0ZSkgewogKiAgICAgICAgIHBhdXNlKCk7CiAqICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgcGxheSgpOwogKiAgICAgICB9CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgcGxheX0KICogQHNlZSB7QGxpbmsgdG9nZ2xlUGxheX0KICovCmZ1bmN0aW9uIHBhdXNlKCkgewogIHBsYXlpbmcgPSBmYWxzZTsKfQoKLyoqCiAqIFN0YXJ0IHBsYXlpbmcgeW91ciBncmFwaGljLCBtZWFuaW5nIGl0IHdpbGwgY2FsbCBkcmF3KCkKICogYXQgd2hhdGV2ZXIgcmF0ZSB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGxvb3AgaXMKICogYWxsb3dlZCB0byBydW4gb24geW91ciBjb21wdXRlci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGxldCBmcHMgPSAwOwogKiAgICAgbGV0IGNoZWNrZWQgPSBmYWxzZTsKICogICAgIGxldCBsYXN0RnJhbWVDaGVjayA9IDA7CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIGNvbnN0IHNlY29uZHMgPSAobWlsbGlzKCkvMTAwMCkudG9GaXhlZCgxKTsKICogICAgICAgdGV4dChgZnBzOiAke2Zwc31gLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgICAgaWYgKHNlY29uZHMuZW5kc1dpdGgoYC4wYCkpIHsKICogICAgICAgICBpZiAoIWNoZWNrZWQpIHsKICogICAgICAgICAgIGNoZWNrZWQgPSB0cnVlOwogKiAgICAgICAgICAgZnBzID0gZnJhbWUgLSBsYXN0RnJhbWVDaGVjazsKICogICAgICAgICAgIGxhc3RGcmFtZUNoZWNrID0gZnJhbWU7CiAqICAgICAgICAgfQogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIGNoZWNrZWQgPSBmYWxzZTsKICogICAgICAgfQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHBhdXNlfQogKiBAc2VlIHtAbGluayB0b2dnbGVQbGF5fQogKi8KZnVuY3Rpb24gcGxheSgpIHsKICBwbGF5aW5nID0gdHJ1ZTsKICBfX2RyYXcoKTsKfQoKLyoqCiAqIEdlbmVyYXRlIGEgcmFuZG9tIGNvbG91ci4gTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24KICogYWxsb3dzIHlvdSB0byBnZXQgInRoZSBjdXJyZW50bHkgZ2VuZXJhdGVkIHJhbmRvbQogKiBjb2xvdXIiIGluIGRpZmZlcmVudCBvcGFjaXRpZXMgYnkgY2FsbGluZyB0aGUgZnVuY3Rpb24KICogd2l0aCBhbiBvcGFjaXR5IHZhbHVlLCBhbmQgYGZhbHNlYCBhcyBjeWNsZSBhcmd1bWVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckRvd24oKSB7CiAqICAgICAgIHJlZHJhdygpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5IFRoZSBvcGFjaXR5IHZhbHVlIGluIHRoZSByYW5nZSBbMCwxXQogKiBAcGFyYW0ge251bWJlcn0gY3ljbGU/IEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBtb3ZlIG9uIHRvIHRoZSBuZXh0IGNvbG91ciAoZGVmYXVsdCA9IHRydWUpCiAqCiAqIEBzZWUge0BsaW5rIGNvbG9yfQogKi8KZnVuY3Rpb24gcmFuZG9tQ29sb3IoYSA9IDEuMCwgY3ljbGUgPSB0cnVlKSB7CiAgaWYgKGN5Y2xlKSBfX2N1cnJlbnRfaHVlID0gcmFuZG9tKDAsIDM2MCk7CiAgcmV0dXJuIGBoc2xhKCR7X19jdXJyZW50X2h1ZX0sNTAlLDUwJSwke2F9KWA7Cn0KCi8qKgogKiBBbiBhbHRlcm5hdGl2ZSB0byB3cml0aW5nIGZvciBsb29wcywgYmVjYXVzZQogKiBubyBvbmUgd2FudHMgdG8gY29uc3RhbnRseSB3cml0ZSB2YXIgYWxsb2NhdGlvbnMKICogdGhhdCBvbmx5IGxpdmUgZm9yIHRoZSBkdXJhdGlvbiBvZiBhIGxvb3AuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgcmFuZ2UoMCwgVEFVLCAoYSkgPT4gcG9pbnQoNDAgKiBjb3MoYSksIDQwICogc2luKGEpKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBlcXVpdmFsZW50IG9mIGEgZm9yIGxvb3AncyBpbml0aWFsIGBsZXQgaSA9IC4uLmAKICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZXF1aXZhbGVudCBvZiBhIGZvciBsb29wJ3MgYGkgPCBlbmRgCiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwPyBUaGUgc3RlcCBzaXplIGJ5IHdoaWNoIHRvIGluY3JlbWVudCBhdCBlYWNoIGl0ZXJhdGlvbiAoZGVmYXVsdHMgPSBgKHN0YXJ0LWVuZCkvMTBgKQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBydW5GdW5jdGlvbiBUaGUgZnVuY3Rpb24gdG8gcnVuIGF0IGVhY2ggaXRlcmF0aW9uCiAqLwpmdW5jdGlvbiByYW5nZShzdGFydCwgZW5kLCBzdGVwLCBydW5GdW5jdGlvbikgewogIGlmICh0eXBlb2Ygc3RlcCA9PT0gYGZ1bmN0aW9uYCkgewogICAgcnVuRnVuY3Rpb24gPSBzdGVwOwogICAgc3RlcCA9IChlbmQgLSBzdGFydCkgLyAxMDsKICB9CiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IHN0ZXApIHsKICAgIHJ1bkZ1bmN0aW9uKGkpOwogIH0KfQoKLyoqCiAqIFNhZmVseSB0cmlnZ2VyIGEgbmV3IGRyYXcgcGFzcy4gSWYgdGhlIGdyYXBoaWMgaXMgcnVubmluZwogKiBpbiBhbmltYXRlZCBtb2RlLCBvciBhIHJlZHJhdygpIGlzIHRyaWdnZXJlZCBfZHVyaW5nXyBhCiAqIHJlZHJhdygpLCB0aGlzIGNhbGwgd2lsbCBkbyBub3RoaW5nLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY29uc3QgaCA9IG1hcChwb2ludGVyLngsIDAsIHdpZHRoLCAwLCAzNjApOwogKiAgICAgICBjb25zdCBsID0gbWFwKHBvaW50ZXIueSwgMCwgaGVpZ2h0LCA1MCwgMCk7CiAqICAgICAgIGNsZWFyKGNvbG9yKGgsIDEwMCwgbCkpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlck1vdmUoKSB7CiAqICAgICAgIHJlZHJhdygpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqLwpmdW5jdGlvbiByZWRyYXcoKSB7CiAgaWYgKF9fcmVkcmF3aW5nKSByZXR1cm47CiAgaWYgKHBsYXlpbmcpIHJldHVybjsKICBfX3JlZHJhd2luZyA9IHRydWU7CiAgX19kcmF3KCk7CiAgX19yZWRyYXdpbmcgPSBmYWxzZTsKfQoKLyoqCiAqIFJlc3RvcmUgdGhlIGdyYXBoaWNzIGNvbnRleHQgKHRyYW5zZm9ybXMsCiAqIGN1cnJlbnQgY29sb3JzLCBldGMpIHRvIHdoYXQgdGhleSB3ZXJlCiAqIHdoZW4gc2F2ZSgpIHdhcyBjYWxsZWQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUoMCwwLDgwLDApOwogKiAgICAgICBzYXZlKCk7CiAqICAgICAgIHNldENvbG9yKGBkYXJrZ3JlZW5gKQogKiAgICAgICByYW5nZSgwLCA1LCAxLCAoYSkgPT4gewogKiAgICAgICAgIHJvdGF0ZShQSS84KTsKICogICAgICAgICBsaW5lKDAsMCw4MCwwKTsKICogICAgICAgfSk7CiAqICAgICAgIHJlc3RvcmUoKTsKICogICAgICAgbGluZSgtMjAsMCwtODAsMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2F2ZX0KICovCmZ1bmN0aW9uIHJlc3RvcmUoKSB7CiAgX19jdHgucmVzdG9yZSgpOwp9CgovKioKICogTWFyayBvbmUgb3IgbW9yZSBwb2ludHMgYXMgbW92YWJsZSwgbWVhbmluZwogKiB0aGF0IHRoZSB1c2VyIGNhbiByZXBvc2l0aW9uIHRoZSBwb2ludCBhcm91bmQgb24KICogdGhlIGNhbnZhcyBieSB0b3VjaC9jbGljay1kcmFnZ2luZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IHBvaW50cyA9IFtdOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBmb3IgKGxldCBpID0gNDA7IGkgPCAyMDA7IGkgKz0gMjApIHsKICogICAgICAgICBwb2ludHMucHVzaChuZXcgUG9pbnQoaSAtIDIwLCAxMjApKTsKICogICAgICAgfQogKiAgICAgICBzZXRNb3ZhYmxlKC4uLnBvaW50cyk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgc2V0U3Ryb2tlKGBwdXJwbGVgKTsKICogICAgICAgYnNwbGluZSguLi5wb2ludHMpOwogKiAgICAgICBmb3IobGV0IHAgb2YgcG9pbnRzKSBwb2ludChwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge1BvaW50TGlrZVtuXX0gcG9pbnRzIE9uZSBvciBtb3JlIHBvaW50cyB0byBtYXJrIGFzIG1vdmFibGUuCiAqCiAqIEBzZWUge0BsaW5rIGlzTW92YWJsZX0KICogQHNlZSB7QGxpbmsgY2xlYXJNb3ZhYmxlfQogKi8KZnVuY3Rpb24gc2V0TW92YWJsZSguLi5wb2ludHMpIHsKICBwb2ludHMuZm9yRWFjaCgocCkgPT4gewogICAgaWYgKF9fbW92YWJsZV9wb2ludHMuaW5kZXhPZihwKSA9PT0gLTEpIHsKICAgICAgX19tb3ZhYmxlX3BvaW50cy5wdXNoKHApOwogICAgfQogIH0pOwp9CgovKioKICogU2V0IChvciBjaGFuZ2UpIHRoZSBncmFwaGljJ3Mgc2l6ZS4gTm90ZSB0aGF0IHlvdXIgd2lkdGgKICogYW5kIGhlaWdodCB2YWx1ZXMgd2lsbCBnZXQgcm91bmRlZCB0byBpbnRlZ2VyIHZhbHVlcy4KICoKICogTm90ZSB0aGF0IGBzZXRTaXplYCB3aWxsIGltbWVkaWF0ZWx5IHRyaWdnZXIgYSByZWRyYXcsCiAqIHdoZXRoZXIgeW91IHdhbnQgaXQgdG8gb3Igbm90LCBiZWNhdXNlIGNoYW5naW5nIGNhbnZhcwogKiBkaW1lbnNpb25zIGNsZWFycyB0aGUgY2FudmFzLCBuZWNlc3NpdGF0aW5nIGEgcmVkcmF3LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoNDAwLCAyMDApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgY2VudGVyKCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApCiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dChgJHt3aWR0aH0vJHtoZWlnaHR9YCwgMCwgMCwgQ0VOVEVSLCBNSURETEUpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlclVwKCkgewogKiAgICAgICBzZXRTaXplKHJhbmRvbSgxMDAsNDAwKSwgMjAwKTsKICogICAgICAgLy8gTm90ZSB0aGF0IHRoZXJlIGlzIG5vIHJlZHJhdygpIGhlcmUhCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFRoZSBncmFwaGljcyB3aWR0aCBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBUaGUgZ3JhcGhpY3MgaGVpZ2h0IGluIHBpeGVscwogKi8KZnVuY3Rpb24gc2V0U2l6ZSh3ID0gNDAwLCBoID0gMjAwKSB7CiAgd2lkdGggPSBfX2NhbnZhcy53aWR0aCA9IHcgfCAwOwogIGhlaWdodCA9IF9fY2FudmFzLmhlaWdodCA9IGggfCAwOwogIF9fZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IGBjYWxjKDJlbSArICR7d2lkdGh9cHhgOwogIF9fY3R4ID0gX19jYW52YXMuZ2V0Q29udGV4dChgMmRgKTsKICBfX2RyYXcoKTsKfQoKLyoqCiAqIFNhdmUgdGhlIGN1cnJlbnQgZ3JhcGhpY3MgY29udGV4dCAodHJhbnNmb3JtcywKICogY3VycmVudCBjb2xvcnMsIGV0Yykgc28gdGhhdCB0aG9zZSBjYW4gYmUgcmVzdG9yZWQKICogYWZ0ZXIgY2hhbmdpbmcgdGhlbS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IHBvaW50cyA9IFtdOwogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgbGluZSgwLDAsODAsMCk7CiAqICAgICAgIHNhdmUoKTsKICogICAgICAgc2V0Q29sb3IoYGRhcmtncmVlbmApCiAqICAgICAgIHJhbmdlKDAsIDUsIDEsIChhKSA9PiB7CiAqICAgICAgICAgcm90YXRlKFBJLzgpOwogKiAgICAgICAgIGxpbmUoMCwwLDgwLDApOwogKiAgICAgICB9KTsKICogICAgICAgcmVzdG9yZSgpOwogKiAgICAgICBsaW5lKC0yMCwwLC04MCwwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiAqIEBzZWUge0BsaW5rIHJlc3RvcmV9CiAqLwpmdW5jdGlvbiBzYXZlKCkgewogIF9fY3R4LnNhdmUoKTsKfQoKLyoqCiAqIENvbnZlcnQgdGhlIGN1cnJlbnQgY2FudmFzIGludG8gYW4gZGF0YSBVUkwKICogdGhhdCByZXByZXNlbnRzIGEgUE5HIGltYWdlLgogKgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBjYW52YXMgYXMgUE5HIGRhdGEgVVJMCiAqLwpmdW5jdGlvbiB0b0RhdGFVUkwoKSB7CiAgcmV0dXJuIF9fY2FudmFzLnRvRGF0YVVSTCgpOwp9CgovKioKICogSWYgdGhlIGdyYXBoaWMgaXMgY3VycmVudGx5IHBsYXlpbmcsIHBhdXNlIGl0LAogKiBhbmQgaWYgaXQncyBwYXVzZWQsIHBsYXkgaXQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIGNvbnN0IHNlY29uZHMgPSAobWlsbGlzKCkvMTAwMCkudG9GaXhlZCgxKTsKICogICAgICAgdGV4dChgJHtzZWNvbmRzfXNgLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJBY3RpdmUoc3RhdGUpIHsKICogICAgICAgdG9nZ2xlUGxheSgpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEByZXR1cm5zIHtib29sZWFufSBUaGUgbmV3IHBsYXkgc3RhdGUKICoKICogQHNlZSB7QGxpbmsgcGF1c2V9CiAqIEBzZWUge0BsaW5rIHBsYXl9CiAqLwpmdW5jdGlvbiB0b2dnbGVQbGF5KCkgewogIHBsYXlpbmcgPyBwYXVzZSgpIDogcGxheSgpOwogIHJldHVybiBwbGF5aW5nOwp9CmNvbnN0IHsKICAvKioKICAgKiBHZXQgdGhlIGFic29sdXRlIHZhbHVlIGZvciBzb21lIGlucHV0CiAgICoKICAgKiBFeGFtcGxlOgogICAqCiAgICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAgICogICA8Z3JhcGhpY3Mtc291cmNlPgogICAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogICAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogICAqICAgICAgIHRyYW5zbGF0ZSgwLCBoZWlnaHQvMik7CiAgICogICAgICAgbm9GaWxsKCk7CiAgICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogICAqICAgICAgIGxpbmUoLWh1Z2UsIDAsIGh1Z2UsIDApOwogICAqCiAgICogICAgICAgY29uc3QgdzIgPSB3aWR0aC8yOwogICAqICAgICAgIGNvbnN0IGRhdGEgPSBhcnJheSh3aWR0aCwgKHgpID0+IFt4LCB4IC0gdzIsIGFicyh4IC0gdzIpXSk7CiAgICoKICAgKiAgICAgICBzZXRTdHJva2UoYHJlZGApOwogICAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDEpOwogICAqCiAgICogICAgICAgc2V0U3Ryb2tlKGBibHVlYCk7CiAgICogICAgICAgcGxvdERhdGEoZGF0YSwgMCwgMik7CiAgICogICAgIH0KICAgKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogICAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSB2IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW5wdXQgdmFsdWUgd2l0aCBpdHMgc2lnbiBzZXQgdG8gcG9zaXRpdmUKICAgKi8KICBhYnMsCgogIC8qKgogICAqIFRoZSBpbnZlcnNlIGNvc2luZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IHYgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnZlcnNlIGNvc2luZSBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgYXNpbn0KICAgKiBAc2VlIHtAbGluayBhY29zaH0KICAgKi8KICBhY29zLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIGNvc2luZSBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIGNvc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgYXNpbmh9CiAgICogQHNlZSB7QGxpbmsgYWNvc30KICAgKi8KICBhY29zaCwKCiAgLyoqCiAgICogVGhlIGludmVyc2Ugc2luZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW52ZXJzZSBzaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBhY29zfQogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqLwogIGFzaW4sCgogIC8qKgogICAqIFRoZSBoeXBlcmJvbGljIGludmVyc2Ugc2luZSBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIHNpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqIEBzZWUge0BsaW5rIGFzaW59CiAgICovCiAgYXNpbmgsCgogIC8qKgogICAqIFRoZSBpbnZlcnNlIHRhbmdlbnQgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGludmVyc2UgdGFuZ2VudAogICAqCiAgICogQHNlZSB7QGxpbmsgdGFufQogICAqLwogIGF0YW4sCgogIC8qKgogICAqIFRoZSAiYXRhbjIiIGZ1bmN0aW9uCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXRhbjIKICAgKgogICAqIEBwYXJhbSB7eX0gaW5wdXQgQW55IG51bWJlcgogICAqIEBwYXJhbSB7eH0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhdGFuMiBhbmdsZSBmb3IgdGhpcyBudW1iZXIgcGFpcgogICAqLwogIGF0YW4yLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIHRhbmdlbnQgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cGVyYm9saWMgaW52ZXJzZSB0YW5nZW50CiAgICoKICAgKiBAc2VlIHtAbGluayB0YW59CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICogQHNlZSB7QGxpbmsgYXNpbmh9CiAgICovCiAgYXRhbmgsCgogIC8qKgogICAqIFRoZSBjdWJlIHJvb3QgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIChyZWFsKSBjdWJlIHJvb3Qgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIHNxcnR9CiAgICovCiAgY2JydCwKCiAgLyoqCiAgICogVGhlICJyb3VuZCB1cCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIiBmdW5jdGlvbi4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGludGVnZXIgcmVzdWx0IGFmdGVyIHJvdW5kaW5nIHVwLgogICAqCiAgICogQHNlZSB7QGxpbmsgZmxvb3J9CiAgICogQHNlZSB7QGxpbmsgcm91bmR9CiAgICovCiAgY2VpbCwKCiAgLyoqCiAgICogR2V0IHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvIGJpdHMgaW4gdGhlIDMyLWJpdCBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgYSBudW1iZXIKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm8gYml0cyBpbiB0aGUgMzItYml0IGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGF0IG51bWJlci4KICAgKi8KICBjbHozMiwKCiAgLyoqCiAgICogVGhlIGNvc2luZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY29zaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBzaW59CiAgICovCiAgY29zLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cGVyYm9saWMgY29zaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBjb3N9CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgY29zaCwKCiAgLyoqCiAgICogVGhlIGV4cG9uZW50IGZ1bmN0aW9uLCB0aGF0IGlzOiBlXngKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIHZhbHVlIG9mIEUgcmFpc2VkIHRvIHRoYXQgbnVtYmVyJ3MgcG93ZXIKICAgKgogICAqIEBzZWUge0BsaW5rIEV9CiAgICovCiAgZXhwLAoKICAvKioKICAgKiBUaGUgInJvdW5kIGRvd24gdG8gdGhlIG5lYXJlc3QgaW50ZWdlciIgZnVuY3Rpb24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnRlZ2VyIHJlc3VsdCBhZnRlciByb3VuZGluZyBkb3duLgogICAqCiAgICogQHNlZSB7QGxpbmsgY2VpbH0KICAgKiBAc2VlIHtAbGluayByb3VuZH0KICAgKi8KICBmbG9vciwKCiAgLyoqCiAgICogUm91bmQgYSBudW1iZXIgdG8gdGhlIG5lYXJlc3QgMzIgYml0LCByYXRoZXIgdGhhbiB0aGUKICAgKiBzdGFuZGFyZCBKUyA2NCBiaXQsIGZsb2F0aW5nIHBvaW50IHJlcHJlc2VudGF0aW9uLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIGFmdGVyIHJvdW5kaW5nIHRvIHRoZSBuZWFyZXN0IDMyIGJpdCBmbG9hdGluZyBwb2ludCByZXByZXNlbnRhdGlvbi4KICAgKgogICAqIEBzZWUge0BsaW5rIHJvdW5kfQogICAqLwogIGZyb3VuZCwKCiAgLyoqCiAgICogVGhlIEV1Y2xpZGVhbiBoeXBvdGVudXNlIGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcltdfSAuLi5pbnB1dCBUd28gb3IgbW9yZSBudW1iZXJzCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cG90ZW51c2UgZ2l2ZW4gdGhvc2UgbnVtYmVycy4KICAgKi8KICBoeXBvdCwKCiAgLyoqCiAgICogVGhlIDMyIGJpdCBpbnRlZ2VyIG11bHRpcGxpY2F0aW9uIGZ1bmN0aW9uLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGEgQW55IDMyIGJpdCBpbnRlZ2VyCiAgICogQHBhcmFtIHtudW1iZXJ9IGIgQW55IDMyIGJpdCBpbnRlZ2VyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIDMyIGJpdCBpbnRlZ2VyIHJlc3VsdCBvZiBhICogYgogICAqLwogIGltdWwsCgogIC8qKgogICAqIFRoZSBuYXR1cmFsIGxvZ2FyaXRobSBmdW5jdGlvbiwgaS5lLiB0aGUgYmFzZS1FIGxvZ2FyaXRobQogICAqCiAgICogKE5vdGUgdGhhdCBpbiBKUyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAibG9nIiByYXRoZXIgdGhhbiAibG4iKQogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIEV9CiAgICogQHNlZSB7QGxpbmsgbG9nfQogICAqLwogIGxvZzogbG4sCgogIC8qKgogICAqIFRoZSAiY29tbW9uIGxvZ2FyaXRobSIgZnVuY3Rpb24sIGkuZS4gdGhlIGJhc2UtMTAgbG9nYXJpdGhtLgogICAqCiAgICogKE5vdGUgdGhhdCBpbiBKUyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAibG9nMTAiIHJhdGhlciB0aGFuICJsb2ciKQogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY29tbW9uIGxvZ2FyaXRobSBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgbG59CiAgICovCiAgbG9nMTA6IGxvZywKCiAgLyoqCiAgICogVGhlIGJpbmFyeSBsb2dhcml0aG0gZnVuY3Rpb24sIGkuZS4gdGhlIGJhc2UtMiBsb2dhcml0aG0uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBiYXNlIDIgbG9nYXJpdGhtIG9mIHRoYXQgbnVtYmVyCiAgICoKICAgKiBAc2VlIHtAbGluayBsbn0KICAgKiBAc2VlIHtAbGluayBsb2d9CiAgICovCiAgbG9nMiwKCiAgLyoqCiAgICogRmluZCB0aGUgbWF4aW11bSB2YWx1ZSBpbiBhIHNldCBvZiBudW1iZXJzCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gLi4uaW5wdXQgQW55IHR3byBvciAgbW9yZSBudW1iZXJzCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGhpZ2hlc3QgdmFsdWVkIG51bWJlciBmcm9tIGFtb25nIHRoZSBpbnB1dC4KICAgKgogICAqIEBzZWUge0BsaW5rIG1pbn0KICAgKi8KICBtYXgsCgogIC8qKgogICAqIEZpbmQgdGhlIG1pbmltdW0gdmFsdWUgaW4gYSBzZXQgb2YgbnVtYmVycwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IC4uLmlucHV0IEFueSB0d28gb3IgIG1vcmUgbnVtYmVycwogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsb3dlc3QgdmFsdWVkIG51bWJlciBmcm9tIGFtb25nIHRoZSBpbnB1dC4KICAgKgogICAqIEBzZWUge0BsaW5rIG1heH0KICAgKi8KICBtaW4sCgogIC8qKgogICAqIFRoZSBwb3dlciBmdW5jdGlvbi4KICAgKgogICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIGEgaG9sZG92ZXIgZnJvbSBiZWZvcmUgSlMKICAgKiBoYWQgdGhlIGAqKmAgb3BlcmF0b3IgZm9yIHBlcmZvcm1pbmcgdGhpcyBjYWxjdWxhdGlvbi4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBhIEFueSBudW1iZXIKICAgKiBAcGFyYW0ge251bWJlcn0gYiBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcnxOYU59IG91dHB1dCBhICoqIGIgb3IgTmFOIGlmIHRoYXQgaXMgdW5kZWZpbmVkCiAgICovCiAgcG93LAoKICAvKioKICAgKiBUaGUgInJvdW5kIHRvIHRoZSBuZWFyZXN0IGludGVnZXIiIGZ1bmN0aW9uLCByb3VuZGluZyBhbnkKICAgKiB2YWx1ZSBbeC4wLCB4LjQ5OTkuLi5dIHRvIHgsIGFuZCBhbnkgdmFsdWUgW3guNSwgeC45OTkuLi5dCiAgICogdG8geCArIDEuCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnRlZ2VyIHJlc3VsdCBhZnRlciByb3VuZGluZy4KICAgKgogICAqIEBzZWUge0BsaW5rIGNlaWx9CiAgICogQHNlZSB7QGxpbmsgZmxvb3J9CiAgICovCiAgcm91bmQsCgogIC8qKgogICAqIEdldCB0aGUgc2lnbiBvZiBhIG51bWJlcgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSArMSBpZiB0aGUgbnVtYmVyIHdhcyBwb3NpdGl2ZSwgLTEgaWYgaXQgd2FzIG5lZ2F0aXZlLCBvciAwIGlmIHRoZSBpbnB1dCB3YXMgemVyby4KICAgKi8KICBzaWduLAoKICAvKioKICAgKiBUaGUgc2luZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgY29zfQogICAqLwogIHNpbiwKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgc2luZSBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaHlwZXJib2xpYyBzaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBzaW59CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgc2luaCwKCiAgLyoqCiAgICogVGhlIHNxdWFyZSByb290IGZ1bmN0aW9uLgogICAqCiAgICoKICAgKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBhIGhvbGRvdmVyIGZyb20gYmVmb3JlIEpTCiAgICogaGFkIHRoZSBgKipgIG9wZXJhdG9yIGZvciBwZXJmb3JtaW5nIHRoaXMgY2FsY3VsYXRpb24KICAgKiBieSB1c2luZyBgeCAqKiAwLjVgLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc3F1YXJlIHJvb3Qgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGNicnR9CiAgICogQHNlZSB7QGxpbmsgcG93fQogICAqLwogIHNxcnQsCgogIC8qKgogICAqIFRoZSB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB0YW5nZW50CiAgICovCiAgdGFuLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW52ZXJzZV9oeXBlcmJvbGljX2Z1bmN0aW9ucyNEZWZpbml0aW9uc19pbl90ZXJtc19vZl9sb2dhcml0aG1zCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBoeXBlcmJvbGljIHRhbmdlbnQKICAgKgogICAqIEBzZWUge0BsaW5rIHRhbn0KICAgKiBAc2VlIHtAbGluayBhc2luaH0KICAgKiBAc2VlIHtAbGluayBhY29zaH0KICAgKi8KICB0YW5oLAoKICAvKioKICAgKiBUcnVuY2F0ZSBhIGZyYWN0aW9uIHRvIGFuIGludGVnZXIgYnkgc2ltcGx5IGRyb3BwaW5nIHRoZSBmcmFjdGlvbmFsIHBhcnQuCiAgICogTm90ZSB0aGF0IHRoaXMgZGlmZmVycyBmcm9tIHRoZSBgZmxvb3JgIGZ1bmN0aW9uOgogICAqCiAgICogYGBgCiAgICogZmxvb3IoNC4yKTsgIC8vIDQKICAgKiBmbG9vcigtNC4yKTsgLy8gLTUKICAgKgogICAqIHRydW5jKDQuMik7ICAvLyA0CiAgICogdHJ1bmMoLTQuMik7IC8vIC00CiAgICogYGBgCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnRlZ2VyIHBhcnQgb25seSBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgZmxvb3J9CiAgICovCiAgdHJ1bmMsCn0gPSBNYXRoOwoKLyoqCiAqIEdldCB0aGUgYmlub21pYWwgY29lZmZpY2llbnQgKG4gY2hvb3NlIGspLgogKgogKiBAcGFyYW0ge251bWJlcn0gbiBBIHBvc2l0aXZlIGludGVnZXIKICogQHBhcmFtIHtudW1iZXJ9IGsgQSBwb3NpdGl2ZSBpbnRlZ2VyIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgbmAKICogQHJldHVybnMge251bWJlcn0gVGhlIHZhbHVlIChuIGNob29zZSBrKQogKi8KZnVuY3Rpb24gYmlub21pYWwobiwgaykgewogIGlmIChuID09PSAwKSByZXR1cm4gMTsKICB2YXIgbHV0ID0gX19iaW5vbWlhbENvZWZmaWNpZW50czsKICB3aGlsZSAobiA+PSBsdXQubGVuZ3RoKSB7CiAgICB2YXIgcyA9IGx1dC5sZW5ndGg7CiAgICB2YXIgbmV4dFJvdyA9IFsxXTsKICAgIGZvciAodmFyIGkgPSAxLCBwcmV2ID0gcyAtIDE7IGkgPCBzOyBpKyspIHsKICAgICAgbmV4dFJvd1tpXSA9IGx1dFtwcmV2XVtpIC0gMV0gKyBsdXRbcHJldl1baV07CiAgICB9CiAgICBuZXh0Um93W3NdID0gMTsKICAgIGx1dC5wdXNoKG5leHRSb3cpOwogIH0KICByZXR1cm4gbHV0W25dW2tdOwp9CgovKioKICogQ29uc3RyYWluIGEgbnVtYmVyIHRvIHdpdGhpbiBhIGdpdmVuIHJhbmdlLgogKiBUaGlzIGlzIHJlYWxseSBub3RoaW5nIG1vcmUgdGhhbiBhIGNvbnZlbmllbnQKICogZnVuY3Rpb24gd3JhcHBlciBhcm91bmQgdGhlIHN0YXRlbWVudDoKICoKICogYGBgCiAqIHYgPCBzID8gcyA6IHYgPiBlID8gZSA6IHYKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29uc3RyYWluCiAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlckJvdW5kIFRoZSBsb3dlciBib3VuZCBvbiBvdXIgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyQm91bmQgVGhlIHVwcGVyIGJvdW5kIG9uIG91ciB2YWx1ZQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgdmFsdWUsIGlmIGl0IGZhbGxzIHdpdGhpbmcgW2xvd2VyQm91bmQsdXBwZXJCb3VuZF0sIG90aGVyd2lzZSBvbmUgb2YgdGhvc2UgYm91bmRzLgogKgogKiBAc2VlIHtAbGluayBjb25zdHJhaW5NYXB9CiAqLwpmdW5jdGlvbiBjb25zdHJhaW4odiwgcywgZSkgewogIHJldHVybiB2IDwgcyA/IHMgOiB2ID4gZSA/IGUgOiB2Owp9CgovKioKICogVGhlIGNvc2VjYW50IGZ1bmN0aW9uLCB3aGljaCBpczoKICoKICogYGBgCiAqIDEgLyBzaW4odikKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgaW5wdXQgdmFsdWUsIGluIHJhZGlhbnMuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjb3NlY2FudCBvZiBvdXIgdmFsdWUuCiAqCiAqIEBzZWUge0BsaW5rIHNlY30KICovCmZ1bmN0aW9uIGNzYyh2KSB7CiAgcmV0dXJuIDEgLyBzaW4odik7Cn0KCi8qKgogKiBUaGUgY290YW5nZW50IGZ1bmN0aW9uLCB3aGljaCBpczoKICoKICogYGBgCiAqIGNvcyh2KSAvIHNpbih2KQogKiBgYGAKICoKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBpbnB1dCB2YWx1ZSwgaW4gcmFkaWFucy4KICogQHJldHVybnMge251bWJlcn0gVGhlIGNvdGFuZ2VudCBvZiBvdXIgdmFsdWUuCiAqCiAqIEBzZWUge0BsaW5rIHRhbn0KICovCmZ1bmN0aW9uIGN0bih2KSB7CiAgcmV0dXJuIGNvcyh2KSAvIHNpbih2KTsKfQoKLyoqCiAqIENvbnZlcnQgYSBudW1iZXIgaW4gcmFkaWFucyB0byBhIG51bWJlciBpbiBkZWdyZWVzLgogKiBUaGlzIGlzIHJlYWxseSBub3RoaW5nIG1vcmUgdGhhbiBhIGNvbnZlbmllbnQKICogZnVuY3Rpb24gd3JhcHBlciBhcm91bmQgdGhlIHN0YXRlbWVudDoKICoKICogYGBgCiAqIHYvUEkgKiAxODAKICogYGBgCiAqCiAqIFdpdGggb25lIHRyaWNrLCBpbiB0aGF0IGl0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHRoZQogKiByZXN1bHRhbnQgdmFsdWUgdG8gdGhlIHN0YW5kYXJkIFswLCAzNjBdIGludGVydmFsLgogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnN0cmFpbgogKiBAcGFyYW0ge2Jvb2xlYW59IGNvbnN0cmFpbj8gQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb25zdHJhaW4gdGhlIHJlc3VsdGFudCB2YWx1ZSB0byBbMCwgMzYwXSAoZGVmYXVsdCA9IGZhbHNlKQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZGVncmVlIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlucHV0IHZhbHVlIGluIHJhZGlhbnMsIG9wdGlvbmFsbHkgY29uc3RyYWluZWQgdG8gWzAsIDM2MF0KICoKICogQHNlZSB7QGxpbmsgcmFkaWFuc30KICogQHNlZSB7QGxpbmsgY29uc3RyYWlufQogKi8KZnVuY3Rpb24gZGVncmVlcyh2LCBjb25zdHJhaW4gPSBmYWxzZSkgewogIGxldCBkID0gKHYgLyBQSSkgKiAxODA7CiAgaWYgKCFjb25zdHJhaW4pIHJldHVybiBkOwogIHdoaWxlIChkIDwgMCkgZCArPSAzNjA7CiAgcmV0dXJuIGQgJSAzNjA7Cn0KCi8qKgogKiBDYWxjdWxhdGUgdGhlIDJEIEV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4MSBUaGUgZmlyc3QgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MSBUaGUgZmlyc3QgcG9pbnQncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB4MiBUaGUgc2Vjb25kIHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTIgVGhlIHNlY29uZCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHJldHVybnMge251bWJlcn0gVGhlIGV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gY29vcmRpbmF0ZXMKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAxIFRoZSBmaXJzdCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpa2V9IHAyIFRoZSBzZWNvbmQgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBldWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIGNvb3JkaW5hdGVzCiAqLwpmdW5jdGlvbiBkaXN0KHgxLCB5MSwgeDIsIHkyKSB7CiAgaWYgKHgxLnggIT09IHVuZGVmaW5lZCAmJiB4MS55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkyID0geTEueTsKICAgIHgyID0geTEueDsKICAgIHkxID0geDEueTsKICAgIHgxID0geDEueTsKICB9CiAgY29uc3QgZHggPSB4MiAtIHgxOwogIGNvbnN0IGR5ID0geTIgLSB5MTsKICByZXR1cm4gaHlwb3QoZHgsIGR5KTsKfQoKLyoqCiAqIFBlcmZvcm1zIGEgbGluZS9saW5lIGludGVyc2VjdGlvbiB0ZXN0IGdpdmUgZWl0aGVyIGZvdXIgcG9pbnRzCiAqIGRlZmluaW5nIHRoZSBsaW5lcyAocDEtLXAyKSBhbmQgKHAzLS1wNCksIG9yIGVpZ2h0IGNvb3JkaW5hdGVzCiAqIHNwYW5uaW5nIGxpbmVzICh4MSx5MSktLSh4Mix5MikgYW5kICh4Myx5MyktLSh4NCx5NCkuCiAqCiAqIFRoaXMgZnVuY3Rpb24gY292ZXJzIGJvdGggImxpbmUvbGluZSIgYW5kICJzZWdtZW50Ii8ic2VnbWVudCIKICogdGVzdGluZyBieSBzZXR0aW5nIGEgYm9vbGVhbiB2YWx1ZSBgaW5Cb3VuZHNgIG9uIHRoZSByZXN1bHQ6CiAqIHdoZW4gZmFsc2UsIHRoZXJlIGlzIG9ubHkgYSBsaW5lL2xpbmUgaW50ZXJzZWN0aW9uLCBidXQgd2hlbgogKiB0cnVlLCB0aGUgYWN0dWFsIGxpbmUgc2VnbWVudHMgaW50ZXJzZWN0LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgY2VudGVyKCk7CiAqICAgICAgIC8vIC4uLmNvZGUgZ29lcyBoZXJlLi4uCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHgxIFRoZSBmaXJzdCBwb2ludCdzIHggY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geTEgVGhlIGZpcnN0IHBvaW50J3MgeSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB4MiBUaGUgc2Vjb25kIHBvaW50J3MgeCBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MiBUaGUgc2Vjb25kIHBvaW50J3MgeSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB4MyBUaGUgdGhpcmQgcG9pbnQncyB4IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHkzIFRoZSB0aGlyZCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geDQgVGhlIGZvdXJ0aCBwb2ludCdzIHggY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geTQgVGhlIGZvdXJ0aCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfGZhbHNlfSBFaXRoZXIgdGhlIGludGVyc2VjdGlvbiBwb2ludCwgb3IgZmFsc2UgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uCiAqCiAqIEBwYXJhbSB7UG9pbnRMaW5lfSBwMSBUaGUgZmlyc3QgY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGluZX0gcDIgVGhlIHNlY29uZCBjb29yZGluYXRlCiAqIEBwYXJhbSB7UG9pbnRMaW5lfSBwMyBUaGUgdGhpcmQgY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGluZX0gcDQgVGhlIGZvdXJ0aCBjb29yZGluYXRlCiAqIEByZXR1cm5zIHtQb2ludExpa2V8ZmFsc2V9IEVpdGhlciB0aGUgaW50ZXJzZWN0aW9uIHBvaW50LCBvciBmYWxzZSBpZiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24KICovCmZ1bmN0aW9uIGxsaSh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHsKICBpZiAoeDEueCAhPT0gdW5kZWZpbmVkICYmIHgxLnkgIT09IHVuZGVmaW5lZCkgewogICAgeTQgPSB5Mi55OwogICAgeDQgPSB5Mi54OwogICAgeTMgPSB4Mi55OwogICAgeDMgPSB4Mi54OwogICAgeTIgPSB5MS55OwogICAgeDIgPSB5MS54OwogICAgeTEgPSB4MS55OwogICAgeDEgPSB4MS54OwogIH0KICBjb25zdCBueCA9ICh4MSAqIHkyIC0geTEgKiB4MikgKiAoeDMgLSB4NCkgLSAoeDEgLSB4MikgKiAoeDMgKiB5NCAtIHkzICogeDQpOwogIGNvbnN0IG55ID0gKHgxICogeTIgLSB5MSAqIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4MyAqIHk0IC0geTMgKiB4NCk7CiAgY29uc3QgZCA9ICh4MSAtIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4MyAtIHg0KTsKCiAgaWYgKGQgPT09IDApIHJldHVybiBmYWxzZTsKCiAgY29uc3QgciA9IHsgeDogbnggLyBkLCB5OiBueSAvIGQsIGluQm91bmRzOiB0cnVlIH07CiAgbGV0IGEgPSB4MTsKICBsZXQgYiA9IHgyOwogIGlmICh4MSA+IHgyKSB7CiAgICBhID0geDI7CiAgICBiID0geDE7CiAgfQogIGlmIChyLnggPCBhIHx8IHIueCA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICBlbHNlIHsKICAgIGEgPSB5MTsKICAgIGIgPSB5MjsKICAgIGlmICh5MSA+IHkyKSB7CiAgICAgIGEgPSB5MjsKICAgICAgYiA9IHkxOwogICAgfQogICAgaWYgKHIueSA8IGEgfHwgci55ID4gYikgci5pbkJvdW5kcyA9IGZhbHNlOwogICAgZWxzZSB7CiAgICAgIGEgPSB4MzsKICAgICAgYiA9IHg0OwogICAgICBpZiAoeDMgPiB4NCkgewogICAgICAgIGEgPSB4NDsKICAgICAgICBiID0geDM7CiAgICAgIH0KICAgICAgaWYgKHIueCA8IGEgfHwgci54ID4gYikgci5pbkJvdW5kcyA9IGZhbHNlOwogICAgICBlbHNlIHsKICAgICAgICBhID0geTM7CiAgICAgICAgYiA9IHk0OwogICAgICAgIGlmICh5MyA+IHk0KSB7CiAgICAgICAgICBhID0geTQ7CiAgICAgICAgICBiID0geTM7CiAgICAgICAgfQogICAgICAgIGlmIChyLnkgPCBhIHx8IHIueSA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gcjsKfQoKLyoqCiAqIE1hcCBhIHZhbHVlIGZyb20gb25lIGludGVydmFsIHRvIGFub3RoZXIsIG9wdGlvbmFsbHkKICogY29uc3RyYWluZWQgdG8gdGhlIHRhcmdldCBpbnRlcnZhbC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIE91ciBpbnB1dCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxTdGFydCBUaGUgbG93ZXIgYm91bmQgb2Ygb3VyIGRvbWFpbgogKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxFbmQgVGhlIHVwcGVyIGJvdW5kIG9mIG91ciBkb21haW4KICogQHBhcmFtIHtudW1iZXJ9IG5ld1N0YXJ0IFRoZSBsb3dlciBib3VuZCBvZiBvdXIgdGFyZ2V0IGludGVydmFsCiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdFbmQgVGhlIHVwcGVyIGJvdW5kIG9uIG91ciB0YXJnZXQgaW50ZXJ2YWwKICogQHBhcmFtIHtib29sZWFufSBjb25zdHJhaW4/ICBBIGJvb2xlYW4gdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGNvbnN0cmFpbiB0aGUgcmVzdWx0YW50IHZhbHVlIHRvIFtuZXdTdGFydCxuZXdFbmRdIChkZWZhdWx0ID0gZmFsc2UpCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZXN1bHQgb2YgbWFwcGluZyBvdXIgdmFsdWUgZnJvbSBvdXIgZG9tYWluIGludGVydmFsIHRvIG91ciB0YXJnZXQgaW50ZXJ2YWwsIG9wdGlvbmFsbHkgY29uc3RyYWluZWQgdG8gdGhlIHRhcmdldCBpbnRlcnZhbC4KICoKICogQHNlZSB7QGxpbmsgY29uc3RyYWlufQogKiBAc2VlIHtAbGluayBjb25zdHJhaW5NYXB9CiAqLwpmdW5jdGlvbiBtYXAodiwgcywgZSwgbnMsIG5lLCBjb25zdHJhaW5lZCA9IGZhbHNlKSB7CiAgY29uc3QgaTEgPSBlIC0gcywKICAgIGkyID0gbmUgLSBucywKICAgIHAgPSB2IC0gczsKICBsZXQgciA9IG5zICsgKHAgKiBpMikgLyBpMTsKICBpZiAoY29uc3RyYWluZWQpIHJldHVybiBjb25zdHJhaW4ociwgbnMsIG5lKTsKICByZXR1cm4gcjsKfQoKLyoqCiAqIENvbnZlcnQgYSBudW1iZXIgaW4gZGVncmVlcyB0byBhIG51bWJlciBpbiByYWRpYW5zLgogKiBUaGlzIGlzIHJlYWxseSBub3RoaW5nIG1vcmUgdGhhbiBhIGNvbnZlbmllbnQKICogZnVuY3Rpb24gd3JhcHBlciBhcm91bmQgdGhlIHN0YXRlbWVudDoKICoKICogYGBgCiAqIHYvMTgwICogUEkKICogYGBgCiAqCiAqIFdpdGggb25lIHRyaWNrLCBpbiB0aGF0IGl0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHRoZQogKiByZXN1bHRhbnQgdmFsdWUgdG8gdGhlIHN0YW5kYXJkIFswLCBUQVVdIGludGVydmFsLgogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnN0cmFpbgogKiBAcGFyYW0ge2Jvb2xlYW59IGNvbnN0cmFpbj8gQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb25zdHJhaW4gdGhlIHJlc3VsdGFudCB2YWx1ZSB0byBbMCwgVEFVXSAoZGVmYXVsdCA9IGZhbHNlKQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmFkaWFucyB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbnB1dCB2YWx1ZSBpbiBkZWdyZWVzLCBvcHRpb25hbGx5IGNvbnN0cmFpbmVkIHRvIFswLCBUQVVdCiAqCiAqIEBzZWUge0BsaW5rIGRlZ3JlZXN9CiAqIEBzZWUge0BsaW5rIGNvbnN0cmFpbn0KICovCmZ1bmN0aW9uIHJhZGlhbnModiwgY29uc3RyYWluID0gZmFsc2UpIHsKICBsZXQgciA9ICh2IC8gMTgwKSAqIFBJOwogIGlmICghY29uc3RyYWluKSByZXR1cm4gcjsKICB3aGlsZSAociA8IDApIHIgKz0gVEFVOwogIHJldHVybiByICUgVEFVOwp9CgovKioKICogR2VuZXJhdGUgYSBwc2V1ZG8tcmFuZG9tIG51bWJlci4KICoKICogVGhpcyBpcyBiYXNlZCBvbiB0aGUgU3BsaXRNaXgzMiBhbGdvcml0aG0sIGNvdmVyZWQKICogb3ZlciBvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc1OTMzMTYvNzQwNTUzCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDIwKTsKICogICAgICAgcmFuZ2UoMCwgaGVpZ2h0ICsgMjAsIDIwLCAodikgPT4gewogKiAgICAgICAgIHRleHQocmFuZG9tKCksIDUsIHYpOwogKiAgICAgICB9KQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqCiAqCiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBpbiB0aGUgaW50ZXJ2YWwgWzAsMSkKICoKICogQHBhcmFtIHtudW1iZXJ9IGEgVGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgcmFuZG9tIG51bWJlcgogKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgaW4gdGhlIGludGVydmFsIFswLGEpCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhIFRoZSBsb3dlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBudW1iZXIKICogQHBhcmFtIHtudW1iZXJ9IGIgVGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgcmFuZG9tIG51bWJlcgogKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgaW4gdGhlIGludGVydmFsIFthLCBiKQogKgogKiBAc2VlIHtAbGluayByYW5kb21TZWVkfQogKi8KZnVuY3Rpb24gcmFuZG9tKGEgPSAxLCBiKSB7CiAgY29uc3QgciA9IF9fcHJuZy5uZXh0KCk7CiAgaWYgKGIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGEgKiByOwogIHJldHVybiBhICsgciAqIChiIC0gYSk7Cn0KCi8qKgogKiBTZXQgdGhlIHBzZXVkby1yYW5kb20gbnVtYmVyIGdlbmVyYXRvciBzZWVkLiBJZiBubyBzZWVkCiAqIHZhbHVlIGlzIHByb3ZpZGVkLCB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZzoKICoKICogYGBgCiAqIHJhbmRvbVNlZWQoRGF0ZS5ub3coKSAqIE1hdGgucmFuZG9tKCkpCiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gc2VlZD8gVGhlIHJhbmRvbSBzZWVkIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayByYW5kb219CiAqLwpmdW5jdGlvbiByYW5kb21TZWVkKHNlZWQgPSBEYXRlLm5vdygpICogTWF0aC5yYW5kb20oKSkgewogIF9fcHJuZy5yZXNlZWQoc2VlZCk7Cn0KCi8qKgogKiBUaGUgc2VjYW50IGZ1bmN0aW9uLCB3aGljaCBpczoKICoKICogYGBgCiAqIDEgLyBjb3ModikKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgaW5wdXQgdmFsdWUsIGluIHJhZGlhbnMuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzZWNhbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayBjc2N9CiAqLwpmdW5jdGlvbiBzZWModikgewogIHJldHVybiAxIC8gY29zKHYpOwp9Ci8qKgogKiBJbnZlcnQgYSBtYXRyaXgsIG9yIHVuZGVmaW5lZCBpZiB0aGUgbWF0cml4IGlzIG5vdCBpbnZlcnRpYmxlLgogKgogKiBAcGFyYW0ge01hdHJpeH0gTSBUaGUgbWF0cml4IHRvIGludmVydAogKiBAcmV0dXJucyB7bnVtYmVyW11bXX0gVGhlIG1hdHJpeCBpbnZlcnNlIGFzIDJEIG51bWJlciBhcnJheQogKi8KZnVuY3Rpb24gaW52ZXJ0TWF0cml4KE0pIHsKICAvLyBDb3BpZWQgZnJvbSBodHRwOi8vYmxvZy5hY2lwby5jb20vbWF0cml4LWludmVyc2lvbi1pbi1qYXZhc2NyaXB0LwogIC8vIFdpdGggcGVybWlzc2lvbiwgaHR0cDovL2Jsb2cuYWNpcG8uY29tL21hdHJpeC1pbnZlcnNpb24taW4tamF2YXNjcmlwdC8jY29tbWVudC01MDU3Mjg5ODg5CgogIC8vICgxKSAnYXVnbWVudCcgdGhlIG1hdHJpeCAobGVmdCkgYnkgdGhlIGlkZW50aXR5IChvbiB0aGUgcmlnaHQpCiAgLy8gKDIpIFR1cm4gdGhlIG1hdHJpeCBvbiB0aGUgbGVmdCBpbnRvIHRoZSBpZGVudGl0eSBieSBlbGVtZXRyeSByb3cgb3BzCiAgLy8gKDMpIFRoZSBtYXRyaXggb24gdGhlIHJpZ2h0IGlzIHRoZSBpbnZlcnNlICh3YXMgdGhlIGlkZW50aXR5IG1hdHJpeCkKICAvLyBUaGVyZSBhcmUgMyBlbGVtdGFyeSByb3cgb3BzOgogIC8vIChhKSBTd2FwIDIgcm93cwogIC8vIChiKSBNdWx0aXBseSBhIHJvdyBieSBhIHNjYWxhcgogIC8vIChjKSBBZGQgMiByb3dzCgogIC8vIGlmIHRoZSBtYXRyaXggaXNuJ3Qgc3F1YXJlOiBleGl0IChlcnJvcikKICBpZiAoTS5sZW5ndGggIT09IE1bMF0ubGVuZ3RoKSB7CiAgICBjb25zb2xlLndhcm4oIkNhbm5vdCBpbnZlcnQgbm9uLXNxdWFyZSBtYXRyaWNlcyIpOwogICAgcmV0dXJuOwogIH0KCiAgLy8gY3JlYXRlIHRoZSBpZGVudGl0eSBtYXRyaXggKEkpLCBhbmQgYSBjb3B5IChDKSBvZiB0aGUgb3JpZ2luYWwKICB2YXIgaSA9IDAsCiAgICBpaSA9IDAsCiAgICBqID0gMCwKICAgIGRpbSA9IE0ubGVuZ3RoLAogICAgZSA9IDAsCiAgICB0ID0gMDsKICB2YXIgSSA9IFtdLAogICAgQyA9IFtdOwogIGZvciAoaSA9IDA7IGkgPCBkaW07IGkgKz0gMSkgewogICAgLy8gQ3JlYXRlIHRoZSByb3cKICAgIElbSS5sZW5ndGhdID0gW107CiAgICBDW0MubGVuZ3RoXSA9IFtdOwogICAgZm9yIChqID0gMDsgaiA8IGRpbTsgaiArPSAxKSB7CiAgICAgIC8vaWYgd2UncmUgb24gdGhlIGRpYWdvbmFsLCBwdXQgYSAxIChmb3IgaWRlbnRpdHkpCiAgICAgIGlmIChpID09IGopIHsKICAgICAgICBJW2ldW2pdID0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBJW2ldW2pdID0gMDsKICAgICAgfQoKICAgICAgLy8gQWxzbywgbWFrZSB0aGUgY29weSBvZiB0aGUgb3JpZ2luYWwKICAgICAgQ1tpXVtqXSA9IE1baV1bal07CiAgICB9CiAgfQoKICAvLyBQZXJmb3JtIGVsZW1lbnRhcnkgcm93IG9wZXJhdGlvbnMKICBmb3IgKGkgPSAwOyBpIDwgZGltOyBpICs9IDEpIHsKICAgIC8vIGdldCB0aGUgZWxlbWVudCBlIG9uIHRoZSBkaWFnb25hbAogICAgZSA9IENbaV1baV07CgogICAgLy8gaWYgd2UgaGF2ZSBhIDAgb24gdGhlIGRpYWdvbmFsICh3ZSdsbCBuZWVkIHRvIHN3YXAgd2l0aCBhIGxvd2VyIHJvdykKICAgIGlmIChlID09IDApIHsKICAgICAgLy9sb29rIHRocm91Z2ggZXZlcnkgcm93IGJlbG93IHRoZSBpJ3RoIHJvdwogICAgICBmb3IgKGlpID0gaSArIDE7IGlpIDwgZGltOyBpaSArPSAxKSB7CiAgICAgICAgLy9pZiB0aGUgaWkndGggcm93IGhhcyBhIG5vbi0wIGluIHRoZSBpJ3RoIGNvbAogICAgICAgIGlmIChDW2lpXVtpXSAhPSAwKSB7CiAgICAgICAgICAvL2l0IHdvdWxkIG1ha2UgdGhlIGRpYWdvbmFsIGhhdmUgYSBub24tMCBzbyBzd2FwIGl0CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZGltOyBqKyspIHsKICAgICAgICAgICAgZSA9IENbaV1bal07IC8vdGVtcCBzdG9yZSBpJ3RoIHJvdwogICAgICAgICAgICBDW2ldW2pdID0gQ1tpaV1bal07IC8vcmVwbGFjZSBpJ3RoIHJvdyBieSBpaSd0aAogICAgICAgICAgICBDW2lpXVtqXSA9IGU7IC8vcmVwYWNlIGlpJ3RoIGJ5IHRlbXAKICAgICAgICAgICAgZSA9IElbaV1bal07IC8vdGVtcCBzdG9yZSBpJ3RoIHJvdwogICAgICAgICAgICBJW2ldW2pdID0gSVtpaV1bal07IC8vcmVwbGFjZSBpJ3RoIHJvdyBieSBpaSd0aAogICAgICAgICAgICBJW2lpXVtqXSA9IGU7IC8vcmVwYWNlIGlpJ3RoIGJ5IHRlbXAKICAgICAgICAgIH0KICAgICAgICAgIC8vZG9uJ3QgYm90aGVyIGNoZWNraW5nIG90aGVyIHJvd3Mgc2luY2Ugd2UndmUgc3dhcHBlZAogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vZ2V0IHRoZSBuZXcgZGlhZ29uYWwKICAgICAgZSA9IENbaV1baV07CiAgICAgIC8vaWYgaXQncyBzdGlsbCAwLCBub3QgaW52ZXJ0aWJsZSAoZXJyb3IpCiAgICAgIGlmIChlID09IDApIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KCiAgICAvLyBTY2FsZSB0aGlzIHJvdyBkb3duIGJ5IGUgKHNvIHdlIGhhdmUgYSAxIG9uIHRoZSBkaWFnb25hbCkKICAgIGZvciAoaiA9IDA7IGogPCBkaW07IGorKykgewogICAgICBDW2ldW2pdID0gQ1tpXVtqXSAvIGU7IC8vYXBwbHkgdG8gb3JpZ2luYWwgbWF0cml4CiAgICAgIElbaV1bal0gPSBJW2ldW2pdIC8gZTsgLy9hcHBseSB0byBpZGVudGl0eQogICAgfQoKICAgIC8vIFN1YnRyYWN0IHRoaXMgcm93IChzY2FsZWQgYXBwcm9wcmlhdGVseSBmb3IgZWFjaCByb3cpIGZyb20gQUxMIG9mCiAgICAvLyB0aGUgb3RoZXIgcm93cyBzbyB0aGF0IHRoZXJlIHdpbGwgYmUgMCdzIGluIHRoaXMgY29sdW1uIGluIHRoZQogICAgLy8gcm93cyBhYm92ZSBhbmQgYmVsb3cgdGhpcyBvbmUKICAgIGZvciAoaWkgPSAwOyBpaSA8IGRpbTsgaWkrKykgewogICAgICAvLyBPbmx5IGFwcGx5IHRvIG90aGVyIHJvd3MgKHdlIHdhbnQgYSAxIG9uIHRoZSBkaWFnb25hbCkKICAgICAgaWYgKGlpID09IGkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgLy8gV2Ugd2FudCB0byBjaGFuZ2UgdGhpcyBlbGVtZW50IHRvIDAKICAgICAgZSA9IENbaWldW2ldOwoKICAgICAgLy8gU3VidHJhY3QgKHRoZSByb3cgYWJvdmUob3IgYmVsb3cpIHNjYWxlZCBieSBlKSBmcm9tICh0aGUKICAgICAgLy8gY3VycmVudCByb3cpIGJ1dCBzdGFydCBhdCB0aGUgaSd0aCBjb2x1bW4gYW5kIGFzc3VtZSBhbGwgdGhlCiAgICAgIC8vIHN0dWZmIGxlZnQgb2YgZGlhZ29uYWwgaXMgMCAod2hpY2ggaXQgc2hvdWxkIGJlIGlmIHdlIG1hZGUgdGhpcwogICAgICAvLyBhbGdvcml0aG0gY29ycmVjdGx5KQogICAgICBmb3IgKGogPSAwOyBqIDwgZGltOyBqKyspIHsKICAgICAgICBDW2lpXVtqXSAtPSBlICogQ1tpXVtqXTsgLy9hcHBseSB0byBvcmlnaW5hbCBtYXRyaXgKICAgICAgICBJW2lpXVtqXSAtPSBlICogSVtpXVtqXTsgLy9hcHBseSB0byBpZGVudGl0eQogICAgICB9CiAgICB9CiAgfQoKICAvL3dlJ3ZlIGRvbmUgYWxsIG9wZXJhdGlvbnMsIEMgc2hvdWxkIGJlIHRoZSBpZGVudGl0eQogIC8vbWF0cml4IEkgc2hvdWxkIGJlIHRoZSBpbnZlcnNlOgogIHJldHVybiBJOwp9CgovKioKICogTXVsdGlwbHkgdHdvIG1hdHJpY2VzCiAqCiAqIEBwYXJhbSB7TWF0cml4fSBtMQogKiBAcGFyYW0ge01hdHJpeH0gbTIKICogQHJldHVybnMge251bWJlcltdW119IFRoZSByZXN1bHQgb2YgbTEgKiBtMiAgYXMgMkQgbnVtYmVyIGFycmF5CiAqLwpmdW5jdGlvbiBtdWx0aXBseU1hdHJpeChtMSwgbTIpIHsKICB2YXIgTSA9IFtdOwogIHZhciBtMnQgPSB0cmFuc3Bvc2VNYXRyaXgobTIpOwogIG0xLmZvckVhY2goKHJvdywgcikgPT4gewogICAgTVtyXSA9IFtdOwogICAgbTJ0LmZvckVhY2goKGNvbCwgYykgPT4gewogICAgICBNW3JdW2NdID0gcm93Lm1hcCgodiwgaSkgPT4gY29sW2ldICogdikucmVkdWNlKChhLCB2KSA9PiBhICsgdiwgMCk7CiAgICB9KTsKICB9KTsKICByZXR1cm4gTTsKfQoKLyoqCiAqIFRyYW5zcG9zZSBhIG1hdHJpeAogKgogKiBAcGFyYW0ge01hdHJpeH0gTSBUaGUgbWF0cml4IHRvIHRyYW5zcG9zZQogKiBAcmV0dXJucyB7bnVtYmVyW11bXX0gVGhlIG1hdHJpeCB0cmFuc3Bvc2UgYXMgMkQgbnVtYmVyIGFycmF5CiAqLwpmdW5jdGlvbiB0cmFuc3Bvc2VNYXRyaXgoTSkgewogIHJldHVybiBNWzBdLm1hcCgoY29sLCBpKSA9PiBNLm1hcCgocm93KSA9PiByb3dbaV0pKTsKfQovKioKICogUHJvamVjdCBhIDNEIGNvb3JkaW5hdGUgdG8gMkQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldFByb2plY3Rvcih3aWR0aCAvIDIsIGhlaWdodCAvIDIsIDUwLCAtMC40KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoMSwgMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIDEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBncmVlbmApOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSAzRCBjb29yZGluYXRlJ3MgeCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgM0QgY29vcmRpbmF0ZSdzIHggdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHogVGhlIDNEIGNvb3JkaW5hdGUncyB4IHZhbHVlCiAqIEByZXR1cm5zIHtQb2ludExpa2V9IHAgIFRoZSBwcm9qZWN0ZWQgMkQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgMkQgY29vcmRpbmF0ZSBhcyB7eCx5LHp9IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZX0gcCAgVGhlIHByb2plY3RlZCAyRCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIHNldFByb2plY3Rvcn0KICovCmZ1bmN0aW9uIHByb2plY3QoeCwgeSwgeikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCAmJiB4LnogIT09IHVuZGVmaW5lZCkgewogICAgeiA9IHguejsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICByZXR1cm4gX19wcm9qZWN0b3IucHJvamVjdCh4LCB5LCB6KTsKfQoKLyoqCiAqIFNldCB0aGUgcHJvamVjdG9yJ3MgeCwgeSwgYW5kIHogYXhpcyByb3RhdGlvbgogKiBpbiByYWRpYW5zLiBOb3RlIHRoYXQgdGhlc2UgYXJlIGFwcGxpZWQgaW4gb3JkZXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldFByb2plY3Rvcih3aWR0aCAvIDIsIGhlaWdodCAvIDIsIDUwLCAtMC40KTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIGNvbnN0IG0gPSBtaWxsaXMoKSAvIDUwMDA7CiAqICAgICAgIHJvdGF0ZVByb2plY3RvcihtLCAyICogbSwgMyAqIG0pOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoMSwgMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIDEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBncmVlbmApOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBhbmdsZSBvZiByb3RhdGlvbiBvdmVyIHRoZSB4IGF4aXMgaW4gcmFkaWFucwogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgYW5nbGUgb2Ygcm90YXRpb24gb3ZlciB0aGUgeSBheGlzIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IHogVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIG92ZXIgdGhlIHogYXhpcyBpbiByYWRpYW5zCiAqCiAqIEBzZWUge0BsaW5rIHByb2plY3R9CiAqLwpmdW5jdGlvbiByb3RhdGVQcm9qZWN0b3IoeCwgeSwgeikgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCAmJiB4LnogIT09IHVuZGVmaW5lZCkgewogICAgeiA9IHguejsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICBfX3Byb2plY3Rvci5zZXRSb3RhdGlvbih4LCB5LCB6KTsKfQoKLyoqCiAqIFNldCB0aGUgcHJvamVjdCBwYXJhbWV0ZXJzLiBDdXJyZW50bHksIG9ubHkKICogY2FiaW5ldCBwcm9qZWN0IGlzIHN1cHBvcnRlZCwgd2hpY2ggYWNjZXB0cwogKiB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6CiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldFByb2plY3Rvcih3aWR0aCAvIDIsIGhlaWdodCAvIDIsIDUwLCAtMC40KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAtMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoMSwgMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIC0xKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIDEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAxLCAxKSk7CiAqICAgICAgIHNldENvbG9yKGBncmVlbmApOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoMSwgMSwgMSksIHByb2plY3QoMSwgLTEsIDEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAtMSksIHByb2plY3QoLTEsIC0xLCAtMSkpOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIDEsIDEpLCBwcm9qZWN0KC0xLCAtMSwgMSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSAge251bWJlcn0geE9mZnNldCBvZiB0aGUgcHJvamVjdGlvbiB3cnQgdGhlIGNhbnZhcyAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSAge251bWJlcn0geU9mZnNldCBvZiB0aGUgcHJvamVjdGlvbiB3cnQgdGhlIGNhbnZhcyAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSAge251bWJlcn0gc2NhbGUgZmFjdG9yIGZvciB0aGUgM0QgaW5wdXQgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0gIHtudW1iZXJ9IGNhYmluZXQgYW5nbGUgaW4gcmFkaWFucyAoZGVmYXVsdCA9IC1waS82KQogKgogKiBAc2VlIHtAbGluayBwcm9qZWN0fQogKi8KZnVuY3Rpb24gc2V0UHJvamVjdG9yKC4uLmFyZ3MpIHsKICBfX3Byb2plY3Rvci51cGRhdGUoLi4uYXJncyk7Cn0KLyoqCiAqIFNldCBhIGJvcmRlciBhcm91bmQgdGhlIGNhbnZhcy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Qm9yZGVyKDEwLCBgcmVkYCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ8Ym9vbGVhbn0gd2lkdGg/IFRoZSB3aWR0aCBvZiB0aGUgYm9yZGVyIGluIHBpeGVscywgZGlzYWJsaW5nIHRoZSBib3JkZXIgb21pdHRlZAogKiBAcGFyYW0ge3N0cmluZ30gY29sb3I/IFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyIChkZWZhdWx0ID0gYmxhY2spCiAqCiAqIEBzZWUge0BsaW5rIG5vQm9yZGVyfQogKi8KZnVuY3Rpb24gc2V0Qm9yZGVyKHdpZHRoID0gMSwgY29sb3IgPSBgYmxhY2tgKSB7CiAgaWYgKCF3aWR0aCkgewogICAgX19jYW52YXMuc3R5bGUuYm9yZGVyID0gYG5vbmVgOwogIH0gZWxzZSB7CiAgICBfX2NhbnZhcy5zdHlsZS5ib3JkZXIgPSBgJHt3aWR0aH1weCBzb2xpZCAke2NvbG9yfWA7CiAgfQp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IHN0cm9rZSBhbmQgZmlsbCBjb2xvdXIgYXQKICogdGhlIHNhbWUgdGltZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIHJlY3QoNTAsIDUwLCAxMDAsIDEwMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyCiAqCiAqIEBzZWUge0BsaW5rIHNldFN0cm9rZX0KICogQHNlZSB7QGxpbmsgc2V0RmlsbH0KICogQHNlZSB7QGxpbmsgbm9Db2xvcn0KICovCmZ1bmN0aW9uIHNldENvbG9yKGNvbG9yKSB7CiAgc2V0RmlsbChjb2xvcik7CiAgc2V0U3Ryb2tlKGNvbG9yKTsKfQoKLyoqCiAqIENoYW5nZSB0aGUgY3Vyc29yIHRvIGEgc3BlY2lmaWMgaWNvbjoKICoKICogLSBBVVRPIC0gdXNlIHdoYXRldmVyIHRoZSBicm93c2VyIHdvdWxkIG90aGVyd2lzZSB1c2UKICogLSBDUk9TUyAtIHVzZSBhIGNyb3NzLWhhaXIgaWNvbgogKiAtIFBPSU5URVIgLSB1c2UgdGhlICJwb2ludGVyIiBpY29uIHRoYXQgaXMgYWxzbyB1c2VkIGZvciBjbGlja2FibGUgbGlua3MKICoKICogVXNlIGFueSBvdGhlciBzdHJpbmcgZm91bmQgb3ZlciBvbiB0aGUgTUROIGN1cnNvciBhcnRpY2xlIHRvIHNldCBhIGN1cnNvciBub3QgY292ZXJlZCBieSB0aGUgYWJvdmUgY29uc3RhbnRzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGAjRkYwMmApOwogKiAgICAgICByZWN0KDAsIDAsIHdpZHRoLzIsIGhlaWdodCk7CiAqICAgICAgIHNldENvbG9yKGAjMEZGMmApOwogKiAgICAgICByZWN0KHdpZHRoLzIsIDAsIHdpZHRoLzIsIGhlaWdodCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyTW92ZSh4LCB5KSB7CiAqICAgICAgIGlmICh4IDwgd2lkdGgvMikgewogKiAgICAgICAgIHNldEN1cnNvcihBVVRPKTsKICogICAgICAgfSBlbHNlIHsKICogICAgICAgICBub0N1cnNvcigpOwogKiAgICAgICB9CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIENTUyBjdXJzb3IgdHlwZQogKgogKiBAc2VlIHtAbGluayBub0N1cnNvcn0KICovCmZ1bmN0aW9uIHNldEN1cnNvcih0eXBlKSB7CiAgX19jdXJyZW50X2N1cnNvciA9IHR5cGU7CiAgX19jYW52YXMuc3R5bGUuY3Vyc29yID0gX19jdXJyZW50X2N1cnNvcjsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBmaWxsIGNvbG91ci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgcmVkYCk7CiAqICAgICAgIHJlY3QoNTAsIDUwLCAxMDAsIDEwMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyIChkZWZhdWx0ID0gYmxhY2spCiAqCiAqIEBzZWUge0BsaW5rIG5vRmlsbH0KICovCmZ1bmN0aW9uIHNldEZpbGwoY29sb3IgPSBgYmxhY2tgKSB7CiAgaWYgKENTU19DT0xPUl9NQVBbY29sb3JdID09PSBfX2hpZ2hsaWdodF9jb2xvcikgewogICAgY29sb3IgPSBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yOwogIH0KICBfX2N0eC5maWxsU3R5bGUgPSBjb2xvcjsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBmb250IHVzaW5nIGEgc2luZ2xlIHN0cmluZy4gRm9yIHRoZSBzeW50YXgsCiAqIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udAogKgogKiBAcGFyYW0ge3N0cmluZ30gZm9udCBBIENTUyBzaG9ydGhhbmQgZm9udCBwcm9wZXJ0eQogKgogKiBAc2VlIHtAbGluayBzZXRGb250RmFtaWx5fQogKiBAc2VlIHtAbGluayBzZXRGb250U2l6ZX0KICogQHNlZSB7QGxpbmsgc2V0Rm9udFdlaWdodH0KICovCmZ1bmN0aW9uIHNldEZvbnQoZm9udCkgewogIF9fY3R4LmZvbnQgPSBmb250IHx8IGAke19fZm9udC53ZWlnaHR9ICR7X19mb250LnNpemV9cHggJHtfX2ZvbnQuZmFtaWx5fWA7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgZm9udCBmYW1pbHkuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBDU1MgZm9udCBmYW1pbHkgbmFtZQogKgogKiBAc2VlIHtAbGluayBzZXRGb250U2l6ZX0KICogQHNlZSB7QGxpbmsgc2V0Rm9udFdlaWdodH0KICovCmZ1bmN0aW9uIHNldEZvbnRGYW1pbHkobmFtZSkgewogIF9fZm9udC5mYW1pbHkgPSBuYW1lOwogIHNldEZvbnQoKTsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBmb250IHNpemUKICoKICogQHBhcmFtIHtudW1iZXJ9IHB4IFRoZSBmb250IHNpemUgaW4gcGl4ZWxzCiAqCiAqIEBzZWUge0BsaW5rIHNldEZvbnRGYW1pbHl9CiAqIEBzZWUge0BsaW5rIHNldEZvbnRXZWlnaHR9CiAqLwpmdW5jdGlvbiBzZXRGb250U2l6ZShweCkgewogIF9fZm9udC5zaXplID0gcHg7CiAgc2V0Rm9udCgpOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IGZvbnQgd2VpZ2h0CiAqCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsIFRoZSBDU1Mgd2VpZ2h0IG51bWJlciBvciBvbmUgb2YgdGhlIHNwZWNpYWwgc3RyaW5ncyAibm9ybWFsIiwgImJvbGQiLCAiYm9sZGVyIiwgb3IgImxpZ2h0ZXIiLgogKgogKiBAc2VlIHtAbGluayBzZXRGb250RmFtaWx5fQogKiBAc2VlIHtAbGluayBzZXRGb250U2l6ZX0KICovCmZ1bmN0aW9uIHNldEZvbnRXZWlnaHQodmFsKSB7CiAgX19mb250LndlaWdodCA9IHZhbDsKICBzZXRGb250KCk7Cn0KCi8qKgogKiBTZXQgdGhlIGJhY2tncm91bmQgZ3JpZCBzcGFjaW5nIGFuZCBjb2xvdXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRHcmlkKDIwLCBgbGF2ZW5kZXJgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBzcGFjaW5nPyBUaGUgc3BhY2luZyBiZXR3ZWVuIGdyaWQgbGluZXMgaW4gcGl4ZWxzIChkZWZhdWx0ID0gMjApCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvcj8gVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIgKGRlZmF1bHQgPSBsaWdodGdyZXkpCiAqCiAqIEBzZWUge0BsaW5rIG5vR3JpZH0KICovCmZ1bmN0aW9uIHNldEdyaWQoc3BhY2luZyA9IDIwLCBjb2xvciA9IGBsaWdodGdyZXlgKSB7CiAgX19kcmF3X2dyaWQgPSB0cnVlOwogIF9fZ3JpZF9zcGFjaW5nID0gc3BhY2luZzsKICBfX2dyaWRfY29sb3IgPSBjb2xvcjsKfQoKLyoqCiAqIFNldCB0aGUgY29sb3IgdGhhdCBzaG91bGQgYmUgdXNlZCB0byByZXBsYWNlIHdoYXRldmVyCiAqIGhpZ2hsaWdodCgpIG1hcmtlZCBhcyB0aGUgInRvIGhpZ2hsaWdodCIgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEhpZ2hsaWdodENvbG9yKGBsaW1lYCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dCgibGV0J3MgZ28iLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJBY3RpdmUoc3RhdGUpIHsKICogICAgICAgaWYgKHN0YXRlKSBoaWdobGlnaHQoYHJlZGApOwogKiAgICAgICBlbHNlIGhpZ2hsaWdodChmYWxzZSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyCiAqCiAqIEBzZWUge0BsaW5rIGhpZ2hsaWdodH0KICovCmZ1bmN0aW9uIHNldEhpZ2hsaWdodENvbG9yKGNvbG9yKSB7CiAgX19jdXJyZW50X2hpZ2hsaWdodF9jb2xvciA9IGNvbG9yOwp9CgovKioKICogU2V0IHRoZSBsaW5lIGRhc2ggcHJvcGVydHkuIFNlZSB0aGUgZm9sbG93aW5nIE1ETiBhcnRpY2xlIGZvciB0aGUgZGV0YWlsczoKICoKICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9zZXRMaW5lRGFzaAogKgogKiBAcGFyYW0gIHtudW1iZXJbXX0gLi4udmFsdWVzIFRoZSBkYXNoIGludGVydmFscyBpbiBwaXhlbAogKgogKiBAc2VlIHtAbGluayBub0xpbmVEYXNofQogKi8KZnVuY3Rpb24gc2V0TGluZURhc2goLi4udmFsdWVzKSB7CiAgX19jdHguc2V0TGluZURhc2godmFsdWVzKTsKfQoKLyoqCiAqIFNldCB0aGUgbGluZSB3aWR0aCBpbiBwaXhlbHMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHJhbmdlKDEsIDEwLCAoaSkgPT4gewogKiAgICAgICAgIHNldExpbmVXaWR0aChpKTsKICogICAgICAgICBsaW5lKDIwLCBpICogMjAsIDE4MCwgaSAqIDIwKTsKICogICAgICAgfSkKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gd2lkdGg/IFRoZSBsaW5lIHdpZHRoIGluIHBpeGVscyAoZGVmYXVsdCA9IDEpCiAqCiAqIEBzZWUge0BsaW5rIHNldFRleHRTdHJva2V9CiAqLwpmdW5jdGlvbiBzZXRMaW5lV2lkdGgod2lkdGggPSAxKSB7CiAgX19jdHgubGluZVdpZHRoID0gd2lkdGg7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgc3Ryb2tlIGNvbG91ci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgcmVkYCk7CiAqICAgICAgIHJlY3QoNTAsIDUwLCAxMDAsIDEwMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyIChkZWZhdWx0ID0gYmxhY2spCiAqCiAqIEBzZWUge0BsaW5rIHNldEZpbGx9CiAqIEBzZWUge0BsaW5rIHNldENvbG9yfQogKi8KZnVuY3Rpb24gc2V0U3Ryb2tlKGNvbG9yID0gYGJsYWNrYCkgewogIGlmIChDU1NfQ09MT1JfTUFQW2NvbG9yXSA9PT0gX19oaWdobGlnaHRfY29sb3IpIHsKICAgIGNvbG9yID0gX19jdXJyZW50X2hpZ2hsaWdodF9jb2xvcjsKICB9CiAgX19jdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCB0ZXh0IGFsaWdubWVudCB2YWx1ZXMuCiAqCiAqIFZhbGlkIGB4QWxpZ25gIHZhbHVlcyBhcmU6CiAqCiAqIC0gQ0VOVEVSIC0gdGhlIHRleHQgYW5jaG9yIGlzIGluIHRoZSBtaWRkbGUgb2YgdGhlIHRleHQuIFRleHQgaXMgcGxhY2VkIGV2ZW5seSBvbiBlaXRoZXIgc2lkZS4KICogLSBFTkQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIHJpZ2h0IGZvciBMVFIgdGV4dCwgYW5kIG9uIHRoZSBsZWZ0IGZvciBSVEwgdGV4dC4KICogLSBMRUZUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHRleHQuIGFsbCB0ZXh0IGlzIHRvIHRoZSByaWdodC4KICogLSBSSUdIVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgdGV4dC4gQWxsIHRleHQgaXMgdG8gdGhlIGxlZnQuCiAqIC0gU1RBUlQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIGxlZnQgZm9yIExUUiB0ZXh0LCBhbmQgb24gdGhlIHJpZ2h0IGZvciBSVEwgdGV4dC4KICoKICogVmFsaWQgYHlBbGlnbmAgdmFsdWVzIGFyZToKICoKICogLSBBTFBIQUJFVElDIC0gc3RhbmRhcmQgdGV4dCBhbGlnbm1lbnQgKGRlZmF1bHQpCiAqIC0gQk9UVE9NIC0gdGhlIHRleHQgaXMgYWxpZ25lZCB0byB0aGUgYm90dG9tIG9mIHRoZSBib3VuZGluZyBib3gKICogLSBIQU5HSU5HIC0gcmVsZXZhbnQgZm9yIFRpYmV0YW4gYW5kIG90aGVyIEluZGljIHNjcmlwdHMuCiAqIC0gSURFT0dSQVBISUMgLSByZWxldmFudCBmb3IgaWRlb2dyYXBoaWMgQ0pLViB0ZXh0LgogKiAtIE1JRERMRSAtIFRoZSB2ZXJ0aWNhbCBlcXVpdmFsZW50IG9mICJjZW50ZXIiLgogKiAtIFRPUCAtIFRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIHRvcCBvZiB0aGUgdHlwb2dyYXBoaWMgImVtIHNxdWFyZSIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Rm9udFNpemUoMjApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgbGluZSh3aWR0aCAvIDIsIDAsIHdpZHRoIC8gMiwgaGVpZ2h0KTsKICogICAgICAgbGluZSgwLCBoZWlnaHQgLyAyLCB3aWR0aCwgaGVpZ2h0IC8gMik7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHRleHQoImNlbnRlciBtaWRkbGUiLCB3aWR0aCAvIDIsIGhlaWdodC8yKTsKICogICAgICAgbGluZSgwLCBoZWlnaHQgLyAyIC0gNTAsIHdpZHRoLCBoZWlnaHQgLyAyIC0gNTApOwogKiAgICAgICBzZXRUZXh0QWxpZ24oUklHSFQsIFRPUCk7CiAqICAgICAgIHRleHQoInJpZ2h0IHRvcCIsIHdpZHRoIC8gMiwgaGVpZ2h0LzIgLSA1MCk7CiAqICAgICAgIGxpbmUoMCwgaGVpZ2h0IC8gMiArIDUwLCB3aWR0aCwgaGVpZ2h0IC8gMiArIDUwKTsKICogICAgICAgc2V0VGV4dEFsaWduKExFRlQsIEJPVFRPTSk7CiAqICAgICAgIHRleHQoImxlZnQgYm90dG9tIiwgd2lkdGggLyAyLCBoZWlnaHQvMiArIDUwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30geEFsaWduIFRoZSBDU1MgaG9yaXpvbnRhbCBhbGlnbm1lbnQKICogQHBhcmFtIHtzdHJpbmd9IHlBbGlnbiBUaGUgQ1NTIHZlcnRpY2FsIGFsaWdubWVudAogKi8KZnVuY3Rpb24gc2V0VGV4dEFsaWduKHhBbGlnbiwgeUFsaWduKSB7CiAgX19jdHgudGV4dEFsaWduID0geEFsaWduOwogIF9fY3R4LnRleHRCYXNlbGluZSA9IHlBbGlnbjsKfQoKLyoqCiAqIFNldCB0aGUgdGV4dCBvdXRsaW5lIHN0cm9raW5nIHByb3BlcnRpZXMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKGByZWRgLCAxKTsKICogICAgICAgc2V0RmlsbChgeWVsbG93YCk7CiAqICAgICAgIHRleHQoImZhbmN5IHRleHQiLCB3aWR0aC8yLCA4MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgICBzZXRGb250U2l6ZSg2NSk7CiAqICAgICAgIHNldFRleHRTdHJva2UoYHJlZGAsIDMpOwogKiAgICAgICBzZXRGaWxsKGB5ZWxsb3dgKTsKICogICAgICAgdGV4dCgiZmFuY3kgdGV4dCIsIHdpZHRoLzIsIDE0MCwgQ0VOVEVSLCBDRU5URVIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlcgogKiBAcGFyYW0ge251bWJlcn0gd2lkdGg/IFRoZSB0ZXh0IHN0cm9rZSB3aWR0aCBpbiBwaXhlbHMgKGRlZmF1bHQgPSAxKQogKgogKiBAc2VlIHtAbGluayBzZXRTdHJva2V9CiAqIEBzZWUge0BsaW5rIHNldExpbmVXaWR0aH0KICovCmZ1bmN0aW9uIHNldFRleHRTdHJva2UoY29sb3IsIHdpZHRoID0gMSkgewogIF9fdGV4dFN0cm9rZSA9IGNvbG9yOwogIHNldExpbmVXaWR0aCh3aWR0aCk7Cn0KLyoqCiAqIFN0YXJ0IGEgbmV3IHNoYXBlLiBUaGlzIHlpZWxkcyBhIGBTaGFwZWAgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBBUEk6CiAqCiAqIC0gYG1ha2VNb3ZhYmxlKG1vdmFibGU/OiBib29sZWFuKWAgLSBhbGxvdyB0aGlzIHNoYXBlIHRvIGJlIG1vdmVkIGFyb3VuZCB3aXRoIHRoZSBwb2ludGVyIChgbW92YWJsZWAgaXMgdHJ1ZSBpZiBvbWl0dGVkKQogKiAtIGBhbGxvd1Jlc2l6aW5nKGFsbG93ZWQ/OiBib29sZWFuKWAgLSBhbGxvdyB0aGUgcG9pbnRzIHRoYXQgbWFrZSB1cCB0aGlzIHNoYXBlIHRvIGJlIG1vdmVkIGFyb3VuZCAoYGFsbG93ZWRgIGlzIHRydWUgaWYgb21pdHRlZCkKICogLSBgc2hvd1BvaW50cyhzaG93UG9pbnRzPzogYm9vbGVhbilgIC0gZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBkcmF3IHRoZSBwYXRoaW5nIHBvaW50cyBvbiB0b3Agb2YgdGhlIHNoYXBlIGR1cmluZyBkcmF3KCkuCiAqIC0gYGNsb3NlKClgIC0gY2xvc2UgdGhlIGN1cnJlbnQgc2VnbWVudCBzbyBubyBuZXcgcG9pbnRzIGNhbiBiZSBhZGRlZC4KICogLSBgbmV3U2VnbWVudChjbG9zZUV4aXN0aW5nPzogYm9vbGVhbilgIC0gc3RhcnQgYSBuZXcgc2VnbWVudCBpbiB0aGlzIHNoYXBlLCB3CiAqCiAqIEEgU2hhcGUgYWxzbyBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIHV0aWxpdHkgZnVuY3Rpb25zOgogKgogKiAtIGBvZmZzZXQoeCwgeSlgIC0gKHRlbXBvcmFyaWx5KSBtb3ZlIHRoaXMgc2hhcGUgYnkgKHgseSkKICogLSBgY29tbWl0KClgIC0gY29tbWl0IHRoZSB0ZW1wb3Jhcnkgb2Zmc2V0IGJ5IHJld3JpdGluZyBhbGwgY29vcmRpYW50ZXMuCiAqIC0gYHJlc2V0KClgIC0gcmVzZXQgdGhlIHNoYXBlIHRvIGhhdmluZyBubyBvZmZzZXQuCiAqIC0gYGRyYXcoKWAgLSBkcmF3cyB0aGUgc2hhcGUgdXNpbmcgaXRzIGN1cnJlbnQgc3Ryb2tlLCBmaWxsLCBhbmQgInNob3cgcG9pbnRzIiBzZXR0aW5ncy4KICogLSBgaW5zaWRlKHgsIHkpOiBzZWdtZW50W11gIC0gcmV0dXJucyB0aGUgbGlzdCBvZiBhbGwgc2VnbWVudHMgdGhhdCAoeCx5KSBpcyBpbnNpZGUgb2YuCiAqCiAqIEFuZCBpdCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIHBhdGhpbmcgZnVuY3Rpb25zLCB3aXRoIGFyZ3VtZW50cyB0aGF0IGNhbiBlaXRoZXIgY29uc2lzdCBvZgogKiAodGhlIG5lY2Vzc2FyeSBudW1iZXIgb2YpIHBhaXJzIG9mIGNvb3JkaW5hdGUgdmFsdWVzLCBvciAodGhlIG5lY2Vzc2FyeSBudW1iZXIgb2YpIHBvaW50bGlrZXMsCiAqIGJlaW5nIG9iamVjdHMgd2l0aCBhbiBgeGAgYW5kIGB5YCBwcm9wZXJ0eS4KICoKICogLSBgbW92ZVRvKHgseSBPUiBwOnBvaW50TGlrZSlgIC0gc3RhcnQgYSBuZXcgc2VnbWVudCBhbmQgbWFyayBpdHMgcGF0aCBhcyBzdGFydGluZyBhdCAoeCx5KS4KICogLSBgbGluZVRvKHgseSwuLi4gT1IgcCwuLi4pYCAtIGFkZCBvbmUgb3IgbW9yZSBwb2ludHMgdGhhdCBjb25uZWN0IHRvIHRoZSBwcmV2aW91cyBwb2ludCB3aXRoIGEgc3RyYWlnaHQgbGluZS4KICogLSBgcXVhZFRvKGN4LGN5LHgseSwuLi4gT1IgY3AscCwuLi4pYCAtIGFkZCBvbmUgb3IgbW9yZSBxdWFkcmF0aWMgYmV6aWVyIGN1cnZlcywgd2hlcmUgKGN4LGN5KS9jcCBpcyB0aGUgY29udHJvbCBwb2ludCwgYW5kICh4LHkpL3AgdGhlIGVuZCBwb2ludC4KICogLSBgY3VydmVUbyhjeDEsY3kxLGN4MixjeTIseCx5LC4uLiBPUiBjMXAsYzJwLHAsLi4uKWAgLSBhZGQgb25lIG9yIG1vcmUgY3ViaWMgYmV6aWVyIGN1cnZlcywgd2hpY2ggaGF2ZSB0d28gY29udHJvbCBwb2ludHMuCiAqIC0gYHNwbGluZVRvKHgxLHkxLC4uLiBPUiBwMSwuLi4pYCAtIGFkZCBvbmUgb3IgbW9yZSBjYXJkaW5hbCBzcGxpbmUgcGF0aGluZyBjb29yZGluYXRlcy4KICoKICogQ2FyZGluYWwgc3BsaW5lIGNvb3JkaW5hdGVzIGFyZSByZW5kZXJlZCBieSB0cmVhdGluZyB0aGUgcGF0aCBhcyBjbG9zZWQKICogKGV2ZW4gaWYgaXQgaXMgbm90KSwgcGVyZm9ybWluZyB3cmFwLWFyb3VuZCBsb29rdXBzIGFzIG5lZWRlZCBpbiBvcmRlcgogKiB0byBkcmF3ICJzb21ldGhpbmcgc2Vuc2libGUiLgogKgogKiBOb3RlIHRoYXQgc2hhcGUgY3V0b3V0cyBhcmUgbm90IChjdXJyZW50bHkpIHBvc3NpYmxlLiBZb3UnbGwgd2FudCB0bwogKiByb2xsIHlvdXIgb3duIFNWRyBidWlsZGVyIGFuZCB0aGVuIHR1cm4gdGhhdCBTVkcgaW50byBhIGRhdGEtdXJpIHRoYXQKICogeW91IGp1c3QgcmVuZGVyIHdpdGggaW1hZ2UoKSBpbnN0ZWFkIGlmIHlvdSBuZWVkIGN1dG91dHMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBsZXQgc2hhcGU7CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNoYXBlID0gc3RhcnRTaGFwZSgpOwogKiAgICAgICBzaGFwZS5hbGxvd1Jlc2l6aW5nKCk7CiAqICAgICAgIHNoYXBlLnNob3dQb2ludHMoKTsKICogICAgICAgc2hhcGUubWFrZU1vdmFibGUoKTsKICogICAgICAgc2hhcGUuYWRkKDAsaGVpZ2h0LzIpOwogKiAgICAgICBzaGFwZS5hZGQod2lkdGgvMiwgMCk7CiAqICAgICAgIHNoYXBlLmFkZCh3aWR0aCwgaGVpZ2h0LzIpOwogKiAgICAgICBzaGFwZS5hZGQod2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgc2hhcGUuY2xvc2UoKTsKICogICAgICAgc2hhcGUuc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzaGFwZS5zZXRGaWxsKGBnb2xkYCk7CiAqICAgICB9CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2hhcGUuZHJhdyh0cnVlKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcmV0dXJucyB7U2hhcGV9IHRoZSBuZXdseSBjcmVhdGVkIHNoYXBlIG9iamVjdAogKgogKiBAc2VlIHtAbGluayBlbmRTaGFwZX0KICovCmZ1bmN0aW9uIHN0YXJ0U2hhcGUoKSB7CiAgcmV0dXJuIChfX3NoYXBlID0gbmV3IFNoYXBlKCkpOwp9CgovKioKICogQ2xlYXIgdGhlIGN1cnJlbnQgc2hhcGUsIG9wdGlvbmFsbHkgY2xvc2luZyBpdC4KICoKICogQHBhcmFtIHtib29sZWFufSBjbG9zZT8gV2hlbiB1c2VkLCBjbG9zZXMgdGhlIHNoYXBlJ3MgY3VycmVudCBzZWdtZW50LgogKiBAcmV0dXJucyB7U2hhcGV9IFRoZSBzaGFwZSB0aGF0IGdvdCBjbG9zZWQKICoKICogQHNlZSB7QGxpbmsgc3RhcnRTaGFwZX0KICovCmZ1bmN0aW9uIGVuZFNoYXBlKGNsb3NlID0gZmFsc2UpIHsKICBpZiAoX19zaGFwZSAmJiBjbG9zZSkgX19zaGFwZS5jbG9zZSgpOwogIGNvbnN0IHNoYXBlID0gX19zaGFwZTsKICBfX3NoYXBlID0gdW5kZWZpbmVkOwogIHJldHVybiBzaGFwZTsKfQoKLyoqCiAqIFN0YXJ0IGEgbmV3IHNlZ21lbnQgaW4gYSBzaGFwZS4KICoKICogQHBhcmFtIHtib29sZWFufSBjbG9zZT8gQ2xvc2VzIHRoZSBjdXJyZW50IHNlZ21lbnQgYmVmb3JlIG9wZW5pbmcgYSBuZXcgb25lIChkZWZhdWx0ID0gdHJ1ZSkKICoKICogQHNlZSB7QGxpbmsgc3RhcnRTaGFwZX0KICogQHNlZSB7QGxpbmsgZW5kU2hhcGV9CiAqLwpmdW5jdGlvbiBuZXdTZWdtZW50KGNsb3NlID0gdHJ1ZSkgewogIF9fc2hhcGU/Lm5ld1NlZ21lbnQoY2xvc2UpOwp9Ci8qKgogKiBDZW50ZXJzIHRoZSBjb29yZGluYXRlIHN5c3RlbSBvbiB5b3VyIGdyYXBoaWMuCiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBjYWxsaW5nOgogKgogKiBgYGAKICogdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogYGBgCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBjZW50ZXIoKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIGxpbmUoMCwgLWh1Z2UsIDAsIGh1Z2UpOwogKiAgICAgICBsaW5lKC1odWdlLCAwLCBodWdlLCAwKTsKICogICAgICAgc2V0Q29sb3IocmFuZG9tQ29sb3IoKSk7CiAqICAgICAgIHBvaW50KCAxMCwgIDEwKTsKICogICAgICAgc2V0Q29sb3IocmFuZG9tQ29sb3IoKSk7CiAqICAgICAgIHBvaW50KCAxMCwgLTEwKTsKICogICAgICAgc2V0Q29sb3IocmFuZG9tQ29sb3IoKSk7CiAqICAgICAgIHBvaW50KC0xMCwgLTEwKTsKICogICAgICAgc2V0Q29sb3IocmFuZG9tQ29sb3IoKSk7CiAqICAgICAgIHBvaW50KC0xMCwgIDEwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKi8KZnVuY3Rpb24gY2VudGVyKCkgewogIHRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpOwp9CgovKioKICogUmVzZXQgdGhlIGNvb3JkaW5hdGUgdHJhbnNmb3JtIG1hdHJpeC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgbm9HcmlkKCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgbGlnaHRncmV5YCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgdHJhbnNsYXRlKDUwLDUwKTsKICogICAgICAgbGluZSgwLDAsMTAwLDApOwogKiAgICAgICBwb2ludCgwLDApOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCk7CiAqICAgICAgIHBvaW50KDEwLDApOwogKiAgICAgICByb3RhdGUoUEkvNCk7CiAqICAgICAgIHBvaW50KDEwLDApOwogKiAgICAgICBsaW5lKDAsMCwxMDAsMCk7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIHJvdGF0ZSgtUEkvNikKICogICAgICAgcG9pbnQoMTAwLDApOwogKiAgICAgICBzY2FsZSgwLjUsIDAuNSk7CiAqICAgICAgIHBvaW50KDEwMCwwKTsKICogICAgICAgbGluZSgxMDAsMCwyMDAsMCk7CiAqICAgICAgIHJlc2V0VHJhbnNmb3JtKCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBsaW5lKDAsMywxMDAsMyk7CiAqICAgICAgIHBvaW50KDAsMyk7CiAqICAgICAgIHBvaW50KDEwLDMpOwogKiAgICAgICBwb2ludCgxMDAsMyk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgdHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gcmVzZXRUcmFuc2Zvcm0oKSB7CiAgX19jdHgucmVzZXRUcmFuc2Zvcm0oKTsKfQoKLyoqCiAqIFJvdGF0ZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gd3J0IHRoZSBjdXJyZW50IG9yaWdpbi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgbm9HcmlkKCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgbGlnaHRncmV5YCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwb2ludCgwLDApOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCk7CiAqICAgICAgIGxpbmUoMCwwLDIwLDIwKTsKICogICAgICAgcG9pbnQoMjAsMjApOwogKiAgICAgICByb3RhdGUoUEkvNCk7CiAqICAgICAgIGxpbmUoMCwwLDIwLDIwKTsKICogICAgICAgcG9pbnQoMjAsMjApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBUaGUgYW5nbGUgYnkgd2hpY2ggdG8gcm90YXRlIHRoZSBjb29yZGluYXRlIHN5c3RlbSBpbiByYWRpYW5zCiAqCiAqIEBzZWUge0BsaW5rIHRyYW5zZm9ybX0KICogQHNlZSB7QGxpbmsgcmVzZXRUcmFuc2Zvcm19CiAqLwpmdW5jdGlvbiByb3RhdGUoYW5nbGUgPSAwKSB7CiAgX19jdHgucm90YXRlKGFuZ2xlKTsKfQoKLyoqCiAqIFNjYWxlIHRoZSBjb29yZGluYXRlIHN5c3RlbSB3cnQgdGhlIGN1cnJlbnQgb3JpZ2luLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBub0dyaWQoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBsaWdodGdyZXlgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHBvaW50KDAsMCk7CiAqICAgICAgIHNldENvbG9yKGBkYXJrZ3JlZW5gKTsKICogICAgICAgbGluZSgwLDAsMjAsMjApOwogKiAgICAgICBwb2ludCgyMCwyMCk7CiAqICAgICAgIHJvdGF0ZShQSS80KTsKICogICAgICAgc2NhbGUoMik7CiAqICAgICAgIGxpbmUoMCwwLDIwLDIwKTsKICogICAgICAgcG9pbnQoMjAsMjApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBhbW91bnQgYnkgd2hpY2ggdG8gc2NhbGUgdGhlIHggY29vcmRpbmF0ZXMuCiAqIEBwYXJhbSB7bnVtYmVyfSB5PyBUaGUgYW1vdW50IGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSB4IGNvb3JkaW5hdGVzIChkZWZhdWx0ID0gc2FtZSBhcyB4KQogKgogKiBAc2VlIHtAbGluayB0cmFuc2Zvcm19CiAqIEBzZWUge0BsaW5rIHJlc2V0VHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gc2NhbGUoeCA9IDEsIHkgPSB4KSB7CiAgX19jdHguc2NhbGUoeCwgeSk7Cn0KCi8qKgogKiBDb252ZXJ0IGEgc2NyZWVuIChlLmcuIGJyb3dzZXIpIGNvb3JkaW5hdGUgaW50byBpdHMKICogY29ycmVzcG9uZGluZyAidHJhbnNmb3JtZWQiIGNvb3JkaW5hdGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYGxpZ2h0Z3JleWApOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICByb3RhdGUoUEkvNCk7CiAqICAgICAgIHNjYWxlKDAuNSk7CiAqICAgICAgIGlmIChwb2ludGVyLmFjdGl2ZSkgewogKiAgICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgICBwb2ludChwb2ludGVyLngsIHBvaW50ZXIueSk7CiAqICAgICAgICAgc2V0Q29sb3IoYGJsdWVgKTsKICogICAgICAgICBwb2ludChzY3JlZW5Ub1dvcmxkKHBvaW50ZXIueCwgcG9pbnRlci55KSk7CiAqICAgICAgIH0KICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKCkgewogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgc2NyZWVuIGNvb3JkaW5hdGUncyB4IHZhbHVlIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgc2NyZWVuIGNvb3JkaW5hdGUncyB5IHZhbHVlIGluIHBpeGVscwogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwIFRoZSB3b3JsZCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSBzY3JlZW4ge3gseX0gY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwIFRoZSB3b3JsZCB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIHByb2plY3R9CiAqIEBzZWUge0BsaW5rIHdvcmxkVG9TY3JlZW59CiAqLwpmdW5jdGlvbiBzY3JlZW5Ub1dvcmxkKHgsIHkpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KCiAgbGV0IE0gPSBfX2N0eC5nZXRUcmFuc2Zvcm0oKS5pbnZlcnRTZWxmKCk7CgogIHJldHVybiBuZXcgUG9pbnQoeCAqIE0uYSArIHkgKiBNLmMgKyBNLmUsIHggKiBNLmIgKyB5ICogTS5kICsgTS5mKTsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCB0cmFuc2Zvcm0gbWF0cml4LCBiYXNlZCBvbiBhcHBseWluZzoKICoKICogYGBgCiAqICAgICAgIHwgYSBiIGMgfAogKiAgIG0gPSB8IGQgZSBmIHwKICogICAgICAgfCAwIDAgMSB8CiAqIGBgYAogKgogKiBXaXRoIHRoZSBwYXJhbWV0ZXJzIGRlZmF1bHRpbmcgdG8gdGhlIGlkZW50aXR5IG1hdHJpeC4KICoKICogU2VlIHRoZSBmb2xsb3dpbmcgTUROIGFydGljbGUgZm9yIG1vcmUgZGV0YWlscyBhYm91dCB0aGlzIGZ1bmN0aW9uOgogKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3RyYW5zZm9ybQogKgogKiBAcGFyYW0ge251bWJlcn0gYSAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSB7bnVtYmVyfSBiIChkZWZhdWx0ID0gMCkKICogQHBhcmFtIHtudW1iZXJ9IGMgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0ge251bWJlcn0gZCAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSB7bnVtYmVyfSBlIChkZWZhdWx0ID0gMSkKICogQHBhcmFtIHtudW1iZXJ9IGYgKGRlZmF1bHQgPSAwKQogKgogKiBAc2VlIHtAbGluayByZXNldFRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHRyYW5zZm9ybShhID0gMSwgYiA9IDAsIGMgPSAwLCBkID0gMCwgZSA9IDEsIGYgPSAwKSB7CiAgX19jdHgudHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpOwp9CgovKioKICogVHJhbnNsYXRlIHRoZSBjb29yZGluYXRlIHN5c3RlbSBieSBzb21lIGFtb3VudCBvZiB4IGFuZCB5IHVuaXRzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgcG9pbnQoMCwwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgeCB2YWx1ZSBpbiBwaXhlbHMgdG8gYmUgdHJlYXRlZCBhcyB0aGUgbmV3ICJ6ZXJvIgogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgeSB2YWx1ZSBpbiBwaXhlbHMgdG8gYmUgdHJlYXRlZCBhcyB0aGUgbmV3ICJ6ZXJvIgogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUge3gseX0gY29vcmRpbmF0ZSB0byBiZSB0cmVhdGVkIGFzIHRoZSBuZXcgInplcm8iCiAqCiAqIEBzZWUge0BsaW5rIHRyYW5zZm9ybX0KICogQHNlZSB7QGxpbmsgcmVzZXRUcmFuc2Zvcm19CiAqLwpmdW5jdGlvbiB0cmFuc2xhdGUoeCA9IDAsIHkgPSAwKSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgX19jdHgudHJhbnNsYXRlKHgsIHkpOwp9CgovKioKICogQ29udmVydCBhbiBpbi1jYW52YXMgInRyYW5zZm9ybWVkIiBjb29yZGluYXRlIGludG8gaXRzCiAqIGNvcnJlc3BvbmRpbmcgInNjcmVlbiIgKGkuZS4gYnJvd3NlciBjYW52YXMgb2Zmc2V0KSBjb29yZGluYXRlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTsKICoKICogICAgICAgcm90YXRlKG1pbGxpcygpIC8gMjAwMCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgY29uc3QgcCA9IG5ldyBQb2ludCgzMCwgMCk7CiAqICAgICAgIHBvaW50KHApOwogKiAgICAgICB0ZXh0KGAke3AueH0sJHtwLnl9YCwgcC54ICsgMTAsIHAueSArIDEwKTsKICoKICogICAgICAgY29uc3Qge3gsIHl9ID0gd29ybGRUb1NjcmVlbihwKTsKICogICAgICAgcmVzZXRUcmFuc2Zvcm0oKTsKICogICAgICAgc2V0Rm9udFNpemUoMTYpOwogKiAgICAgICB0ZXh0KGAke3gudG9GaXhlZCgpfSwke3kudG9GaXhlZCgpfWAsIHggLSAyNSwgeSAtIDE1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgd29ybGQgY29vcmRpbmF0ZSdzIHggdmFsdWUgaW4gcGl4ZWxzCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSB3b3JsZCBjb29yZGluYXRlJ3MgeSB2YWx1ZSBpbiBwaXhlbHMKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgc2NyZWVuIHt4LHl9IGNvb3JkaW5hdGUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHdvcmxkIHt4LHl9IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgc2NyZWVuIHt4LHl9IGNvb3JkaW5hdGUKICoKICogQHNlZSB7QGxpbmsgcHJvamVjdH0KICogQHNlZSB7QGxpbmsgc2NyZWVuVG9Xb3JsZH0KICovCmZ1bmN0aW9uIHdvcmxkVG9TY3JlZW4oeCwgeSkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQoKICBsZXQgTSA9IF9fY3R4LmdldFRyYW5zZm9ybSgpOwoKICByZXR1cm4gbmV3IFBvaW50KHggKiBNLmEgKyB5ICogTS5jICsgTS5lLCB4ICogTS5iICsgeSAqIE0uZCArIE0uZik7Cn0KZnVuY3Rpb24gZ3JpZCgpIHsKICBzYXZlKCk7CiAgc2V0TGluZVdpZHRoKDAuNSk7CiAgbm9GaWxsKCk7CiAgc2V0U3Ryb2tlKF9fZ3JpZF9jb2xvcik7CiAgZm9yICgKICAgIGxldCB4ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHggPCB3aWR0aDsKICAgIHggKz0gX19ncmlkX3NwYWNpbmcKICApIHsKICAgIGxpbmUoeCwgMCwgeCwgaGVpZ2h0KTsKICB9CiAgZm9yICgKICAgIGxldCB5ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHkgPCBoZWlnaHQ7CiAgICB5ICs9IF9fZ3JpZF9zcGFjaW5nCiAgKSB7CiAgICBsaW5lKDAsIHksIHdpZHRoLCB5KTsKICB9CiAgcmVzdG9yZSgpOwp9CmZ1bmN0aW9uIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCkgewogIC8vIFdlIGRvbid0IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggdGhlIGJyb3dzZXIsIHNvIHdlJ3JlIG9ubHkKICAvLyBnb2luZyB0byBhbGxvdyB1bm1vZGlmaWVkIGtleXMsIG9yIHNoaWZ0LW1vZGlmaWVkIGtleXMsCiAgLy8gYW5kIHRhYiBoYXMgdG8gYWx3YXlzIHdvcmsuIEZvciBvYnZpb3VzIHJlYXNvbnMuCiAgY29uc3QgdGFiID0gZXZ0LmtleSAhPT0gIlRhYiI7CiAgY29uc3QgZnVuY3Rpb25LZXkgPSBldnQua2V5Lm1hdGNoKC9GXGQrLykgPT09IG51bGw7CiAgY29uc3Qgc3BlY2lmaWNDaGVjayA9IHRhYiAmJiBmdW5jdGlvbktleTsKICBpZiAoIWV2dC5hbHRLZXkgJiYgIWV2dC5jdHJsS2V5ICYmICFldnQubWV0YUtleSAmJiBzcGVjaWZpY0NoZWNrKSB7CiAgICBpZiAoZXZ0LnRhcmdldCA9PT0gX19jYW52YXMpIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIF9fa2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBrZXlib2FyZFtrZXldID0gRGF0ZS5ub3coKTsKICBpZiAodHlwZW9mIGtleURvd24gIT09IGB1bmRlZmluZWRgKQogICAga2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9CgpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBrZXlkb3duYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlEb3duKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0pOwoKZnVuY3Rpb24gX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBkZWxldGUga2V5Ym9hcmRba2V5XTsKICBpZiAodHlwZW9mIGtleVVwICE9PSBgdW5kZWZpbmVkYCkKICAgIGtleVVwKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0KCl9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoYGtleXVwYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9KTsKY29uc3QgX19iaW5vbWlhbENvZWZmaWNpZW50cyA9IFtbMV0sIFsxLCAxXV07CmNsYXNzIE1hdHJpeCB7CiAgY29uc3RydWN0b3IobiwgbSwgZGF0YSkgewogICAgZGF0YSA9IG4gaW5zdGFuY2VvZiBBcnJheSA/IG4gOiBkYXRhOwogICAgdGhpcy5kYXRhID0KICAgICAgZGF0YSA/PyBbLi4ubmV3IEFycmF5KG4pXS5tYXAoKHYpID0+IFsuLi5uZXcgQXJyYXkobSldLm1hcCgodikgPT4gMCkpOwogICAgdGhpcy5yb3dzID0gdGhpcy5kYXRhLmxlbmd0aDsKICAgIHRoaXMuY29scyA9IHRoaXMuZGF0YVswXS5sZW5ndGg7CiAgfQogIHNldERhdGEoZGF0YSkgewogICAgdGhpcy5kYXRhID0gZGF0YTsKICB9CiAgZ2V0KGksIGopIHsKICAgIHJldHVybiB0aGlzLmRhdGFbaV1bal07CiAgfQogIHNldChpLCBqLCB2YWx1ZSkgewogICAgdGhpcy5kYXRhW2ldW2pdID0gdmFsdWU7CiAgfQogIHJvdyhpKSB7CiAgICByZXR1cm4gdGhpcy5kYXRhW2ldOwogIH0KICBjb2woaikgewogICAgdmFyIGQgPSB0aGlzLmRhdGEsCiAgICAgIGNvbCA9IFtdOwogICAgZm9yIChsZXQgciA9IDAsIGwgPSBkLmxlbmd0aDsgciA8IGw7IHIrKykgewogICAgICBjb2wucHVzaChkW3JdW2pdKTsKICAgIH0KICAgIHJldHVybiBjb2w7CiAgfQogIG11bHRpcGx5KG90aGVyKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeChtdWx0aXBseU1hdHJpeCh0aGlzLmRhdGEsIG90aGVyLmRhdGEpKTsKICB9CiAgaW52ZXJ0KCkgewogICAgcmV0dXJuIG5ldyBNYXRyaXgoaW52ZXJ0TWF0cml4KHRoaXMuZGF0YSkpOwogIH0KICB0cmFuc3Bvc2UoKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeCh0cmFuc3Bvc2VNYXRyaXgodGhpcy5kYXRhKSk7CiAgfQp9CmNsYXNzIFBvaW50IHsKICBjb25zdHJ1Y3Rvcih4LCB5KSB7CiAgICB0aGlzLnggPSB4OwogICAgdGhpcy55ID0geTsKICB9Cn0KCmNsYXNzIENpcmNsZSBleHRlbmRzIFBvaW50IHsKICBjb25zdHJ1Y3Rvcih4LCB5LCByKSB7CiAgICBzdXBlcih4LCB5KTsKICAgIHRoaXMuciA9IHI7CiAgfQp9CmZ1bmN0aW9uIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKSB7CiAgY3VycmVudE1vdmFibGUgPSBmYWxzZTsKCiAgaWYgKCFfX21vdmFibGVfcG9pbnRzLmxlbmd0aCkgcmV0dXJuOwoKICBjb25zdCBtYXRjaGVzID0gW107CiAgY29uc3QgbWF0Y2hQYWRkaW5nID0gdHlwZS5pbmNsdWRlcyhgbW91c2VgKSA/IDEwIDogMzA7CgogIF9fbW92YWJsZV9wb2ludHMuZm9yRWFjaCgocCwgcG9zKSA9PiB7CiAgICBpZiAocCBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIGlmIChwLmluc2lkZSh4LCB5KS5sZW5ndGggPiAwKSB7CiAgICAgICAgbWF0Y2hlcy5wdXNoKHsgcCwgZDogMCB9KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgbGV0IHgyID0gcFswXSA9PT0gdW5kZWZpbmVkID8gcC54IDogcFswXTsKICAgICAgbGV0IHkyID0gcFsxXSA9PT0gdW5kZWZpbmVkID8gcC55IDogcFsxXTsKICAgICAgY29uc3QgZCA9IGRpc3QoeCwgeSwgeDIsIHkyKTsKICAgICAgaWYgKGQgPCAocC5yID8gcC5yIDogMCkgKyBtYXRjaFBhZGRpbmcpIHsKICAgICAgICBtYXRjaGVzLnB1c2goeyBwLCBkIH0pOwogICAgICB9CiAgICB9CiAgfSk7CgogIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IGBhdXRvYDsKCiAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7CiAgICBtYXRjaGVzLnNvcnQoKGEsIGIpID0+IGEuZCAtIGIuZCk7CiAgICBjdXJyZW50TW92YWJsZSA9IG1hdGNoZXNbMF0ucDsKICAgIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IGBwb2ludGVyYDsKICB9Cn0KCmZ1bmN0aW9uIF9fdG9Qb2ludGVyRXZlbnQoZXZ0KSB7CiAgbGV0IHBvaW50ZXIgPSBldnQ7CiAgLy8gQ29udmVydCBtb3VzZSBvciB0b3VjaCBpbnRvIGdlbmVyaWMgcG9pbnRlci4gV2hpY2ggd2UgbmVlZAogIC8vIHRvIGRvIGJlY2F1c2UgQ2hyb21lIG9uIE1hY09TIGhhcyBkZWNpZGVkIHRvIG5vdCBnZW5lcmF0ZQogIC8vIHBvaW50ZXIgZXZlbnRzIHdoZW4gdGhlcmUncyBhIG1vdXNlLiBUaGFua3MgR29vZ2xlIQogIGlmIChldnQudHlwZS5pbmNsdWRlcyhgdG91Y2hgKSkgewogICAgY29uc3QgeyB0b3VjaGVzLCBjaGFuZ2VkVG91Y2hlcyB9ID0gZXZ0Lm9yaWdpbmFsRXZlbnQgPz8gZXZ0OwogICAgcG9pbnRlciA9IHRvdWNoZXNbMF0gPz8gY2hhbmdlZFRvdWNoZXNbMF07CiAgfQogIGNvbnN0IHsgY2xpZW50WCwgY2xpZW50WSB9ID0gcG9pbnRlcjsKICBjb25zdCB7IGxlZnQsIHRvcCB9ID0gX19jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgcmV0dXJuIHsgb2Zmc2V0WDogY2xpZW50WCAtIGxlZnQsIG9mZnNldFk6IGNsaWVudFkgLSB0b3AgfTsKfQoKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0KCltgdG91Y2hzdGFydGAsIGBtb3VzZWRvd25gXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZXZ0KSA9PiB7CiAgICBpZiAoX19maW5pc2hlZF9zZXR1cCkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IF9fdG9Qb2ludGVyRXZlbnQoZXZ0KTsKICAgICAgY29uc3QgeyB4LCB5IH0gPSBzY3JlZW5Ub1dvcmxkKG9mZnNldFgsIG9mZnNldFkpOwogICAgICBPYmplY3QuYXNzaWduKHBvaW50ZXIsIHsgeCwgeSwgdHlwZSwgZG93bjogdHJ1ZSwgbWFyazogeyB4LCB5IH0gfSk7CiAgICAgIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKTsKICAgICAgX19wb2ludGVyRG93bih4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJEb3duKHgsIHkpIHsKICBpZiAoY3VycmVudE1vdmFibGUpIHsKICAgIGlmIChjdXJyZW50TW92YWJsZSBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIHNwZWNpYWwuCiAgICB9IGVsc2UgewogICAgICBjdXJyZW50TW92YWJsZS5fZHggPSBjdXJyZW50TW92YWJsZS54IC0geDsKICAgICAgY3VycmVudE1vdmFibGUuX2R5ID0gY3VycmVudE1vdmFibGUueSAtIHk7CiAgICB9CiAgfQogIGlmICh0eXBlb2YgcG9pbnRlckRvd24gIT09IGB1bmRlZmluZWRgKSBwb2ludGVyRG93bih4LCB5KTsKfQoKW2B0b3VjaGVuZGAsIGBtb3VzZXVwYF0uZm9yRWFjaCgodHlwZSkgPT4gewogIF9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgKGV2dCkgPT4gewogICAgaWYgKF9fZmluaXNoZWRfc2V0dXApIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgY29uc3QgeyBvZmZzZXRYLCBvZmZzZXRZIH0gPSBfX3RvUG9pbnRlckV2ZW50KGV2dCk7CiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gc2NyZWVuVG9Xb3JsZChvZmZzZXRYLCBvZmZzZXRZKTsKICAgICAgT2JqZWN0LmFzc2lnbihwb2ludGVyLCB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHR5cGUsCiAgICAgICAgZG93bjogZmFsc2UsCiAgICAgICAgbWFyazogZmFsc2UsCiAgICAgICAgZHJhZzogZmFsc2UsCiAgICAgIH0pOwogICAgICBfX3BvaW50ZXJVcCh4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJVcCh4LCB5KSB7CiAgaWYgKHR5cGVvZiBwb2ludGVyVXAgIT09IGB1bmRlZmluZWRgKSBwb2ludGVyVXAoeCwgeSk7CiAgaWYgKHBvaW50ZXIubWFyaz8ueCA9PT0geCAmJiBwb2ludGVyLm1hcms/LnkgPT09IHkpIHsKICAgIGlmICh0eXBlb2YgcG9pbnRlckNsaWNrICE9PSBgdW5kZWZpbmVkYCkgcG9pbnRlckNsaWNrKHgsIHkpOwogIH0KICBpZiAoY3VycmVudE1vdmFibGUgJiYgY3VycmVudE1vdmFibGUgaW5zdGFuY2VvZiBTaGFwZSkgewogICAgY3VycmVudE1vdmFibGUuY29tbWl0KCk7CiAgfQp9CgpbYHRvdWNobW92ZWAsIGBtb3VzZW1vdmVgXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZXZ0KSA9PiB7CiAgICBpZiAoX19maW5pc2hlZF9zZXR1cCkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IF9fdG9Qb2ludGVyRXZlbnQoZXZ0KTsKICAgICAgY29uc3QgeyB4LCB5IH0gPSBzY3JlZW5Ub1dvcmxkKG9mZnNldFgsIG9mZnNldFkpOwogICAgICBPYmplY3QuYXNzaWduKHBvaW50ZXIsIHsgeCwgeSwgdHlwZSB9KTsKICAgICAgaWYgKCFwb2ludGVyLmRvd24pIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKTsKICAgICAgX19wb2ludGVyTW92ZSh4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJNb3ZlKHgsIHkpIHsKICBsZXQgaGFkTW92YWJsZSA9IGZhbHNlOwogIGlmIChwb2ludGVyLmRvd24gJiYgY3VycmVudE1vdmFibGUpIHsKICAgIGlmIChjdXJyZW50TW92YWJsZSBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIGN1cnJlbnRNb3ZhYmxlLm9mZnNldCh4IC0gcG9pbnRlci5tYXJrLngsIHkgLSBwb2ludGVyLm1hcmsueSk7CiAgICB9IGVsc2UgaWYgKGN1cnJlbnRNb3ZhYmxlWzBdKSB7CiAgICAgIGN1cnJlbnRNb3ZhYmxlWzBdID0geCArIGN1cnJlbnRNb3ZhYmxlLl9keDsKICAgICAgY3VycmVudE1vdmFibGVbMV0gPSB5ICsgY3VycmVudE1vdmFibGUuX2R5OwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudE1vdmFibGUueCA9IHggKyBjdXJyZW50TW92YWJsZS5fZHg7CiAgICAgIGN1cnJlbnRNb3ZhYmxlLnkgPSB5ICsgY3VycmVudE1vdmFibGUuX2R5OwogICAgfQogICAgY3VycmVudE1vdmFibGUuX19vbl9tb3ZlPy4oKTsKICAgIGhhZE1vdmFibGUgPSB0cnVlOwogIH0KCiAgcG9pbnRlci5kcmFnID0gcG9pbnRlci5kb3duOwoKICBpZiAocG9pbnRlci5kcmFnICYmIHR5cGVvZiBwb2ludGVyRHJhZyAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJEcmFnKHgsIHkpOwogIH0KCiAgaWYgKHR5cGVvZiBwb2ludGVyTW92ZSAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJNb3ZlKHgsIHkpOwogIH0KCiAgaWYgKGhhZE1vdmFibGUgJiYgIXBsYXlpbmcpIHJlZHJhdygpOwp9CgpbYHRvdWNoc3RhcnRgLCBgbW91c2VlbnRlcmBdLmZvckVhY2goKHR5cGUpID0+IHsKICBfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsICgpID0+IHsKICAgIHBvaW50ZXIuYWN0aXZlID0gdHJ1ZTsKICAgIF9fcG9pbnRlckFjdGl2ZSh0cnVlKTsKICB9KTsKfSk7CgpbYHRvdWNoZW5kYCwgYG1vdXNlbGVhdmVgXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoKSA9PiB7CiAgICBfX3BvaW50ZXJBY3RpdmUoZmFsc2UpOwogIH0pOwp9KTsKCmZ1bmN0aW9uIF9fcG9pbnRlckFjdGl2ZShhY3RpdmUpIHsKICBpZiAodHlwZW9mIHBvaW50ZXJBY3RpdmUgIT09IGB1bmRlZmluZWRgKSB7CiAgICBwb2ludGVyQWN0aXZlKGFjdGl2ZSk7CiAgfQp9Ci8qKgogKiBjb2RlIHVzZWQgYnkgcHJvamVjdC5qcywgYnV0IG5hbWVkIHNvIHRoYXQgaXQgbG9hZHMKICogZmlyc3QsIGFuZCBkb2VzIG5vdCBnZXQgYWRkZWQgdG8gdGhlIGQudHMgZmlsZS4KICovCmNsYXNzIENhYmluZXRQcm9qZWN0b3IgewogIEEgPSAwOwogIEIgPSAwOwogIEMgPSAwOwoKICBjb25zdHJ1Y3RvcihveCwgb3ksIHNjYWxlLCBwaGkpIHsKICAgIHRoaXMudXBkYXRlKG94LCBveSwgc2NhbGUsIHBoaSk7CiAgfQoKICBzZXRSb3RhdGlvbih4ID0gMCwgeSA9IDAsIHogPSAwKSB7CiAgICB0aGlzLkEgPSB4OwogICAgdGhpcy5CID0gejsKICAgIHRoaXMuQyA9IHk7CiAgfQoKICByb3RhdGUoeCwgeSwgeikgewogICAgbGV0IHsgQSwgQiwgQyB9ID0gdGhpczsKICAgIGxldCBhID0geDsKICAgIGxldCBiID0geSAqIGNvcyhBKSAtIHogKiBzaW4oQSk7CiAgICBsZXQgYyA9IHkgKiBzaW4oQSkgKyB6ICogY29zKEEpOwogICAgeCA9IGE7CiAgICB5ID0gYjsKICAgIHogPSBjOwogICAgYSA9IHggKiBjb3MoQikgKyB6ICogc2luKEIpOwogICAgYiA9IHk7CiAgICBjID0geCAqIC1zaW4oQikgKyB6ICogY29zKEIpOwogICAgeCA9IGE7CiAgICB5ID0gYjsKICAgIHogPSBjOwogICAgYSA9IHggKiBjb3MoQykgLSB5ICogc2luKEMpOwogICAgYiA9IHggKiBzaW4oQykgKyB5ICogY29zKEMpOwogICAgYyA9IHo7CgogICAgcmV0dXJuIFthLCBiLCBjXTsKICB9CgogIHVwZGF0ZShveCA9IDAsIG95ID0gMCwgc2NhbGUgPSAxLCBwaGkgPSAtUEkgLyA2KSB7CiAgICB0aGlzLm9mZnNldCA9IG5ldyBQb2ludChveCwgb3kpOwogICAgdGhpcy5zY2FsZSA9IHNjYWxlOwogICAgdGhpcy5waGkgPSBwaGk7CiAgfQoKICBwcm9qZWN0KHgsIHksIHopIHsKICAgIGNvbnN0IHsgb2Zmc2V0LCBzY2FsZSwgcGhpIH0gPSB0aGlzOwogICAgeCAqPSBzY2FsZTsKICAgIHkgKj0gc2NhbGU7CiAgICB6ICo9IHNjYWxlOwogICAgW3gsIHksIHpdID0gdGhpcy5yb3RhdGUoeCwgeSwgeik7CiAgICBjb25zdCBhID0geSwKICAgICAgYiA9IC16LAogICAgICBjID0gLXggLyAyOwoKICAgIHJldHVybiBuZXcgUG9pbnQoCiAgICAgIG9mZnNldC54ICsgYSArIGMgKiBjb3MocGhpKSwKICAgICAgb2Zmc2V0LnkgKyBiICsgYyAqIHNpbihwaGkpCiAgICApOwogIH0KfQoKbGV0IF9fcHJvamVjdG9yID0gbmV3IENhYmluZXRQcm9qZWN0b3IoKTsKLyoqCiAqIC4uLmRvY3MgZ28gaGVyZS4uLgogKi8KY2xhc3MgU2VnbWVudCB7CiAgb3ggPSAwOwogIG95ID0gMDsKICBwb2ludHMgPSBbXTsKICBpbnN0cnVjdGlvbnMgPSBbXTsKCiAgY2xvc2VkID0gZmFsc2U7CiAgc3ZnX2QgPSBgYDsKCiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoYGh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnYCwgYHBhdGhgKTsKICB9CgogIGFkZCh4LCB5KSB7CiAgICBjb25zdCB7IGNsb3NlZCwgcG9pbnRzIH0gPSB0aGlzOwogICAgaWYgKGNsb3NlZCkgcmV0dXJuOwogICAgY29uc3QgcCA9IHsgeCwgeSB9OwogICAgcG9pbnRzLnB1c2gocCk7CiAgICByZXR1cm4gcDsKICB9CgogIF9pbnN0cnVjdGlvbih0eXBlTmFtZSwgLi4uYXJncykgewogICAgbGV0IHBvaW50cyA9IGFyZ3M7CgogICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBgbnVtYmVyYCkgewogICAgICBwb2ludHMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgcG9pbnRzLnB1c2goeyB4OiBhcmdzW2ldLCB5OiBhcmdzW2kgKyAxXSB9KTsKICAgICAgfQogICAgfQoKICAgIC8vIHNlZSBkcmF3LnNwbGluZSguLi5hcmdzKQogICAgbGV0IFQgPSAxOwogICAgaWYgKHR5cGVOYW1lID09PSBgc3BsaW5lYCkgewogICAgICBpZiAoYXJncy5sZW5ndGggJSAyID09PSAxKSB7CiAgICAgICAgW1RdID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKTsKICAgICAgICBwb2ludHMucG9wKCk7CiAgICAgIH0KICAgIH0KCiAgICBwb2ludHMuZm9yRWFjaCgocCkgPT4gewogICAgICBwW3R5cGVOYW1lXSA9IHRydWU7CiAgICAgIGlmICh0eXBlTmFtZSA9PT0gYHNwbGluZWApIHAuVCA9IFQ7CiAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLnB1c2gocCk7CiAgICB9KTsKCiAgICB0aGlzLmludmFsaWRhdGUoKTsKCiAgICByZXR1cm4gcG9pbnRzOwogIH0KCiAgbW92ZVRvKHgsIHkpIHsKICAgIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgICB5ID0geC55OwogICAgICB4ID0geC54OwogICAgfQogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBtb3ZlYCwgeCwgeSk7CiAgfQoKICBsaW5lVG8oLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBsaW5lYCwgLi4uYXJncyk7CiAgfQoKICBjdXJ2ZVRvKC4uLmFyZ3MpIHsKICAgIHJldHVybiB0aGlzLl9pbnN0cnVjdGlvbihgYmV6aWVyYCwgLi4uYXJncyk7CiAgfQoKICBxdWFkVG8oLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBxdWFkYCwgLi4uYXJncyk7CiAgfQoKICBzcGxpbmVUbyguLi5hcmdzKSB7CiAgICByZXR1cm4gdGhpcy5faW5zdHJ1Y3Rpb24oYHNwbGluZWAsIC4uLmFyZ3MpOwogIH0KCiAgY2xvc2UoKSB7CiAgICB0aGlzLmNsb3NlZCA9IHRydWU7CiAgICB0aGlzLmludmFsaWRhdGUoKTsKICB9CgogIG9mZnNldCh4LCB5KSB7CiAgICB0aGlzLm94ID0geDsKICAgIHRoaXMub3kgPSB5OwogICAgdGhpcy5pbnZhbGlkYXRlKCk7CiAgfQoKICBjb21taXQoeCwgeSkgewogICAgY29uc3QgeyBveCwgb3ksIGluc3RydWN0aW9ucyB9ID0gdGhpczsKICAgIGluc3RydWN0aW9ucy5mb3JFYWNoKChwKSA9PiB7CiAgICAgIHAueCArPSB4OwogICAgICBwLnkgKz0geTsKICAgIH0pOwogICAgdGhpcy5veCA9IDA7CiAgICB0aGlzLm95ID0gMDsKICAgIHRoaXMuaW52YWxpZGF0ZSgpOwogIH0KCiAgaW5zaWRlKHgsIHkpIHsKICAgIGNvbnN0IHsgcGF0aCB9ID0gdGhpczsKICAgIHBhdGguc2V0QXR0cmlidXRlKGBkYCwgdGhpcy5zdmdfZCk7CiAgICByZXR1cm4gcGF0aC5pc1BvaW50SW5GaWxsKG5ldyBET01Qb2ludCh4LCB5KSk7CiAgfQoKICBpbnZhbGlkYXRlKCkgewogICAgdGhpcy51cGRhdGVTVkcoKTsKICB9CgogIHVwZGF0ZVNWRygpIHsKICAgIGxldCBkID0gYGA7CiAgICBjb25zdCBvcHMgPSB0aGlzLmluc3RydWN0aW9ucy5zbGljZSgpOwogICAgdGhpcy5yZXBsYWNlU3BsaW5lV2l0aEJlemllcnMob3BzKTsKICAgIHdoaWxlIChvcHMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IHAgPSBvcHMuc2hpZnQoKTsKICAgICAgaWYgKHAubW92ZSkgZCA9IGBNICR7cC54fSAke3AueX1gOwogICAgICBpZiAocC5saW5lKSBkID0gYCR7ZH0gTCAke3AueH0gJHtwLnl9YDsKICAgICAgaWYgKHAucXVhZCkgewogICAgICAgIGNvbnN0IG9wID0gb3BzLnNoaWZ0KCk7CiAgICAgICAgZCA9IGAke2R9IFEgJHtwLnh9ICR7cC55fSAke29wLnh9ICR7b3AueX1gOwogICAgICB9CiAgICAgIGlmIChwLmJlemllcikgewogICAgICAgIGNvbnN0IG9wMiA9IG9wcy5zaGlmdCgpOwogICAgICAgIGNvbnN0IG9wMyA9IG9wcy5zaGlmdCgpOwogICAgICAgIGQgPSBgJHtkfSBDICR7cC54fSAke3AueX0gJHtvcDIueH0gJHtvcDIueX0gJHtvcDMueH0gJHtvcDMueX1gOwogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5jbG9zZWQpIGQgKz0gYCBaYDsKICAgIHRoaXMuc3ZnX2QgPSBkOwogICAgdGhpcy5wYXRoLnNldEF0dHJpYnV0ZShgZGAsIGQpOwogIH0KCiAgZ2V0U1ZHKHNob3dQb2ludHMsIGZpbGwsIHN0cm9rZSkgewogICAgbGV0IHN2ZyA9IGA8cGF0aCBmaWxsPSIke2ZpbGx9IiBzdHJva2U9IiR7c3Ryb2tlfSIgZD0iJHt0aGlzLnN2Z19kfSIvPmA7CiAgICBpZiAoc2hvd1BvaW50cykgewogICAgICB0aGlzLmluc3RydWN0aW9ucy5mb3JFYWNoKAogICAgICAgIChwKSA9PgogICAgICAgICAgKHN2ZyA9IGAke3N2Z31cbjxjaXJjbGUgZmlsbD0iJHtmaWxsfSIgc3Ryb2tlPSIke3N0cm9rZX0iIGN4PSIke3AueH0iIGN5PSIke3AueX0iIHI9IjMiLz5gKQogICAgICApOwogICAgfQogICAgcmV0dXJuIHN2ZzsKICB9CgogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAvLyBDb2RlICpqdXN0KiBmb3IgY29udmVydGluZyBjYXJkaW5hbCBzcGxpbmVzIGludG8gcG9seS1CZXppZXJzCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICByZXBsYWNlU3BsaW5lV2l0aEJlemllcnMob3BzKSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAob3BzW2ldLnNwbGluZSkgewogICAgICAgIHRoaXMuY29udmVydFNwbGluZShvcHMsIGkpOwogICAgICB9CiAgICB9CiAgfQoKICBjb252ZXJ0U3BsaW5lKG9wcywgaSkgewogICAgY29uc3Qgc3BsaW5lcyA9IFtdOwogICAgLy8gcmVtb3ZlIHRoZSBzZXF1ZW5jZSBvZiBzcGxpbmUgcG9pbnRzIHN0YXJ0aW5nIGF0IG9wc1tpXQogICAgd2hpbGUgKG9wc1tpXSAmJiBvcHNbaV0uc3BsaW5lKSBzcGxpbmVzLnB1c2gob3BzLnNwbGljZShpLCAxKVswXSk7CiAgICAvLyBpbmplY3QgdGhlIGVxdWl2YWxlbnQgYmV6aWVyIHNlcXVlbmNlCiAgICBvcHMuc3BsaWNlKGksIDAsIC4uLnRoaXMuc3BsaW5lUG9pbnRzVG9CZXppZXJQb2ludHMoc3BsaW5lcywgb3BzLCBpKSk7CiAgfQoKICBzcGxpbmVQb2ludHNUb0JlemllclBvaW50cyhzcGxpbmVzLCBvcHMsIGkpIHsKICAgIGxldCBiZXppZXJzID0gW107CiAgICBsZXQgcTEgPSBvcHMuYXQoaSAtIDIpOwogICAgbGV0IHEyID0gb3BzLmF0KGkgLSAxKTsKICAgIGxldCBxMywgcTQ7CiAgICBsZXQgcCA9IHNwbGluZXNbMF07CgogICAgLy8gVGhlIGZpcnN0ICBzZWdtZW50IG5lZWRzIHNwZWNpYWwgaGFuZGxpbmcgdG8KICAgIC8vIGVuc3VyZSB0aGUgZGVwYXJ0dXJlIHRhbmdlbnQgaXMgY29ycmVjdC4KICAgIHEzID0gc3BsaW5lc1sxXSA/PyBvcHNbMF07CiAgICBiZXppZXJzLnB1c2goLi4udGhpcy5maXJzdFNwbGluZVRvQmV6aWVyKHExLCBxMiwgcCwgcTMsIG9wcywgaSkpOwoKICAgIC8vIEludGVybWVkaWF0ZSBzZWdtZW50cyBhcmUgIm5vcm1hbCBjb252ZXJzaW9uIG1hdGgiLgogICAgZm9yIChsZXQgaiA9IDE7IGogPCBzcGxpbmVzLmxlbmd0aDsgaisrKSB7CiAgICAgIHExID0gcTI7CiAgICAgIHEyID0gcDsKICAgICAgcCA9IHNwbGluZXNbal07CiAgICAgIHEzID0gc3BsaW5lc1tqICsgMV0gPz8gb3BzW2ldID8/IG9wc1swXTsKICAgICAgYmV6aWVycy5wdXNoKC4uLnRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHExLCBxMiwgcCwgcTMsIG9wcywgaSkpOwogICAgfQoKICAgIC8vIFRoZSBsYXN0IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCBoYW5kbGluZyB0bwogICAgLy8gZW5zdXJlIHRoZSBhcnJpdmFsIHRhbmdlbnQgaXMgY29ycmVjdC4KICAgIHEzID0gb3BzW2ldID8/IG9wc1swXTsKICAgIHE0ID0gb3BzW2kgKyAxXSA/PyBvcHNbMV07CiAgICBiZXppZXJzLnB1c2goLi4udGhpcy5sYXN0U3BsaW5lVG9CZXppZXIocTIsIHAsIHEzLCBxNCwgb3BzLCBpKSk7CgogICAgcmV0dXJuIGJlemllcnM7CiAgfQoKICAvLyBwMyBpcyBvdXIgcHJpbmNpcGFsIHBvaW50CiAgZmlyc3RTcGxpbmVUb0JlemllcihwMSwgcDIsIHAzLCBwNCwgb3BzLCBpKSB7CiAgICAvLyBSZXBvc2l0aW9uIHAxIHNvIHRoYXQgdGhlIHRhbmdlbnQgYXQKICAgIC8vIHAyIHdpbGwgbWF0Y2ggdGhlIGFjdHVhbCB0YW5nZW50IGF0IHAyLgogICAgcDEgPSB0aGlzLnVwZGF0ZUZyb21UYW5nZW50KHAxLCBwMiwgcDMpOwogICAgcmV0dXJuIHRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHAxLCBwMiwgcDMsIHA0LCBvcHMsIGkpOwogIH0KCiAgLy8gcDIgaXMgb3VyIHByaW5jaXBhbCBwb2ludAogIGxhc3RTcGxpbmVUb0JlemllcihwMSwgcDIsIHAzLCBwNCwgb3BzLCBpKSB7CiAgICAvLyBSZXBvc2l0aW9uIHA0IHNvIHRoYXQgdGhlIHRhbmdlbnQgYXQKICAgIC8vIHAzIHdpbGwgbWF0Y2ggdGhlIGFjdHVhbCB0YW5nZW50IGF0IHAzLgogICAgcDQgPSB0aGlzLnVwZGF0ZUZyb21UYW5nZW50KHA0LCBwMywgcDIpOwogICAgcmV0dXJuIHRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHAxLCBwMiwgcDMsIHA0LCBvcHMsIGkpOwogIH0KCiAgLy8gY3JlYXRlIHRoZSBCZXppZXIgZXF1aXZhbGVudCBvZiBwMi0tcDMKICBmdWxsU3BsaW5lVG9CZXppZXIocDEsIHAyLCBwMywgcDQsIG9wcywgaSkgewogICAgY29uc3QgVCA9IHAzLlQgPz8gcDIuVCA/PyAxOwogICAgY29uc3QgdGVuc2lvbiA9IDYgKiBUOwogICAgcmV0dXJuIFsKICAgICAgewogICAgICAgIGJlemllcjogdHJ1ZSwKICAgICAgICB4OiBwMi54ICsgKHAzLnggLSBwMS54KSAvIHRlbnNpb24sCiAgICAgICAgeTogcDIueSArIChwMy55IC0gcDEueSkgLyB0ZW5zaW9uLAogICAgICB9LAogICAgICB7CiAgICAgICAgYmV6aWVyOiB0cnVlLAogICAgICAgIHg6IHAzLnggLSAocDQueCAtIHAyLngpIC8gdGVuc2lvbiwKICAgICAgICB5OiBwMy55IC0gKHA0LnkgLSBwMi55KSAvIHRlbnNpb24sCiAgICAgIH0sCiAgICAgIHsgYmV6aWVyOiB0cnVlLCB4OiBwMy54LCB5OiBwMy55IH0sCiAgICBdOwogIH0KCiAgdXBkYXRlRnJvbVRhbmdlbnQocTEsIHEyLCBwMykgewogICAgLy8gTm8gbWF0dGVyIHdoZXRoZXIgcTEgYW5kIHEyIGFyZSBsaW5lIG9yCiAgICAvLyBiZXppZXIgY29vcmRpbmF0ZXMsIHRoZSBsb2dpYyBpcyB0aGUgc2FtZS4KICAgIHJldHVybiB7CiAgICAgIHRhbmdlbnRDb3JyZWN0aW9uOiB0cnVlLAogICAgICB4OiBwMy54ICsgKHExLnggLSBxMi54KSwKICAgICAgeTogcDMueSArIChxMS55IC0gcTIueSksCiAgICB9OwogIH0KfQoKLyoqCiAqIC4uLmRvY3MgZ28gaGVyZS4uLgogKi8KY2xhc3MgU2hhcGUgewogIHNlZ21lbnRzID0gW107CiAgcmVzaXphYmxlID0gZmFsc2U7CiAgb3ggPSAwOwogIG95ID0gMDsKCiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLm5ld1NlZ21lbnQoKTsKICB9CgogIG1ha2VNb3ZhYmxlKG1vdmFibGUgPSB0cnVlKSB7CiAgICBpZiAobW92YWJsZSkgewogICAgICBzZXRNb3ZhYmxlKHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgdW5zZXRNb3ZhYmxlKHRoaXMpOwogICAgfQogIH0KCiAgYWxsb3dSZXNpemluZyhhbGxvd2VkID0gdHJ1ZSkgewogICAgdGhpcy5yZXNpemFibGUgPSBhbGxvd2VkOwogIH0KCiAgY2xvc2UoKSB7CiAgICB0aGlzLm5ld1NlZ21lbnQodHJ1ZSk7CiAgfQoKICBuZXdTZWdtZW50KGNsb3NlQ3VycmVudCA9IGZhbHNlKSB7CiAgICBjb25zdCB7IHNlZ21lbnRzIH0gPSB0aGlzOwogICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gc2VnbWVudHMucHVzaChuZXcgU2VnbWVudCgpKTsKICAgIH0KICAgIGNvbnN0IGN1cnJlbnQgPSBzZWdtZW50cy5hdCgtMSk7CiAgICBpZiAoY3VycmVudD8ucG9pbnRzLmxlbmd0aCB8fCBjdXJyZW50Py5pbnN0cnVjdGlvbnMubGVuZ3RoKSB7CiAgICAgIGlmIChjbG9zZUN1cnJlbnQpIGN1cnJlbnQuY2xvc2UoKTsKICAgICAgc2VnbWVudHMucHVzaChuZXcgU2VnbWVudCgpKTsKICAgIH0KICB9CgogIGFkZCh4LCB5KSB7CiAgICBjb25zdCBzZWdtZW50ID0gdGhpcy5zZWdtZW50cy5hdCgtMSk7CiAgICBsZXQgcHRzOwogICAgaWYgKHNlZ21lbnQuaW5zdHJ1Y3Rpb25zLmxlbmd0aCkgewogICAgICBwdHMgPSBzZWdtZW50LmxpbmVUbyh4LCB5KTsKICAgIH0gZWxzZSB7CiAgICAgIHB0cyA9IHNlZ21lbnQubW92ZVRvKHgsIHkpOwogICAgfQogICAgdGhpcy5yZWNvcmRQb2ludHMocHRzKTsKICB9CgogIHJlY29yZFBvaW50cyhwdHMpIHsKICAgIGNvbnN0IHNlZ21lbnQgPSB0aGlzLnNlZ21lbnRzLmF0KC0xKTsKICAgIGlmICh0aGlzLnJlc2l6YWJsZSkgewogICAgICBwdHMuZm9yRWFjaCgocCkgPT4gewogICAgICAgIHAuX19vbl9tb3ZlID0gKCkgPT4gewogICAgICAgICAgc2VnbWVudC5pbnZhbGlkYXRlKCk7CiAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTsKICAgICAgICB9OwogICAgICAgIHNldE1vdmFibGUocCk7CiAgICAgIH0pOwogICAgfQogICAgdGhpcy5idWlsZEltYWdlKCk7CiAgfQoKICBtb3ZlVG8oeCwgeSkgewogICAgdGhpcy5uZXdTZWdtZW50KCk7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKS5tb3ZlVG8oeCwgeSkpOwogIH0KCiAgbGluZVRvKC4uLmFyZ3MpIHsKICAgIHRoaXMucmVjb3JkUG9pbnRzKHRoaXMuc2VnbWVudHMuYXQoLTEpPy5saW5lVG8oLi4uYXJncykpOwogIH0KCiAgY3VydmVUbyguLi5hcmdzKSB7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKT8uY3VydmVUbyguLi5hcmdzKSk7CiAgfQoKICBxdWFkVG8oLi4uYXJncykgewogICAgdGhpcy5yZWNvcmRQb2ludHModGhpcy5zZWdtZW50cy5hdCgtMSk/LnF1YWRUbyguLi5hcmdzKSk7CiAgfQoKICBzcGxpbmVUbyguLi5hcmdzKSB7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKT8uc3BsaW5lVG8oLi4uYXJncykpOwogIH0KCiAgb2Zmc2V0KHgsIHkpIHsKICAgIHRoaXMub3ggPSB4OwogICAgdGhpcy5veSA9IHk7CiAgfQoKICBvZmZzZXRTZWdtZW50KHNlZ21lbnRJZCwgeCwgeSkgewogICAgY29uc3Qgc2VnbWVudCA9IHRoaXMuc2VnbWVudHNbc2VnbWVudElkXTsKICAgIHNlZ21lbnQub2Zmc2V0KHgsIHkpOwogIH0KCiAgY29tbWl0KCkgewogICAgY29uc3QgeyBzZWdtZW50cywgb3gsIG95IH0gPSB0aGlzOwogICAgc2VnbWVudHMuZm9yRWFjaCgocCkgPT4gcC5jb21taXQob3gsIG95KSk7CiAgICB0aGlzLm94ID0gdGhpcy5veSA9IDA7CiAgICAvLyByZWJ1aWxkIHNvIGl0J3MgcmVhZHkgYnkgdGhlIG5leHQgcmVkcmF3CiAgICB0aGlzLmJ1aWxkSW1hZ2UoKTsKICB9CgogIHJlc2V0KCkgewogICAgdGhpcy5veCA9IDA7CiAgICB0aGlzLm95ID0gMDsKICAgIC8vIHJlYnVpbGQgc28gaXQncyByZWFkeSBieSB0aGUgbmV4dCByZWRyYXcKICAgIHRoaXMuYnVpbGRJbWFnZSgpOwogIH0KCiAgbm9GaWxsKCkgewogICAgdGhpcy5zZXRGaWxsKGBub25lYCk7CiAgfQoKICBzZXRGaWxsKGZpbGwpIHsKICAgIGlmICh0aGlzLmZpbGxTdHlsZSAhPT0gZmlsbCkgewogICAgICB0aGlzLmZpbGxTdHlsZSA9IGZpbGw7CiAgICAgIHRoaXMuYnVpbGRJbWFnZSgpOwogICAgfQogIH0KCiAgbm9TdHJva2UoKSB7CiAgICB0aGlzLnNldFN0cm9rZShgbm9uZWApOwogIH0KCiAgc2V0U3Ryb2tlKHN0cm9rZSkgewogICAgaWYgKHRoaXMuc3Ryb2tlU3R5bGUgIT09IHN0cm9rZSkgewogICAgICB0aGlzLnN0cm9rZVN0eWxlID0gc3Ryb2tlOwogICAgICB0aGlzLmJ1aWxkSW1hZ2UoKTsKICAgIH0KICB9CgogIGludmFsaWRhdGUoKSB7CiAgICB0aGlzLl9jYWNoZWRfaW1hZ2UgPSBmYWxzZTsKICB9CgogIGJ1aWxkSW1hZ2UoKSB7CiAgICBjb25zdCB7IHNob3dQb2ludHMsIGZpbGxTdHlsZSwgc3Ryb2tlU3R5bGUgfSA9IHRoaXM7CiAgICBjb25zdCBzdmcgPSBgPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iJHt3aWR0aH1weCIgaGVpZ2h0PSIke2hlaWdodH1weCIgdmlld0JveD0iLSR7d2lkdGh9IC0ke2hlaWdodH0gJHszICogd2lkdGh9ICR7MyAqIGhlaWdodH0iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmVyc2lvbj0iMS4wIj4KICAke3RoaXMuc2VnbWVudHMubWFwKChzKSA9PiBzLmdldFNWRyhzaG93UG9pbnRzLCBmaWxsU3R5bGUsIHN0cm9rZVN0eWxlKSl9Cjwvc3ZnPmA7CiAgICBjb25zdCBpbWcgPSAodGhpcy5fY2FjaGVkX2ltYWdlID0gbmV3IEltYWdlKCkpOwogICAgaW1nLmxvYWRlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHRydWUpOwogICAgfSk7CiAgICBpbWcuc3JjID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKHN2Zyl9YDsKICB9CgogIHNob3dQb2ludHMoc2hvd1BvaW50cyA9IHRydWUpIHsKICAgIGlmICh0aGlzLnNob3dQb2ludHMgIT09IHNob3dQb2ludHMpIHsKICAgICAgdGhpcy5zaG93UG9pbnRzID0gc2hvd1BvaW50czsKICAgICAgdGhpcy5idWlsZEltYWdlKCk7CiAgICB9CiAgfQoKICBhc3luYyBkcmF3KCkgewogICAgaWYgKCF0aGlzLl9jYWNoZWRfaW1hZ2UpIHRoaXMuYnVpbGRJbWFnZSgpOwogICAgY29uc3QgeyBveCwgb3ksIF9jYWNoZWRfaW1hZ2UgfSA9IHRoaXM7CiAgICBhd2FpdCBfY2FjaGVkX2ltYWdlLmxvYWRlZDsKICAgIGltYWdlKF9jYWNoZWRfaW1hZ2UsIG94IC0gd2lkdGgsIG95IC0gaGVpZ2h0LCAzICogd2lkdGgsIDMgKiBoZWlnaHQpOwogIH0KCiAgaW5zaWRlKHgsIHkpIHsKICAgIGNvbnN0IHsgc2VnbWVudHMsIG94LCBveSB9ID0gdGhpczsKICAgIHJldHVybiBzZWdtZW50cwogICAgICAubWFwKChzLCBpZCkgPT4gewogICAgICAgIHMuaWQgPSBpZDsKICAgICAgICByZXR1cm4gczsKICAgICAgfSkKICAgICAgLmZpbHRlcigocykgPT4gcy5pbnNpZGUoeCAtIG94LCB5IC0gb3kpKTsKICB9Cn0KY2xhc3MgVmVjdG9yIHsKICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICB6ID0geC56OwogICAgICB5ID0geC55OwogICAgICB4ID0geC54OwogICAgfQogICAgdGhpcy54ID0geDsKICAgIHRoaXMueSA9IHk7CiAgICBpZiAoeiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHRoaXMueiA9IHo7CiAgICB9CiAgfQoKICBkaXN0KG90aGVyLCB5LCB6ID0gMCkgewogICAgaWYgKHkgIT09IHVuZGVmaW5lZCkgb3RoZXIgPSB7IHg6IG90aGVyLCB5LCB6IH07CiAgICBsZXQgc3VtID0gMDsKICAgIHN1bSArPSAodGhpcy54IC0gb3RoZXIueCkgKiogMjsKICAgIHN1bSArPSAodGhpcy55IC0gb3RoZXIueSkgKiogMjsKICAgIGxldCB6MSA9IHRoaXMueiA/IHRoaXMueiA6IDA7CiAgICBsZXQgejIgPSBvdGhlci56ID8gb3RoZXIueiA6IDA7CiAgICBzdW0gKz0gKHoxIC0gejIpICoqIDI7CiAgICByZXR1cm4gc3VtICoqIDAuNTsKICB9CgogIG5vcm1hbGl6ZShmKSB7CiAgICBsZXQgbWFnID0gdGhpcy5kaXN0KDAsIDAsIDApOwogICAgcmV0dXJuIG5ldyBWZWN0b3IoCiAgICAgIChmICogdGhpcy54KSAvIG1hZywKICAgICAgKGYgKiB0aGlzLnkpIC8gbWFnLAogICAgICAoZiAqIHRoaXMueikgLyBtYWcKICAgICk7CiAgfQoKICBnZXRBbmdsZSgpIHsKICAgIHJldHVybiAtTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7CiAgfQoKICByZWZsZWN0KG90aGVyKSB7CiAgICBsZXQgcCA9IG5ldyBWZWN0b3Iob3RoZXIueCAtIHRoaXMueCwgb3RoZXIueSAtIHRoaXMueSk7CiAgICBpZiAob3RoZXIueiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHAueiA9IG90aGVyLno7CiAgICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICAgIHAueiAtPSB0aGlzLno7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLnN1YnRyYWN0KHApOwogIH0KCiAgYWRkKG90aGVyKSB7CiAgICBsZXQgcCA9IG5ldyBWZWN0b3IodGhpcy54ICsgb3RoZXIueCwgdGhpcy55ICsgb3RoZXIueSk7CiAgICBpZiAodGhpcy56ICE9PSB1bmRlZmluZWQpIHsKICAgICAgcC56ID0gdGhpcy56OwogICAgICBpZiAob3RoZXIueiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcC56ICs9IG90aGVyLno7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwOwogIH0KCiAgc3VidHJhY3Qob3RoZXIpIHsKICAgIGxldCBwID0gbmV3IFZlY3Rvcih0aGlzLnggLSBvdGhlci54LCB0aGlzLnkgLSBvdGhlci55KTsKICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICBwLnogPSB0aGlzLno7CiAgICAgIGlmIChvdGhlci56ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwLnogLT0gb3RoZXIuejsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHA7CiAgfQoKICBzY2FsZShmID0gMSkgewogICAgaWYgKGYgPT09IDApIHsKICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoMCwgMCwgdGhpcy56ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAwKTsKICAgIH0KICAgIGxldCBwID0gbmV3IFZlY3Rvcih0aGlzLnggKiBmLCB0aGlzLnkgKiBmKTsKICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICBwLnogPSB0aGlzLnogKiBmOwogICAgfQogICAgcmV0dXJuIHA7CiAgfQp9Cg=="),R=class extends h{static{l(this,"GraphicsElement")}set onload(e){this._onload=e}set onerror(e){this._onerror=e}handleAttributeChange(...e){}handleChildChanges(...e){}connectedCallback(){super.connectedCallback(),this.label=document.createElement("label"),this.title||(console.warn("<graphics-element> is missing a title attribute. Always caption your figures."),this.title=""),this.label.textContent=this.title,M(this)?this.loadSource():new IntersectionObserver((e,x)=>e.forEach(t=>{t.isIntersecting&&(this.loadSource(),x.disconnect())}),{threshold:.1,rootMargin:`${window.innerHeight}px`}).observe(this)}getStyle(){return`
:host([hidden]) { display: none; }
style { display: none; }
.top-title { display: flex; flex-direction: row; justify-content: space-between; }
canvas { touch-action: none; user-select: none; position: relative; z-index: 1; display: block; margin: auto; border-radius: 0; box-sizing: content-box !important; border: 1px solid lightgrey;
&.crisp { image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }
&:focus { border: 1px solid red; }}
a { &.view-source { font-size: 60%; text-decoration: none;
&.plus { padding-left: 0.5em; }}}
button.reset { font-size: 0.5em; top: -0.35em; position: relative; }
label:not(:empty) { display: block; font-style: italic; font-size: 0.9em; text-align: right; padding-right: 1em; margin-top: 0.35em; }
`}async loadSource(e,x=this.width,t=this.height,$){if(!x&&!t&&(x=parseFloat(this.getAttribute("width")),t=parseFloat(this.getAttribute("height")),isNaN(x)&&(x=void 0),isNaN(t)&&(t=void 0)),e){if(typeof e=="function")return console.warn(".loadSource() called with a function rather than string data: use .loadFromFunction() instead."),this.loadFromFunction(e)}else if(this.userCode)e=this.userCode;else{let a=this.getAttribute("src");if(a)e=await(await fetch(a)).text();else{let o=this.querySelector("graphics-source");o?e=o.textContent:e=`function setup() {
}
function draw() {
}
`}}if(this.userCode=e,!$)if(this.additionalSources)$=this.additionalSources;else{let a=this.querySelectorAll("source");$=await Promise.all(Array.from(a).map(o=>fetch(o.src).then(g=>g.text())))}this.additionalSources=$;let r=this.userCode;this.additionalSources.length>0&&(r=this.loadAdditionalSources(this.userCode,this.additionalSources));let E=r.matchAll(/addSlider\(['"`](.*)['"`]/g),i=[];for(let a of E)i.push(a[1]),r=r.replace(a[0],a[0]+`, (v) => (${a[1]} = v)`);if(i.length&&(r="let "+i.join(", ")+`;
`+r),r=r.replaceAll(/ from ['"].([^'"]+)['"]/g,` from "${C(location.href)}/$1"`),r.includes("function setup()")||(r=`function setup() {
}
`+r),!r.includes("setSize(")){let a="setSize();";x&&t&&(a=`setSize(${x}, ${t});`),r=r.replace("function setup() {",`function setup() {
  ${a}`)}let s=Object.entries(this.dataset);s.length&&s.forEach(([a,o])=>{parseFloat(o)!=o&&o!=="true"&&o!=="false"&&(o=`"${o}"`),r=r.replace("function setup() {",`function setup() {
  ${a} = ${o};`)}),import(`data:text/javascript;base64,${I(['"use strict";',`import { BSpline, CSS_COLOR_MAP } from "${k}";`,`const __randomId = "${Date.now()}";`,B,r,`export {
  __reset as start,
  __canvas as canvas,
  __halt as halt,
  highlight,
  __getDescription as getDescription
}`].join(`
`))}`).then(async a=>{let{start:o,canvas:g,halt:d,highlight:A,getDescription:p}=a;this.canvas=g,this.halt=()=>d(),this.highlight=H=>A(H),this.render();let{width:b,height:u}=await o(this),m="graphics-element-description";this.querySelector(`.${m}`)?.remove(),this.querySelector("p")||this.handleGraphicsDescription(m,p),b&&u&&(this.style.width="",this.style.height="",this.width=b,this.height=u,this.setAttribute("width",b),this.setAttribute("height",u));let D=new CustomEvent("load");this.dispatchEvent(D),this._onload&&this._onload(D)}).catch(a=>{let o=new CustomEvent("error",{detail:a});if(this.dispatchEvent(o),this._onerror)this._onerror(a);else throw a})}handleGraphicsDescription(e,x=()=>{}){try{let t=x();if(t){let $=new DocumentFragment,r=document.createElement("div");r.classList.add(e),$.append(r),r.innerHTML=t,this.append(r),this.crossLink(!0)}}catch(t){console.error(t)}}loadAdditionalSources(e,x){if(!x)return e;let t=new Array(x.length);return e+`
`+x.map(($,r)=>$.replace("function setup()",`function setup${r+1}()`).replace("function draw()",`function draw${r+1}()`)).join(`
`)+`
function __more_setup() { ${[...t].map(($,r)=>`if (typeof setup${r+1} !== \`undefined\`) setup${r+1}();`).join(`
`)} }
function __more_draw() { ${[...t].map(($,r)=>`if (typeof draw${r+1} !== \`undefined\`) draw${r+1}();`).join(`
`)} }
`}loadFromFunction(e){let x=e.toString();this.reset(x.substring(x.indexOf("{")+1,x.lastIndexOf("}")))}reset(e,x=[]){this.halt&&this.halt(),this.querySelector("button.remove-color")?.remove(),this.loadSource(e||this.userCode,this.width,this.height,x||this.additionalSources)}render(){super.render();let e=this._slot.parentNode;this.canvas&&e.insertBefore(this.canvas,this._slot),this.label&&e.insertBefore(this.label,this._slot);let x=document.createElement("div");x.classList.add("top-title");let t=document.createElement("span");t.classList.add("sources"),x.append(t);let $=document.createElement("button");$.classList.add("reset"),$.textContent=this.getAttribute("reset")||"reset",$.addEventListener("click",()=>this.reset()),x.append($);let r=this.getAttribute("src");if(r||(r=`data:text/plain;base64,${I(this.userCode)}`),r){let i=document.createElement("a");i.classList.add("view-source"),i.textContent=this.getAttribute("viewSource")||"view source",i.href=r,i.target="_blank",t.append(i),r.startsWith("data")&&(delete i.href,delete i.target,i.classList.add("fake-source-link"),i.addEventListener("click",()=>{let s=`<iframe width="100%" height="100%" src="${r}"></iframe>`,f=window.open(""),{document:a}=f;a.open(),a.write(s),a.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),a.close()}))}let E=this.querySelectorAll("source");E.length===0&&(E=(this.additionalSources??[]).map(i=>({src:`data:text/plain;base64,${I(i)}`}))),E.length&&E.forEach((i,s)=>{let{src:f}=i,a=document.createElement("a");a.classList.add("view-source","plus"),a.textContent=`[+${s+1}]`,a.href=f,a.target="_blank",t.append(a),f.startsWith("data")&&(delete a.href,delete a.target,a.classList.add("fake-source-link"),a.addEventListener("click",()=>{let o=`<iframe width="100%" height="100%" src="${f}"></iframe>`,g=window.open(""),{document:d}=g;d.open(),d.write(o),d.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),d.close()}))}),this.label&&e.insertBefore(x,this.canvas),this.crossLink()}crossLink(e){if(e&&(this.crossLinked=!1),this.crossLinked)return;this.crossLinked=!0;let x=!1;if(this.querySelectorAll("p").forEach(t=>{t.querySelectorAll("*").forEach($=>{if(!O.includes($.tagName))return;x=!0;let r;$.classList.remove("calm"),$.addEventListener("pointerenter",()=>{r??=getComputedStyle($)["-webkit-text-stroke-color"],this.highlight?.(r)}),$.addEventListener("pointerleave",()=>this.highlight?.(!1))})}),x){let t=document.createElement("button");t.textContent="remove colors",t.classList.add("remove-color"),t.addEventListener("click",()=>{this.querySelectorAll("p").forEach($=>{$.querySelectorAll("*").forEach(r=>{O.includes(r.tagName)&&r.classList.add("calm")})}),t.remove()}),this.append(t)}}},N=class extends h{static{l(this,"GraphicsSource")}constructor(){super(),this.style.display="none"}handleAttributeChange(){}handleChildChanges(){}};h.register(R),h.register(N),globalThis.GraphicsElement=R,await customElements.whenDefined("graphics-element"),await customElements.whenDefined("graphics-source");export{L as BSpline,w as CSS_COLOR_MAP,R as GraphicsElement,N as GraphicsSource};
