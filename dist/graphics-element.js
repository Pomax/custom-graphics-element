var v=Object.defineProperty;var l=(n,e)=>v(n,"name",{value:e,configurable:!0});var T="registered as custom element";function y(n,e){console.warn(`missing implementation for ${e}(...data) in ${n.__proto__.constructor.name}`)}l(y,"NotImplemented");function G(n){return n.prototype.constructor.name.replace(/([A-Z])([a-z])/g,(e,x,t,$)=>{let r=`${x.toLowerCase()}${t}`;return $>0?`-${r}`:r})}l(G,"getElementTagName");var h=class extends HTMLElement{static{l(this,"CustomElement")}static register(e){if(!e[T]){let x=e.tagName||G(e);return customElements.define(x,e),e[T]=!0,customElements.whenDefined(x)}return Promise.resolve()}static get tagName(){return G(this)}constructor(e={}){super(),customElements.resolveScope||(customElements.resolveScope=function($){try{return $.getRootNode().host}catch(r){console.warn(r)}return window}),this._options=e;let x={childList:$=>{this.handleChildChanges(Array.from($.addedNodes),Array.from($.removedNodes)),this.render()},attributes:$=>{this.handleAttributeChange($.attributeName,$.oldValue,this.getAttribute($.attributeName)),this.render()}};this._observer=new MutationObserver($=>{this.isConnected&&$.forEach(r=>{x[r.type](r)})}),this._observer.observe(this,{childList:!0,attributes:!0});let t={mode:"open"};this._shadow=this.attachShadow(t),this._style=document.createElement("style"),this._style.textContent=this.getStyle(),this._options.header!==!1&&(this._header=document.createElement("header")),this._options.slot!==!1&&this._options.void!==!0&&(this._slot=document.createElement("slot")),this._options.footer!==!1&&(this._footer=document.createElement("footer"))}connectedCallback(){this.render()}handleChildChanges(e,x){this._options.void||y(this,"handleChildChanges")}handleAttributeChange(e,x,t){y(this,"handleAttributeChange")}getStyle(){return""}render(){this._shadow.innerHTML="",this._shadow.append(this._style),this._options.header!==!1&&this._shadow.append(this._header),this._options.slot!==!1&&this._shadow.append(this._slot),this._options.footer!==!1&&this._shadow.append(this._footer)}};var O=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TRANSPARENT","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN"],w={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb(0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb(95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb(0, 255, 255)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb(0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(128, 128, 128)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb(75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb(0, 255, 0)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",rebeccapurple:"rgb(102, 51, 153)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb(65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb(0, 255, 127)",steelblue:"rgb(70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb(0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",transparent:"rgba(0,0,0,0)",turquoise:"rgb(64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)",ALICEBLUE:"rgb(240, 248, 255)",ANTIQUEWHITE:"rgb(250, 235, 215)",AQUA:"rgb(0, 255, 255)",AQUAMARINE:"rgb(127, 255, 212)",AZURE:"rgb(240, 255, 255)",BEIGE:"rgb(245, 245, 220)",BISQUE:"rgb(255, 228, 196)",BLACK:"rgb(0, 0, 0)",BLANCHEDALMOND:"rgb(255, 235, 205)",BLUE:"rgb(0, 0, 255)",BLUEVIOLET:"rgb(138, 43, 226)",BROWN:"rgb(165, 42, 42)",BURLYWOOD:"rgb(222, 184, 135)",CADETBLUE:"rgb(95, 158, 160)",CHARTREUSE:"rgb(127, 255, 0)",CHOCOLATE:"rgb(210, 105, 30)",CORAL:"rgb(255, 127, 80)",CORNFLOWERBLUE:"rgb(100, 149, 237)",CORNSILK:"rgb(255, 248, 220)",CRIMSON:"rgb(220, 20, 60)",CYAN:"rgb(0, 255, 255)",DARKBLUE:"rgb(0, 0, 139)",DARKCYAN:"rgb(0, 139, 139)",DARKGOLDENROD:"rgb(184, 134, 11)",DARKGRAY:"rgb(169, 169, 169)",DARKGREEN:"rgb(0, 100, 0)",DARKGREY:"rgb(169, 169, 169)",DARKKHAKI:"rgb(189, 183, 107)",DARKMAGENTA:"rgb(139, 0, 139)",DARKOLIVEGREEN:"rgb(85, 107, 47)",DARKORANGE:"rgb(255, 140, 0)",DARKORCHID:"rgb(153, 50, 204)",DARKRED:"rgb(139, 0, 0)",DARKSALMON:"rgb(233, 150, 122)",DARKSEAGREEN:"rgb(143, 188, 143)",DARKSLATEBLUE:"rgb(72, 61, 139)",DARKSLATEGRAY:"rgb(47, 79, 79)",DARKSLATEGREY:"rgb(47, 79, 79)",DARKTURQUOISE:"rgb(0, 206, 209)",DARKVIOLET:"rgb(148, 0, 211)",DEEPPINK:"rgb(255, 20, 147)",DEEPSKYBLUE:"rgb(0, 191, 255)",DIMGRAY:"rgb(105, 105, 105)",DIMGREY:"rgb(105, 105, 105)",DODGERBLUE:"rgb(30, 144, 255)",FIREBRICK:"rgb(178, 34, 34)",FLORALWHITE:"rgb(255, 250, 240)",FORESTGREEN:"rgb(34, 139, 34)",FUCHSIA:"rgb(255, 0, 255)",GAINSBORO:"rgb(220, 220, 220)",GHOSTWHITE:"rgb(248, 248, 255)",GOLD:"rgb(255, 215, 0)",GOLDENROD:"rgb(218, 165, 32)",GRAY:"rgb(128, 128, 128)",GREEN:"rgb(0, 128, 0)",GREENYELLOW:"rgb(173, 255, 47)",GREY:"rgb(128, 128, 128)",HONEYDEW:"rgb(240, 255, 240)",HOTPINK:"rgb(255, 105, 180)",INDIANRED:"rgb(205, 92, 92)",INDIGO:"rgb(75, 0, 130)",IVORY:"rgb(255, 255, 240)",KHAKI:"rgb(240, 230, 140)",LAVENDER:"rgb(230, 230, 250)",LAVENDERBLUSH:"rgb(255, 240, 245)",LAWNGREEN:"rgb(124, 252, 0)",LEMONCHIFFON:"rgb(255, 250, 205)",LIGHTBLUE:"rgb(173, 216, 230)",LIGHTCORAL:"rgb(240, 128, 128)",LIGHTCYAN:"rgb(224, 255, 255)",LIGHTGOLDENRODYELLOW:"rgb(250, 250, 210)",LIGHTGRAY:"rgb(211, 211, 211)",LIGHTGREEN:"rgb(144, 238, 144)",LIGHTGREY:"rgb(211, 211, 211)",LIGHTPINK:"rgb(255, 182, 193)",LIGHTSALMON:"rgb(255, 160, 122)",LIGHTSEAGREEN:"rgb(32, 178, 170)",LIGHTSKYBLUE:"rgb(135, 206, 250)",LIGHTSLATEGRAY:"rgb(119, 136, 153)",LIGHTSLATEGREY:"rgb(119, 136, 153)",LIGHTSTEELBLUE:"rgb(176, 196, 222)",LIGHTYELLOW:"rgb(255, 255, 224)",LIME:"rgb(0, 255, 0)",LIMEGREEN:"rgb(50, 205, 50)",LINEN:"rgb(250, 240, 230)",MAGENTA:"rgb(255, 0, 255)",MAROON:"rgb(128, 0, 0)",MEDIUMAQUAMARINE:"rgb(102, 205, 170)",MEDIUMBLUE:"rgb(0, 0, 205)",MEDIUMORCHID:"rgb(186, 85, 211)",MEDIUMPURPLE:"rgb(147, 112, 219)",MEDIUMSEAGREEN:"rgb(60, 179, 113)",MEDIUMSLATEBLUE:"rgb(123, 104, 238)",MEDIUMSPRINGGREEN:"rgb(0, 250, 154)",MEDIUMTURQUOISE:"rgb(72, 209, 204)",MEDIUMVIOLETRED:"rgb(199, 21, 133)",MIDNIGHTBLUE:"rgb(25, 25, 112)",MINTCREAM:"rgb(245, 255, 250)",MISTYROSE:"rgb(255, 228, 225)",MOCCASIN:"rgb(255, 228, 181)",NAVAJOWHITE:"rgb(255, 222, 173)",NAVY:"rgb(0, 0, 128)",OLDLACE:"rgb(253, 245, 230)",OLIVE:"rgb(128, 128, 0)",OLIVEDRAB:"rgb(107, 142, 35)",ORANGE:"rgb(255, 165, 0)",ORANGERED:"rgb(255, 69, 0)",ORCHID:"rgb(218, 112, 214)",PALEGOLDENROD:"rgb(238, 232, 170)",PALEGREEN:"rgb(152, 251, 152)",PALETURQUOISE:"rgb(175, 238, 238)",PALEVIOLETRED:"rgb(219, 112, 147)",PAPAYAWHIP:"rgb(255, 239, 213)",PEACHPUFF:"rgb(255, 218, 185)",PERU:"rgb(205, 133, 63)",PINK:"rgb(255, 192, 203)",PLUM:"rgb(221, 160, 221)",POWDERBLUE:"rgb(176, 224, 230)",PURPLE:"rgb(128, 0, 128)",REBECCAPURPLE:"rgb(102, 51, 153)",RED:"rgb(255, 0, 0)",ROSYBROWN:"rgb(188, 143, 143)",ROYALBLUE:"rgb(65, 105, 225)",SADDLEBROWN:"rgb(139, 69, 19)",SALMON:"rgb(250, 128, 114)",SANDYBROWN:"rgb(244, 164, 96)",SEAGREEN:"rgb(46, 139, 87)",SEASHELL:"rgb(255, 245, 238)",SIENNA:"rgb(160, 82, 45)",SILVER:"rgb(192, 192, 192)",SKYBLUE:"rgb(135, 206, 235)",SLATEBLUE:"rgb(106, 90, 205)",SLATEGRAY:"rgb(112, 128, 144)",SLATEGREY:"rgb(112, 128, 144)",SNOW:"rgb(255, 250, 250)",SPRINGGREEN:"rgb(0, 255, 127)",STEELBLUE:"rgb(70, 130, 180)",TAN:"rgb(210, 180, 140)",TEAL:"rgb(0, 128, 128)",THISTLE:"rgb(216, 191, 216)",TOMATO:"rgb(255, 99, 71)",TRANSPARENT:"rgba(0,0,0,0)",TURQUOISE:"rgb(64, 224, 208)",VIOLET:"rgb(238, 130, 238)",WHEAT:"rgb(245, 222, 179)",WHITE:"rgb(255, 255, 255)",WHITESMOKE:"rgb(245, 245, 245)",YELLOW:"rgb(255, 255, 0)",YELLOWGREEN:"rgb(154, 205, 50)"};function S(n,e,x,t,$,m,E){var i,s,f,a,o=x.length,g=x[0].length;if(e<1)throw new Error("degree must be at least 1 (linear)");if(e>o-1)throw new Error("degree must be less than or equal to point count - 1");if(!$)for($=[],i=0;i<o;i++)$[i]=1;if($.length<x.length&&($=$.concat($.slice(0,e))),t){if(t.length!==o+e+1)throw new Error("bad knot vector length")}else{var t=[];for(i=0;i<o+e+1;i++)t[i]=i}t.length===x.length&&(t=t.concat(t.slice(0,e)));var d=[e,t.length-1-e],A=t[d[0]],p=t[d[1]];if(E||(n=n*(p-A)+A),n<A||n>p)throw new Error("out of bounds");for(f=d[0];f<d[1]&&!(n>=t[f]&&n<=t[f+1]);f++);var b=[];for(i=0;i<o;i++){for(b[i]=[],s=0;s<g;s++)b[i][s]=x[i][s]*$[i];b[i][g]=$[i]}var u;for(a=1;a<=e+1;a++)for(i=f;i>f-e-1+a;i--)for(u=(n-t[i])/(t[i+e+1-a]-t[i]),s=0;s<g+1;s++)b[i][s]=(1-u)*b[i-1][s]+u*b[i][s];var m=m||[];for(i=0;i<g;i++)m[i]=b[f][i]/b[f][g];return m}l(S,"interpolate");var c=3,L=class{static{l(this,"BSpline")}constructor(e,x=!0){this.points=e,this.points=e.map(t=>t instanceof Array?t:[t.x,t.y]),this.formKnots(x),this.formWeights()}getLUT(e=100){let x=e-1;return[...new Array(e)].map((t,$)=>{let r=S($/x,c,this.points,this.knots,this.weights);return{x:r[0],y:r[1]}})}formKnots(e=!1){if(!e)return this.formUniformKnots();let x=[],t=this.points.length,$=t-c;for(let r=1;r<t-c;r++)x.push(r+c);for(let r=0;r<=c;r++)x=[c].concat(x);for(let r=0;r<=c;r++)x.push($+c);return this.knots=x}formUniformKnots(){return this.knots=[...new Array(this.points.length+c+1)].map((e,x)=>x)}formWeights(){return this.weights=this.points.map(e=>1)}};function I(n){let e=new TextEncoder().encode(n),x=String.fromCodePoint(...e);return btoa(x)}l(I,"base64");function U(n){let e=atob(n),x=Uint8Array.from(e,t=>t.codePointAt(0));return new TextDecoder().decode(x)}l(U,"decode64");function C(n){let e=/^(.*)\/([^.]+(\.([^\/?#]+))+)(\?[^#]*)?(#.*)?$/,x=n.match(e);if(x!==null){let{[1]:t,[2]:$,[4]:r}=x;n=t}return n}l(C,"getURLbase");function M(n){if(typeof window>"u"||typeof document>"u")return!0;var e=n.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}l(M,"isInViewport");var k=String(import.meta.url),B=U("Y29uc3QgQUxQSEFCRVRJQyA9IGBhbHBoYWJldGljYDsKY29uc3QgQVVUTyA9IGBhdXRvYDsKY29uc3QgQk9UVE9NID0gYGJvdHRvbWA7CmNvbnN0IEJPVFRPTV9MRUZUID0gYGJvdHRvbi1sZWZ0YDsKY29uc3QgQk9UVE9NX1JJR0hUID0gYGJvdHRvbS1yaWdodGA7CmNvbnN0IENFTlRFUiA9IGBjZW50ZXJgOwpjb25zdCBDT05TVFJBSU4gPSB0cnVlOwpjb25zdCBDUk9TUyA9IGBjcm9zc2hhaXJgOwpjb25zdCBFTkQgPSBgZW5kYDsKY29uc3QgSEFORCA9IGBwb2ludGVyYDsKY29uc3QgSEFOR0lORyA9IGBoYW5naW5nYDsKY29uc3QgSURFT0dSQVBISUMgPSBgaWRlb2dyYXBoaWNgOwpjb25zdCBMRUZUID0gYGxlZnRgOwpjb25zdCBNSURETEUgPSBgbWlkZGxlYDsKY29uc3QgUE9JTlRFUiA9IGBkZWZhdWx0YDsKY29uc3QgUklHSFQgPSBgcmlnaHRgOwpjb25zdCBTVEFSVCA9IGBzdGFydGA7CmNvbnN0IFRPUCA9IGB0b3BgOwpjb25zdCBUT1BfTEVGVCA9IGB0b3AtbGVmdGA7CmNvbnN0IFRPUF9SSUdIVCA9IGB0b3AtcmlnaHRgOwoKLy8gImludGVybmFsIiB2YXJzCgpsZXQgX19jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBjYW52YXNgKTsKX19jYW52YXMudGFiSW5kZXggPSAwOwpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBwb2ludGVyZG93bmAsICgpID0+IF9fY2FudmFzLmZvY3VzKCkpOwpsZXQgX19jdHggPSBfX2NhbnZhcy5nZXRDb250ZXh0KGAyZGApOwoKbGV0IF9fY3VycmVudF9jdXJzb3I7CmxldCBfX2N1cnJlbnRfaGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19jdXJyZW50X2h1ZTsKbGV0IF9fZHJhd19ncmlkOwpsZXQgX19kcmF3aW5nOwpsZXQgX19lbGVtZW50OwpsZXQgX19maW5pc2hlZF9zZXR1cDsKbGV0IF9fZmlyc3Q7CmxldCBfX2ZvbnQ7CmxldCBfX2dyaWRfY29sb3I7CmxldCBfX2dyaWRfc3BhY2luZzsKbGV0IF9faGlnaGxpZ2h0X2NvbG9yOwpsZXQgX19sYXN0X2ZyYW1lOwpsZXQgX19tb3ZhYmxlX3BvaW50czsKbGV0IF9fcmVkcmF3aW5nOwpsZXQgX19zaGFwZTsKbGV0IF9fc3RhcnRfdGltZTsKbGV0IF9fc3R5bGVfc3RhY2s7CmxldCBfX3RleHRTdHJva2U7Cgpjb25zdCBfX3BybmcgPSBuZXcgKGNsYXNzIHsKICBjb25zdHJ1Y3RvcihzZWVkID0gRGF0ZS5ub3coKSkgewogICAgdGhpcy5hID0gc2VlZDsKICB9CiAgcmVzZWVkKHNlZWQpIHsKICAgIHRoaXMuYSA9IHNlZWQ7CiAgfQogIG5leHQoKSB7CiAgICAvLyBTcGxpdE1peDMyLCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc1OTMzMTYvNzQwNTUzCiAgICBsZXQgeyBhIH0gPSB0aGlzOwogICAgYSB8PSAwOwogICAgYSA9IChhICsgMHg5ZTM3NzliOSkgfCAwOwogICAgbGV0IHQgPSBhIF4gKGEgPj4+IDE2KTsKICAgIHQgPSBNYXRoLmltdWwodCwgMHgyMWYwYWFhZCk7CiAgICB0ID0gdCBeICh0ID4+PiAxNSk7CiAgICB0ID0gTWF0aC5pbXVsKHQsIDB4NzM1YTJkOTcpOwogICAgdGhpcy5hID0gYTsKICAgIHJldHVybiAoKHQgPSB0IF4gKHQgPj4+IDE1KSkgPj4+IDApIC8gNDI5NDk2NzI5NjsKICB9Cn0pKCk7Cgphc3luYyBmdW5jdGlvbiBfX3Jlc2V0KGVsZW1lbnQgPSBfX2VsZW1lbnQpIHsKICBfX2VsZW1lbnQgPSBlbGVtZW50OwoKICAvLyBkZWZhdWx0IHZhcmlhYmxlIHZhbHVlcwogIF9fY3VycmVudF9jdXJzb3IgPSBgYXV0b2A7CiAgX19jdXJyZW50X2hpZ2hsaWdodF9jb2xvciA9IGByZ2IoMCwyNTQsMTI0KWA7CiAgX19jdXJyZW50X2h1ZSA9IDA7CiAgX19kcmF3X2dyaWQgPSB0cnVlOwogIF9fZHJhd2luZyA9IGZhbHNlOwogIF9fZmluaXNoZWRfc2V0dXAgPSBmYWxzZTsKICBfX2ZvbnQgPSB7IGZhbWlseTogYHNhbnMtc2VyaWZgLCBzaXplOiAxNiwgd2VpZ2h0OiA0MDAgfTsKICBfX2dyaWRfY29sb3IgPSBgbGlnaHRncmV5YDsKICBfX2dyaWRfc3BhY2luZyA9IDIwOwogIF9faGlnaGxpZ2h0X2NvbG9yID0gZmFsc2U7CiAgX19tb3ZhYmxlX3BvaW50cyA9IFtdOwogIF9fcmVkcmF3aW5nID0gZmFsc2U7CiAgX19zaGFwZSA9IHVuZGVmaW5lZDsKICBfX3N0YXJ0X3RpbWUgPSBEYXRlLm5vdygpOwogIF9fc3R5bGVfc3RhY2sgPSBbXTsKICBfX3RleHRTdHJva2UgPSBgdHJhbnNwYXJlbnRgOwoKICBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwogIHBsYXlpbmcgPSBmYWxzZTsKICBmcmFtZSA9IDA7CiAgcG9pbnRlci54ID0gMDsKICBwb2ludGVyLnkgPSAwOwogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGtleWJvYXJkKS5mb3JFYWNoKChuKSA9PiBkZWxldGUga2V5Ym9hcmRbbl0pOwoKICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWdlbmVyYXRlIHRoZXNlOgogIGNsZWFyU2xpZGVycygpOwogIGNsZWFyQnV0dG9ucygpOwoKICAvLyBydW4gc2V0dXAKICBhd2FpdCBfX3NldHVwKCk7CiAgX19maW5pc2hlZF9zZXR1cCA9IHRydWU7CgogIC8vIHJ1biBmaXJzdCBkcmF3CiAgX19sYXN0X2ZyYW1lID0gRGF0ZS5ub3coKTsKICBhd2FpdCBfX2RyYXcoKTsKCiAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9Owp9CgpmdW5jdGlvbiBfX2hhbHQoKSB7CiAgcGxheWluZyA9IGZhbHNlOwogIF9fY2FudmFzID0gdW5kZWZpbmVkOwogIF9fY3R4ID0gdW5kZWZpbmVkOwogIF9fZmluaXNoZWRfc2V0dXAgPSBmYWxzZTsKICBfX2RyYXdpbmcgPSB0cnVlOwogIF9fcmVkcmF3aW5nID0gdHJ1ZTsKICBfX2ZpcnN0ID0gdW5kZWZpbmVkOwogIF9fbW92YWJsZV9wb2ludHMgPSB1bmRlZmluZWQ7CiAgX19jdXJyZW50X2N1cnNvciA9IHVuZGVmaW5lZDsKICBfX2N1cnJlbnRfaHVlID0gMDsKICBfX2ZvbnQgPSB1bmRlZmluZWQ7CiAgX19zdGFydF90aW1lID0gMDsKICBjbGVhclNsaWRlcnMoKTsKICBjbGVhckJ1dHRvbnMoKTsKfQoKZnVuY3Rpb24gX19nZXREZXNjcmlwdGlvbigpIHsKICBpZiAodHlwZW9mIGdldERlc2NyaXB0aW9uICE9PSBgdW5kZWZpbmVkYCkgcmV0dXJuIGdldERlc2NyaXB0aW9uKCk7Cn0KCmFzeW5jIGZ1bmN0aW9uIF9fc2V0dXAoKSB7CiAgaWYgKHR5cGVvZiBzZXR1cCAhPT0gYHVuZGVmaW5lZGApIGF3YWl0IHNldHVwKCk7CiAgaWYgKHR5cGVvZiBfX21vcmVfc2V0dXAgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBfX21vcmVfc2V0dXAoKTsKICBpZiAoIXdpZHRoICYmICFoZWlnaHQpIHNldFNpemUoKTsKfQoKYXN5bmMgZnVuY3Rpb24gX19kcmF3KCkgewogIGlmICghX19maW5pc2hlZF9zZXR1cCkgcmV0dXJuOwogIGlmICghX19kcmF3aW5nKSB7CiAgICBfX2RyYXdpbmcgPSB0cnVlOwogICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTsKICAgIGZyYW1lRGVsdGEgPSBub3cgLSBfX2xhc3RfZnJhbWU7CiAgICBmcmFtZSsrOwogICAgcmVzZXRUcmFuc2Zvcm0oKTsKICAgIGlmICh0eXBlb2YgZHJhdyAhPT0gYHVuZGVmaW5lZGApIGF3YWl0IGRyYXcoKTsKICAgIGlmICh0eXBlb2YgX19tb3JlX2RyYXcgIT09IGB1bmRlZmluZWRgKSBhd2FpdCBfX21vcmVfZHJhdygpOwogICAgX19kcmF3aW5nID0gZmFsc2U7CiAgICBfX2xhc3RfZnJhbWUgPSBub3c7CiAgICBpZiAocGxheWluZykgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IF9fZHJhdygpKTsKICB9Cn0KLyoqCiAqIFRoZSBjdXJyZW50IGZyYW1lIG51bWJlcgogKgogKiBAY29uc3RhbnQge251bWJlcn0KICovCmxldCBmcmFtZSA9IDA7CgovKioKICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGxhc3QgZnJhbWUuCiAqCiAqIEBjb25zdGFudCB7bnVtYmVyfQogKi8KbGV0IGZyYW1lRGVsdGEgPSAwOwoKLyoqCiAqIFRoZSBoZWlnaHQgb2YgdGhlIGNhbnZhcyBpbiBwaXhlbHMKICoKICogQGNvbnN0YW50IHtudW1iZXJ9CiAqLwpsZXQgaGVpZ2h0ID0gMDsKCi8qKgogKiBUaGUgd2lkdGggb2YgdGhlIGNhbnZhcyBpbiBwaXhlbHMKICoKICogQGNvbnN0YW50IHtudW1iZXJ9CiAqLwpsZXQgd2lkdGggPSAwOwoKLyoqCiAqIFRoZSBjdXJyZW50IHBsYXkgc3RhdGUKICoKICogQGNvbnN0YW50IHtib29sZWFufQogKi8KbGV0IHBsYXlpbmcgPSBmYWxzZTsKCi8qKgogKiBUaGUgYHBvaW50ZXJgIG9iamVjdCByZXByZXNlbnRzIHRoZSBtb3VzZSBjdXJzb3IgKHdoZW4gdXNpbmcKICogYSBtb3VzZSkgb3IgZmluZ2VyIHBvc2l0aW9uIChmb3IgdG91Y2ggZGV2aWNlcyksIGFuZCBtb2RlbHMKICogc2V2ZXJhbCBhc3BlY3RzOgogKgogKiAtIGBhY3RpdmVgIChib29sZWFuKSBXaGV0aGVyIHRoZSBwb2ludGVyIGlzIGV2ZW4gb24gb3Igb3ZlciB0aGUgY2FudmFzLgogKiAtIGB4YCAobnVtYmVyKSBUaGUgcG9pbnRlcidzIHggb2Zmc2V0IGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGNhbnZhcwogKiAtIGB5YCAobnVtYmVyKSBUaGUgcG9pbnRlcidzIHkgb2Zmc2V0IGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGNhbnZhcwogKiAtIGBkb3duYCAoYm9vbGVhbikgV2hldGhlciB0aGUgcG9pbnRlciBpcyAiZW5nYWdlZCIgb3Igbm90CiAqIC0gYGRyYWdgIChib29sZWFuKSBXaGV0aGVyIGEgY2xpY2svdG91Y2gtZHJhZyBpcyBpbiBwcm9ncmVzcwogKiAtIGBtYXJrYCAoe3gseX0pIFdoZW4gZHJhZ2dpbmcsIHRoaXMgcmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRlciAiZG93biIgZXZlbnQKICoKICogQGNvbnN0YW50IHtvYmplY3R9CiAqLwpjb25zdCBwb2ludGVyID0geyB4OiAwLCB5OiAwIH07CgovKioKICogSWYgYW55IHBvaW50cyB3ZXJlIHJlZ2lzdGVyZWQgYXMgbW92YWJsZSwgYW5kIHRoZSBwb2ludGVyIGlzCiAqIG5lYXIgZW5vdWdoIHRvIGEgbW92YWJsZSBwb2ludCwgdGhpcyB2YWx1ZSB3aWxsIHBvaW50IHRvCiAqIHRoYXQgbW92YWJsZSBwb2ludCwgb3IgYGZhbHNlYCBpZiB0aGUgcG9pbnRlciBpcyBub3QgbmVhcgogKiBhbnkgbW92YWJsZSBwb2ludCAob3IsIG9mIGNvdXJzZSwgdGhlcmUgYXJlIG5vIG1vdmFibGUgcG9pbnRzKQogKgogKiBAY29uc3RhbnQge1BvaW50TGlrZXxmYWxzZX0KICovCmxldCBjdXJyZW50TW92YWJsZSA9IGZhbHNlOwoKLyoqCiAqIFRoZSBga2V5Ym9hcmRgIG9iamVjdCBpcyBhIHRydXRoIHRhYmxlIHRoYXQgY2FuIGJlIGNoZWNrZWQgdG8KICogc2VlIGlmIGFueSBrZXkgaXMgY3VycmVudGx5IHByZXNzZWQsIGFuZCBpZiBzbywgd2hlbiB0aGF0CiAqIGtleXByZXNzIHdhcyBpbml0aWF0ZWQsIGJ5IHN0b3Jpbmc6CiAqCiAqIGBgYAogKiB7CiAqICAgW2tleTpzdHJpbmddOiBkYXRldGltZQogKiB9CiAqIGBgYAogKgogKiBXaGVuIGEga2V5IGlzIHJlbGVhc2VkLCBpdHMgbWFwcGluZyBpcyByZW1vdmVkIGVudGlyZWx5LAogKiByYXRoZXIgdGhhbiBpdCBiZWluZyBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuCiAqCiAqIEBjb25zdGFudCB7b2JqZWN0fQogKi8KY29uc3Qga2V5Ym9hcmQgPSB7fTsKCi8vIGNvbnN0YW50cy4uLgpjb25zdCB7CiAgLyoqCiAgICogVGhlIHJhdGlvIG9mIGEgY2lyY2xlJ3MgY2lyY3VtZmVyZW5jZSB0byBpdHMgZGlhbWV0ZXIuCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGkKICAgKgogICAqIEBjb25zdGFudCB7bnVtYmVyfQogICAqCiAgICogQHNlZSB7QGxpbmsgVEFVfQogICAqLwogIFBJLAoKICAvKioKICAgKiBUaGUgYmFzZSBmb3IgdGhlIG5hdHVyYWwgbG9nYXJpdGhtLgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VfKG1hdGhlbWF0aWNhbF9jb25zdGFudCkKICAgKgogICAqIEBjb25zdGFudCB7bnVtYmVyfQogICAqLwogIEUsCn0gPSBNYXRoOwoKY29uc3QgewogIC8qKgogICAqIEEgdmVyeSBzbWFsbCB2YWx1ZSBmb3IgcGVyZm9ybWluZyBpbXByZWNpc2UgbWF0aCBvcGVyYXRpb25zCiAgICogc3VjaCBhcyBjaGVja2luZyB3aGV0aGVyIGEgdmFsdWUgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZQogICAqIGFzIHNvbWUgb3RoZXIgdmFsdWUuCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKi8KICBlcHNpbG9uLAoKICAvKioKICAgKiBBIHZlcnkgbGFyZ2UgdmFsdWUgdGhhdCBjYW4gc3RpbGwgYmUgdXNlZCB0byBkcmF3IHRoaW5ncwogICAqIG9uIHRoZSBjYW52YXMgKHN1Y2ggYXMgbGluZXMgZnJvbSAtaHVnZSB0byAraHVnZSkuCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKi8KICBodWdlLAoKICAvKioKICAgKiBUaGUgcmF0aW8gb2YgYSBjaXJjbGUncyBjaXJjdW1mZXJlbmNlIHRvIGl0cyByYWRpdXMsIGkuZS4gMipQSQogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1R1cm5fKGFuZ2xlKSNUYXVfcHJvcG9zYWxzCiAgICoKICAgKiBAY29uc3RhbnQge251bWJlcn0KICAgKgogICAqIEBzZWUge0BsaW5rIFBJfQogICAqLwogIFRBVSwKfSA9IHsgZXBzaWxvbjogMWUtMTAsIGh1Z2U6IDFfMDAwXzAwMCwgVEFVOiBQSSAqIDIgfTsKZnVuY3Rpb24gZ3JpZCgpIHsKICBzYXZlKCk7CiAgc2V0TGluZVdpZHRoKDAuNSk7CiAgbm9GaWxsKCk7CiAgc2V0U3Ryb2tlKF9fZ3JpZF9jb2xvcik7CiAgZm9yICgKICAgIGxldCB4ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHggPCB3aWR0aDsKICAgIHggKz0gX19ncmlkX3NwYWNpbmcKICApIHsKICAgIGxpbmUoeCwgMCwgeCwgaGVpZ2h0KTsKICB9CiAgZm9yICgKICAgIGxldCB5ID0gKC0wLjUgKyBfX2dyaWRfc3BhY2luZyAvIDIpIHwgMDsKICAgIHkgPCBoZWlnaHQ7CiAgICB5ICs9IF9fZ3JpZF9zcGFjaW5nCiAgKSB7CiAgICBsaW5lKDAsIHksIHdpZHRoLCB5KTsKICB9CiAgcmVzdG9yZSgpOwp9CmZ1bmN0aW9uIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCkgewogIC8vIFdlIGRvbid0IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggdGhlIGJyb3dzZXIsIHNvIHdlJ3JlIG9ubHkKICAvLyBnb2luZyB0byBhbGxvdyB1bm1vZGlmaWVkIGtleXMsIG9yIHNoaWZ0LW1vZGlmaWVkIGtleXMsCiAgLy8gYW5kIHRhYiBoYXMgdG8gYWx3YXlzIHdvcmsuIEZvciBvYnZpb3VzIHJlYXNvbnMuCiAgY29uc3QgdGFiID0gZXZ0LmtleSAhPT0gIlRhYiI7CiAgY29uc3QgZnVuY3Rpb25LZXkgPSBldnQua2V5Lm1hdGNoKC9GXGQrLykgPT09IG51bGw7CiAgY29uc3Qgc3BlY2lmaWNDaGVjayA9IHRhYiAmJiBmdW5jdGlvbktleTsKICBpZiAoIWV2dC5hbHRLZXkgJiYgIWV2dC5jdHJsS2V5ICYmICFldnQubWV0YUtleSAmJiBzcGVjaWZpY0NoZWNrKSB7CiAgICBpZiAoZXZ0LnRhcmdldCA9PT0gX19jYW52YXMpIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIF9fa2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBrZXlib2FyZFtrZXldID0gRGF0ZS5ub3coKTsKICBpZiAodHlwZW9mIGtleURvd24gIT09IGB1bmRlZmluZWRgKQogICAga2V5RG93bihrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9CgpfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKGBrZXlkb3duYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlEb3duKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0pOwoKZnVuY3Rpb24gX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpIHsKICBkZWxldGUga2V5Ym9hcmRba2V5XTsKICBpZiAodHlwZW9mIGtleVVwICE9PSBgdW5kZWZpbmVkYCkKICAgIGtleVVwKGtleSwgc2hpZnRLZXksIGFsdEtleSwgY3RybEtleSwgbWV0YUtleSk7Cn0KCl9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoYGtleXVwYCwgKGV2dCkgPT4gewogIF9fc2FmZWx5SW50ZXJjZXB0S2V5KGV2dCk7CiAgY29uc3QgeyBrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkgfSA9IGV2dDsKICBpZiAoX19maW5pc2hlZF9zZXR1cCkgX19rZXlVcChrZXksIHNoaWZ0S2V5LCBhbHRLZXksIGN0cmxLZXksIG1ldGFLZXkpOwp9KTsKY29uc3QgX19iaW5vbWlhbENvZWZmaWNpZW50cyA9IFtbMV0sIFsxLCAxXV07CmNsYXNzIE1hdHJpeCB7CiAgY29uc3RydWN0b3IobiwgbSwgZGF0YSkgewogICAgZGF0YSA9IG4gaW5zdGFuY2VvZiBBcnJheSA/IG4gOiBkYXRhOwogICAgdGhpcy5kYXRhID0KICAgICAgZGF0YSA/PyBbLi4ubmV3IEFycmF5KG4pXS5tYXAoKHYpID0+IFsuLi5uZXcgQXJyYXkobSldLm1hcCgodikgPT4gMCkpOwogICAgdGhpcy5yb3dzID0gdGhpcy5kYXRhLmxlbmd0aDsKICAgIHRoaXMuY29scyA9IHRoaXMuZGF0YVswXS5sZW5ndGg7CiAgfQogIHNldERhdGEoZGF0YSkgewogICAgdGhpcy5kYXRhID0gZGF0YTsKICB9CiAgZ2V0KGksIGopIHsKICAgIHJldHVybiB0aGlzLmRhdGFbaV1bal07CiAgfQogIHNldChpLCBqLCB2YWx1ZSkgewogICAgdGhpcy5kYXRhW2ldW2pdID0gdmFsdWU7CiAgfQogIHJvdyhpKSB7CiAgICByZXR1cm4gdGhpcy5kYXRhW2ldOwogIH0KICBjb2woaikgewogICAgdmFyIGQgPSB0aGlzLmRhdGEsCiAgICAgIGNvbCA9IFtdOwogICAgZm9yIChsZXQgciA9IDAsIGwgPSBkLmxlbmd0aDsgciA8IGw7IHIrKykgewogICAgICBjb2wucHVzaChkW3JdW2pdKTsKICAgIH0KICAgIHJldHVybiBjb2w7CiAgfQogIG11bHRpcGx5KG90aGVyKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeChtdWx0aXBseU1hdHJpeCh0aGlzLmRhdGEsIG90aGVyLmRhdGEpKTsKICB9CiAgaW52ZXJ0KCkgewogICAgcmV0dXJuIG5ldyBNYXRyaXgoaW52ZXJ0TWF0cml4KHRoaXMuZGF0YSkpOwogIH0KICB0cmFuc3Bvc2UoKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeCh0cmFuc3Bvc2VNYXRyaXgodGhpcy5kYXRhKSk7CiAgfQp9CmNsYXNzIFBvaW50IHsKICBjb25zdHJ1Y3Rvcih4LCB5KSB7CiAgICB0aGlzLnggPSB4OwogICAgdGhpcy55ID0geTsKICB9Cn0KCmNsYXNzIENpcmNsZSBleHRlbmRzIFBvaW50IHsKICBjb25zdHJ1Y3Rvcih4LCB5LCByKSB7CiAgICBzdXBlcih4LCB5KTsKICAgIHRoaXMuciA9IHI7CiAgfQp9CmZ1bmN0aW9uIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKSB7CiAgY3VycmVudE1vdmFibGUgPSBmYWxzZTsKCiAgaWYgKCFfX21vdmFibGVfcG9pbnRzLmxlbmd0aCkgcmV0dXJuOwoKICBjb25zdCBtYXRjaGVzID0gW107CiAgY29uc3QgbWF0Y2hQYWRkaW5nID0gdHlwZS5pbmNsdWRlcyhgbW91c2VgKSA/IDEwIDogMzA7CgogIF9fbW92YWJsZV9wb2ludHMuZm9yRWFjaCgocCwgcG9zKSA9PiB7CiAgICBpZiAocCBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIGlmIChwLmluc2lkZSh4LCB5KS5sZW5ndGggPiAwKSB7CiAgICAgICAgbWF0Y2hlcy5wdXNoKHsgcCwgZDogMCB9KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgbGV0IHgyID0gcFswXSA9PT0gdW5kZWZpbmVkID8gcC54IDogcFswXTsKICAgICAgbGV0IHkyID0gcFsxXSA9PT0gdW5kZWZpbmVkID8gcC55IDogcFsxXTsKICAgICAgY29uc3QgZCA9IGRpc3QoeCwgeSwgeDIsIHkyKTsKICAgICAgaWYgKGQgPCAocC5yID8gcC5yIDogMCkgKyBtYXRjaFBhZGRpbmcpIHsKICAgICAgICBtYXRjaGVzLnB1c2goeyBwLCBkIH0pOwogICAgICB9CiAgICB9CiAgfSk7CgogIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IGBhdXRvYDsKCiAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7CiAgICBtYXRjaGVzLnNvcnQoKGEsIGIpID0+IGEuZCAtIGIuZCk7CiAgICBjdXJyZW50TW92YWJsZSA9IG1hdGNoZXNbMF0ucDsKICAgIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IGBwb2ludGVyYDsKICB9Cn0KCmZ1bmN0aW9uIF9fdG9Qb2ludGVyRXZlbnQoZXZ0KSB7CiAgbGV0IHBvaW50ZXIgPSBldnQ7CiAgLy8gQ29udmVydCBtb3VzZSBvciB0b3VjaCBpbnRvIGdlbmVyaWMgcG9pbnRlci4gV2hpY2ggd2UgbmVlZAogIC8vIHRvIGRvIGJlY2F1c2UgQ2hyb21lIG9uIE1hY09TIGhhcyBkZWNpZGVkIHRvIG5vdCBnZW5lcmF0ZQogIC8vIHBvaW50ZXIgZXZlbnRzIHdoZW4gdGhlcmUncyBhIG1vdXNlLiBUaGFua3MgR29vZ2xlIQogIGlmIChldnQudHlwZS5pbmNsdWRlcyhgdG91Y2hgKSkgewogICAgY29uc3QgeyB0b3VjaGVzLCBjaGFuZ2VkVG91Y2hlcyB9ID0gZXZ0Lm9yaWdpbmFsRXZlbnQgPz8gZXZ0OwogICAgcG9pbnRlciA9IHRvdWNoZXNbMF0gPz8gY2hhbmdlZFRvdWNoZXNbMF07CiAgfQogIGNvbnN0IHsgY2xpZW50WCwgY2xpZW50WSB9ID0gcG9pbnRlcjsKICBjb25zdCB7IGxlZnQsIHRvcCB9ID0gX19jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgcmV0dXJuIHsgb2Zmc2V0WDogY2xpZW50WCAtIGxlZnQsIG9mZnNldFk6IGNsaWVudFkgLSB0b3AgfTsKfQoKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0KCltgdG91Y2hzdGFydGAsIGBtb3VzZWRvd25gXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZXZ0KSA9PiB7CiAgICBpZiAoX19maW5pc2hlZF9zZXR1cCkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IF9fdG9Qb2ludGVyRXZlbnQoZXZ0KTsKICAgICAgY29uc3QgeyB4LCB5IH0gPSBzY3JlZW5Ub1dvcmxkKG9mZnNldFgsIG9mZnNldFkpOwogICAgICBPYmplY3QuYXNzaWduKHBvaW50ZXIsIHsgeCwgeSwgdHlwZSwgZG93bjogdHJ1ZSwgbWFyazogeyB4LCB5IH0gfSk7CiAgICAgIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKTsKICAgICAgX19wb2ludGVyRG93bih4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJEb3duKHgsIHkpIHsKICBpZiAoY3VycmVudE1vdmFibGUpIHsKICAgIGlmIChjdXJyZW50TW92YWJsZSBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIHNwZWNpYWwuCiAgICB9IGVsc2UgewogICAgICBjdXJyZW50TW92YWJsZS5fZHggPSBjdXJyZW50TW92YWJsZS54IC0geDsKICAgICAgY3VycmVudE1vdmFibGUuX2R5ID0gY3VycmVudE1vdmFibGUueSAtIHk7CiAgICB9CiAgfQogIGlmICh0eXBlb2YgcG9pbnRlckRvd24gIT09IGB1bmRlZmluZWRgKSBwb2ludGVyRG93bih4LCB5KTsKfQoKW2B0b3VjaGVuZGAsIGBtb3VzZXVwYF0uZm9yRWFjaCgodHlwZSkgPT4gewogIF9fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgKGV2dCkgPT4gewogICAgaWYgKF9fZmluaXNoZWRfc2V0dXApIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgY29uc3QgeyBvZmZzZXRYLCBvZmZzZXRZIH0gPSBfX3RvUG9pbnRlckV2ZW50KGV2dCk7CiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gc2NyZWVuVG9Xb3JsZChvZmZzZXRYLCBvZmZzZXRZKTsKICAgICAgT2JqZWN0LmFzc2lnbihwb2ludGVyLCB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHR5cGUsCiAgICAgICAgZG93bjogZmFsc2UsCiAgICAgICAgbWFyazogZmFsc2UsCiAgICAgICAgZHJhZzogZmFsc2UsCiAgICAgIH0pOwogICAgICBfX3BvaW50ZXJVcCh4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJVcCh4LCB5KSB7CiAgaWYgKHR5cGVvZiBwb2ludGVyVXAgIT09IGB1bmRlZmluZWRgKSBwb2ludGVyVXAoeCwgeSk7CiAgaWYgKHBvaW50ZXIubWFyaz8ueCA9PT0geCAmJiBwb2ludGVyLm1hcms/LnkgPT09IHkpIHsKICAgIGlmICh0eXBlb2YgcG9pbnRlckNsaWNrICE9PSBgdW5kZWZpbmVkYCkgcG9pbnRlckNsaWNrKHgsIHkpOwogIH0KICBpZiAoY3VycmVudE1vdmFibGUgJiYgY3VycmVudE1vdmFibGUgaW5zdGFuY2VvZiBTaGFwZSkgewogICAgY3VycmVudE1vdmFibGUuY29tbWl0KCk7CiAgfQp9CgpbYHRvdWNobW92ZWAsIGBtb3VzZW1vdmVgXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZXZ0KSA9PiB7CiAgICBpZiAoX19maW5pc2hlZF9zZXR1cCkgewogICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IF9fdG9Qb2ludGVyRXZlbnQoZXZ0KTsKICAgICAgY29uc3QgeyB4LCB5IH0gPSBzY3JlZW5Ub1dvcmxkKG9mZnNldFgsIG9mZnNldFkpOwogICAgICBPYmplY3QuYXNzaWduKHBvaW50ZXIsIHsgeCwgeSwgdHlwZSB9KTsKICAgICAgaWYgKCFwb2ludGVyLmRvd24pIF9fY2hlY2tGb3JDdXJyZW50TW92YWJsZSh4LCB5LCB0eXBlKTsKICAgICAgX19wb2ludGVyTW92ZSh4LCB5KTsKICAgIH0KICB9KTsKfSk7CgpmdW5jdGlvbiBfX3BvaW50ZXJNb3ZlKHgsIHkpIHsKICBsZXQgaGFkTW92YWJsZSA9IGZhbHNlOwogIGlmIChwb2ludGVyLmRvd24gJiYgY3VycmVudE1vdmFibGUpIHsKICAgIGlmIChjdXJyZW50TW92YWJsZSBpbnN0YW5jZW9mIFNoYXBlKSB7CiAgICAgIGN1cnJlbnRNb3ZhYmxlLm9mZnNldCh4IC0gcG9pbnRlci5tYXJrLngsIHkgLSBwb2ludGVyLm1hcmsueSk7CiAgICB9IGVsc2UgaWYgKGN1cnJlbnRNb3ZhYmxlWzBdKSB7CiAgICAgIGN1cnJlbnRNb3ZhYmxlWzBdID0geCArIGN1cnJlbnRNb3ZhYmxlLl9keDsKICAgICAgY3VycmVudE1vdmFibGVbMV0gPSB5ICsgY3VycmVudE1vdmFibGUuX2R5OwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudE1vdmFibGUueCA9IHggKyBjdXJyZW50TW92YWJsZS5fZHg7CiAgICAgIGN1cnJlbnRNb3ZhYmxlLnkgPSB5ICsgY3VycmVudE1vdmFibGUuX2R5OwogICAgfQogICAgY3VycmVudE1vdmFibGUuX19vbl9tb3ZlPy4oKTsKICAgIGhhZE1vdmFibGUgPSB0cnVlOwogIH0KCiAgcG9pbnRlci5kcmFnID0gcG9pbnRlci5kb3duOwoKICBpZiAocG9pbnRlci5kcmFnICYmIHR5cGVvZiBwb2ludGVyRHJhZyAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJEcmFnKHgsIHkpOwogIH0KCiAgaWYgKHR5cGVvZiBwb2ludGVyTW92ZSAhPT0gYHVuZGVmaW5lZGApIHsKICAgIHBvaW50ZXJNb3ZlKHgsIHkpOwogIH0KCiAgaWYgKGhhZE1vdmFibGUgJiYgIXBsYXlpbmcpIHJlZHJhdygpOwp9CgpbYHRvdWNoc3RhcnRgLCBgbW91c2VlbnRlcmBdLmZvckVhY2goKHR5cGUpID0+IHsKICBfX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsICgpID0+IHsKICAgIHBvaW50ZXIuYWN0aXZlID0gdHJ1ZTsKICAgIF9fcG9pbnRlckFjdGl2ZSh0cnVlKTsKICB9KTsKfSk7CgpbYHRvdWNoZW5kYCwgYG1vdXNlbGVhdmVgXS5mb3JFYWNoKCh0eXBlKSA9PiB7CiAgX19jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoKSA9PiB7CiAgICBfX3BvaW50ZXJBY3RpdmUoZmFsc2UpOwogIH0pOwp9KTsKCmZ1bmN0aW9uIF9fcG9pbnRlckFjdGl2ZShhY3RpdmUpIHsKICBpZiAodHlwZW9mIHBvaW50ZXJBY3RpdmUgIT09IGB1bmRlZmluZWRgKSB7CiAgICBwb2ludGVyQWN0aXZlKGFjdGl2ZSk7CiAgfQp9Ci8qKgogKiBjb2RlIHVzZWQgYnkgcHJvamVjdC5qcywgYnV0IG5hbWVkIHNvIHRoYXQgaXQgbG9hZHMKICogZmlyc3QsIGFuZCBkb2VzIG5vdCBnZXQgYWRkZWQgdG8gdGhlIGQudHMgZmlsZS4KICovCmNsYXNzIENhYmluZXRQcm9qZWN0b3IgewogIEEgPSAwOwogIEIgPSAwOwogIEMgPSAwOwoKICBjb25zdHJ1Y3RvcihveCwgb3ksIHNjYWxlLCBwaGkpIHsKICAgIHRoaXMudXBkYXRlKG94LCBveSwgc2NhbGUsIHBoaSk7CiAgfQoKICBzZXRSb3RhdGlvbih4ID0gMCwgeSA9IDAsIHogPSAwKSB7CiAgICB0aGlzLkEgPSB4OwogICAgdGhpcy5CID0gejsKICAgIHRoaXMuQyA9IHk7CiAgfQoKICByb3RhdGUoeCwgeSwgeikgewogICAgbGV0IHsgQSwgQiwgQyB9ID0gdGhpczsKICAgIGxldCBhID0geDsKICAgIGxldCBiID0geSAqIGNvcyhBKSAtIHogKiBzaW4oQSk7CiAgICBsZXQgYyA9IHkgKiBzaW4oQSkgKyB6ICogY29zKEEpOwogICAgeCA9IGE7CiAgICB5ID0gYjsKICAgIHogPSBjOwogICAgYSA9IHggKiBjb3MoQikgKyB6ICogc2luKEIpOwogICAgYiA9IHk7CiAgICBjID0geCAqIC1zaW4oQikgKyB6ICogY29zKEIpOwogICAgeCA9IGE7CiAgICB5ID0gYjsKICAgIHogPSBjOwogICAgYSA9IHggKiBjb3MoQykgLSB5ICogc2luKEMpOwogICAgYiA9IHggKiBzaW4oQykgKyB5ICogY29zKEMpOwogICAgYyA9IHo7CgogICAgcmV0dXJuIFthLCBiLCBjXTsKICB9CgogIHVwZGF0ZShveCA9IDAsIG95ID0gMCwgc2NhbGUgPSAxLCBwaGkgPSAtUEkgLyA2KSB7CiAgICB0aGlzLm9mZnNldCA9IG5ldyBQb2ludChveCwgb3kpOwogICAgdGhpcy5zY2FsZSA9IHNjYWxlOwogICAgdGhpcy5waGkgPSBwaGk7CiAgfQoKICBwcm9qZWN0KHgsIHksIHopIHsKICAgIGNvbnN0IHsgb2Zmc2V0LCBzY2FsZSwgcGhpIH0gPSB0aGlzOwogICAgeCAqPSBzY2FsZTsKICAgIHkgKj0gc2NhbGU7CiAgICB6ICo9IHNjYWxlOwogICAgW3gsIHksIHpdID0gdGhpcy5yb3RhdGUoeCwgeSwgeik7CiAgICBjb25zdCBhID0geSwKICAgICAgYiA9IC16LAogICAgICBjID0gLXggLyAyOwoKICAgIHJldHVybiBuZXcgUG9pbnQoCiAgICAgIG9mZnNldC54ICsgYSArIGMgKiBjb3MocGhpKSwKICAgICAgb2Zmc2V0LnkgKyBiICsgYyAqIHNpbihwaGkpCiAgICApOwogIH0KfQoKbGV0IF9fcHJvamVjdG9yID0gbmV3IENhYmluZXRQcm9qZWN0b3IoKTsKLyoqCiAqIC4uLmRvY3MgZ28gaGVyZS4uLgogKi8KY2xhc3MgU2VnbWVudCB7CiAgb3ggPSAwOwogIG95ID0gMDsKICBwb2ludHMgPSBbXTsKICBpbnN0cnVjdGlvbnMgPSBbXTsKCiAgY2xvc2VkID0gZmFsc2U7CiAgc3ZnX2QgPSBgYDsKCiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoYGh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnYCwgYHBhdGhgKTsKICB9CgogIGFkZCh4LCB5KSB7CiAgICBjb25zdCB7IGNsb3NlZCwgcG9pbnRzIH0gPSB0aGlzOwogICAgaWYgKGNsb3NlZCkgcmV0dXJuOwogICAgY29uc3QgcCA9IHsgeCwgeSB9OwogICAgcG9pbnRzLnB1c2gocCk7CiAgICByZXR1cm4gcDsKICB9CgogIF9pbnN0cnVjdGlvbih0eXBlTmFtZSwgLi4uYXJncykgewogICAgbGV0IHBvaW50cyA9IGFyZ3M7CgogICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBgbnVtYmVyYCkgewogICAgICBwb2ludHMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgcG9pbnRzLnB1c2goeyB4OiBhcmdzW2ldLCB5OiBhcmdzW2kgKyAxXSB9KTsKICAgICAgfQogICAgfQoKICAgIC8vIHNlZSBkcmF3LnNwbGluZSguLi5hcmdzKQogICAgbGV0IFQgPSAxOwogICAgaWYgKHR5cGVOYW1lID09PSBgc3BsaW5lYCkgewogICAgICBpZiAoYXJncy5sZW5ndGggJSAyID09PSAxKSB7CiAgICAgICAgW1RdID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKTsKICAgICAgICBwb2ludHMucG9wKCk7CiAgICAgIH0KICAgIH0KCiAgICBwb2ludHMuZm9yRWFjaCgocCkgPT4gewogICAgICBwW3R5cGVOYW1lXSA9IHRydWU7CiAgICAgIGlmICh0eXBlTmFtZSA9PT0gYHNwbGluZWApIHAuVCA9IFQ7CiAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLnB1c2gocCk7CiAgICB9KTsKCiAgICB0aGlzLmludmFsaWRhdGUoKTsKCiAgICByZXR1cm4gcG9pbnRzOwogIH0KCiAgbW92ZVRvKHgsIHkpIHsKICAgIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgICB5ID0geC55OwogICAgICB4ID0geC54OwogICAgfQogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBtb3ZlYCwgeCwgeSk7CiAgfQoKICBsaW5lVG8oLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBsaW5lYCwgLi4uYXJncyk7CiAgfQoKICBjdXJ2ZVRvKC4uLmFyZ3MpIHsKICAgIHJldHVybiB0aGlzLl9pbnN0cnVjdGlvbihgYmV6aWVyYCwgLi4uYXJncyk7CiAgfQoKICBxdWFkVG8oLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuX2luc3RydWN0aW9uKGBxdWFkYCwgLi4uYXJncyk7CiAgfQoKICBzcGxpbmVUbyguLi5hcmdzKSB7CiAgICByZXR1cm4gdGhpcy5faW5zdHJ1Y3Rpb24oYHNwbGluZWAsIC4uLmFyZ3MpOwogIH0KCiAgY2xvc2UoKSB7CiAgICB0aGlzLmNsb3NlZCA9IHRydWU7CiAgICB0aGlzLmludmFsaWRhdGUoKTsKICB9CgogIG9mZnNldCh4LCB5KSB7CiAgICB0aGlzLm94ID0geDsKICAgIHRoaXMub3kgPSB5OwogICAgdGhpcy5pbnZhbGlkYXRlKCk7CiAgfQoKICBjb21taXQoKSB7CiAgICBjb25zdCB7IG94LCBveSwgaW5zdHJ1Y3Rpb25zIH0gPSB0aGlzOwogICAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goKHApID0+IHsKICAgICAgcC54ICs9IG94OwogICAgICBwLnkgKz0gb3k7CiAgICB9KTsKICAgIHRoaXMub3ggPSAwOwogICAgdGhpcy5veSA9IDA7CiAgICB0aGlzLmludmFsaWRhdGUoKTsKICB9CgogIGludmFsaWRhdGUoKSB7CiAgICAvLyB0aGlzLnVwZGF0ZVNWRygpOwogICAgdGhpcy5kaXJ0eSA9IHRydWU7CiAgfQoKICBpbnNpZGUoeCwgeSkgewogICAgY29uc3QgeyBwYXRoIH0gPSB0aGlzOwogICAgaWYgKHRoaXMuZGlydHkpIHsKICAgICAgdGhpcy51cGRhdGVTVkcoKTsKICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoYGRgLCB0aGlzLnN2Z19kKTsKICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogICAgfQogICAgcmV0dXJuIHBhdGguaXNQb2ludEluRmlsbChuZXcgRE9NUG9pbnQoeCwgeSkpOwogIH0KCiAgZHJhdyhzaG93UG9pbnRzKSB7CiAgICBjb25zdCB7IG94LCBveSB9ID0gdGhpczsKICAgIGNvbnN0IG9wcyA9IHRoaXMuaW5zdHJ1Y3Rpb25zLnNsaWNlKCk7CiAgICB0aGlzLnJlcGxhY2VTcGxpbmVXaXRoQmV6aWVycyhvcHMpOwoKICAgIGNvbnN0IGIyID0gKHQsIGEsIGIsIGMpID0+IHsKICAgICAgY29uc3QgbXQgPSAxIC0gdDsKICAgICAgcmV0dXJuIGEgKiBtdCAqKiAyICsgMiAqIGIgKiBtdCAqIHQgKyBjICogdCAqKiAyOwogICAgfTsKCiAgICBjb25zdCBiMyA9ICh0LCBhLCBiLCBjLCBkKSA9PiB7CiAgICAgIGNvbnN0IG10ID0gMSAtIHQ7CiAgICAgIHJldHVybiAoCiAgICAgICAgYSAqIG10ICoqIDMgKyAzICogYiAqIG10ICoqIDIgKiB0ICsgMyAqIGMgKiBtdCAqIHQgKiogMiArIGQgKiB0ICoqIDMKICAgICAgKTsKICAgIH07CgogICAgY29uc3QgdnR4ID0gKHApID0+IHZlcnRleChwLnggKyBveCwgcC55ICsgb3kpOwoKICAgIHN0YXJ0KCk7CiAgICBsZXQgbGFzdDsKICAgIHdoaWxlIChvcHMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IHAgPSBvcHMuc2hpZnQoKTsKICAgICAgaWYgKHAubW92ZSB8fCBwLmxpbmUpIHsKICAgICAgICB2dHgocCk7CiAgICAgICAgbGFzdCA9IHA7CiAgICAgIH0KICAgICAgaWYgKHAucXVhZCkgewogICAgICAgIGNvbnN0IG4gPSBvcHMuc2hpZnQoKTsKICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE7IHQgKz0gMC4wNSkgewogICAgICAgICAgdnR4KHsgeDogYjIodCwgbGFzdC54LCBwLngsIG4ueCksIHk6IGIyKHQsIGxhc3QueSwgcC55LCBuLnkpIH0pOwogICAgICAgIH0KICAgICAgICB2dHgobi54LCBuLnkpOwogICAgICAgIGxhc3QgPSBuOwogICAgICB9CiAgICAgIGlmIChwLmJlemllcikgewogICAgICAgIGNvbnN0IG4gPSBvcHMuc2hpZnQoKTsKICAgICAgICBjb25zdCBuMiA9IG9wcy5zaGlmdCgpOwogICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMTsgdCArPSAwLjAzKSB7CiAgICAgICAgICB2dHgoewogICAgICAgICAgICB4OiBiMyh0LCBsYXN0LngsIHAueCwgbi54LCBuMi54KSwKICAgICAgICAgICAgeTogYjModCwgbGFzdC55LCBwLnksIG4ueSwgbjIueSksCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdnR4KG4yLngsIG4yLnkpOwogICAgICAgIGxhc3QgPSBuMjsKICAgICAgfQogICAgfQogICAgZW5kKHRoaXMuY2xvc2VkKTsKCiAgICBpZiAoc2hvd1BvaW50cykgewogICAgICB0aGlzLmluc3RydWN0aW9ucy5mb3JFYWNoKChwKSA9PiBwb2ludChwLnggKyBveCwgcC55ICsgb3kpKTsKICAgIH0KICB9CgogIHVwZGF0ZVNWRygpIHsKICAgIGxldCBkID0gYGA7CiAgICBjb25zdCBvcHMgPSB0aGlzLmluc3RydWN0aW9ucy5zbGljZSgpOwogICAgdGhpcy5yZXBsYWNlU3BsaW5lV2l0aEJlemllcnMob3BzKTsKICAgIHdoaWxlIChvcHMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IHAgPSBvcHMuc2hpZnQoKTsKICAgICAgaWYgKHAubW92ZSkgZCA9IGBNICR7cC54fSAke3AueX1gOwogICAgICBpZiAocC5saW5lKSBkID0gYCR7ZH0gTCAke3AueH0gJHtwLnl9YDsKICAgICAgaWYgKHAucXVhZCkgewogICAgICAgIGNvbnN0IG9wID0gb3BzLnNoaWZ0KCk7CiAgICAgICAgZCA9IGAke2R9IFEgJHtwLnh9ICR7cC55fSAke29wLnh9ICR7b3AueX1gOwogICAgICB9CiAgICAgIGlmIChwLmJlemllcikgewogICAgICAgIGNvbnN0IG9wMiA9IG9wcy5zaGlmdCgpOwogICAgICAgIGNvbnN0IG9wMyA9IG9wcy5zaGlmdCgpOwogICAgICAgIGQgPSBgJHtkfSBDICR7cC54fSAke3AueX0gJHtvcDIueH0gJHtvcDIueX0gJHtvcDMueH0gJHtvcDMueX1gOwogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5jbG9zZWQpIGQgKz0gYCBaYDsKICAgIHRoaXMuc3ZnX2QgPSBkOwogICAgdGhpcy5wYXRoLnNldEF0dHJpYnV0ZShgZGAsIGQpOwogIH0KCiAgZ2V0U1ZHKHNob3dQb2ludHMsIGZpbGwsIHN0cm9rZSkgewogICAgbGV0IHN2ZyA9IGA8cGF0aCBmaWxsPSIke2ZpbGx9IiBzdHJva2U9IiR7c3Ryb2tlfSIgZD0iJHt0aGlzLnN2Z19kfSIvPmA7CiAgICBpZiAoc2hvd1BvaW50cykgewogICAgICB0aGlzLmluc3RydWN0aW9ucy5mb3JFYWNoKAogICAgICAgIChwKSA9PgogICAgICAgICAgKHN2ZyA9IGAke3N2Z31cbjxjaXJjbGUgZmlsbD0iJHtmaWxsfSIgc3Ryb2tlPSIke3N0cm9rZX0iIGN4PSIke3AueH0iIGN5PSIke3AueX0iIHI9IjMiLz5gKQogICAgICApOwogICAgfQogICAgcmV0dXJuIHN2ZzsKICB9CgogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAvLyBDb2RlICpqdXN0KiBmb3IgY29udmVydGluZyBjYXJkaW5hbCBzcGxpbmVzIGludG8gcG9seS1CZXppZXJzCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICByZXBsYWNlU3BsaW5lV2l0aEJlemllcnMob3BzKSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAob3BzW2ldLnNwbGluZSkgewogICAgICAgIHRoaXMuY29udmVydFNwbGluZShvcHMsIGkpOwogICAgICB9CiAgICB9CiAgfQoKICBjb252ZXJ0U3BsaW5lKG9wcywgaSkgewogICAgY29uc3Qgc3BsaW5lcyA9IFtdOwogICAgLy8gcmVtb3ZlIHRoZSBzZXF1ZW5jZSBvZiBzcGxpbmUgcG9pbnRzIHN0YXJ0aW5nIGF0IG9wc1tpXQogICAgd2hpbGUgKG9wc1tpXSAmJiBvcHNbaV0uc3BsaW5lKSBzcGxpbmVzLnB1c2gob3BzLnNwbGljZShpLCAxKVswXSk7CiAgICAvLyBpbmplY3QgdGhlIGVxdWl2YWxlbnQgYmV6aWVyIHNlcXVlbmNlCiAgICBvcHMuc3BsaWNlKGksIDAsIC4uLnRoaXMuc3BsaW5lUG9pbnRzVG9CZXppZXJQb2ludHMoc3BsaW5lcywgb3BzLCBpKSk7CiAgfQoKICBzcGxpbmVQb2ludHNUb0JlemllclBvaW50cyhzcGxpbmVzLCBvcHMsIGkpIHsKICAgIGxldCBiZXppZXJzID0gW107CiAgICBsZXQgcTEgPSBvcHMuYXQoaSAtIDIpOwogICAgbGV0IHEyID0gb3BzLmF0KGkgLSAxKTsKICAgIGxldCBxMywgcTQ7CiAgICBsZXQgcCA9IHNwbGluZXNbMF07CgogICAgLy8gVGhlIGZpcnN0ICBzZWdtZW50IG5lZWRzIHNwZWNpYWwgaGFuZGxpbmcgdG8KICAgIC8vIGVuc3VyZSB0aGUgZGVwYXJ0dXJlIHRhbmdlbnQgaXMgY29ycmVjdC4KICAgIHEzID0gc3BsaW5lc1sxXSA/PyBvcHNbMF07CiAgICBiZXppZXJzLnB1c2goLi4udGhpcy5maXJzdFNwbGluZVRvQmV6aWVyKHExLCBxMiwgcCwgcTMsIG9wcywgaSkpOwoKICAgIC8vIEludGVybWVkaWF0ZSBzZWdtZW50cyBhcmUgIm5vcm1hbCBjb252ZXJzaW9uIG1hdGgiLgogICAgZm9yIChsZXQgaiA9IDE7IGogPCBzcGxpbmVzLmxlbmd0aDsgaisrKSB7CiAgICAgIHExID0gcTI7CiAgICAgIHEyID0gcDsKICAgICAgcCA9IHNwbGluZXNbal07CiAgICAgIHEzID0gc3BsaW5lc1tqICsgMV0gPz8gb3BzW2ldID8/IG9wc1swXTsKICAgICAgYmV6aWVycy5wdXNoKC4uLnRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHExLCBxMiwgcCwgcTMsIG9wcywgaSkpOwogICAgfQoKICAgIC8vIFRoZSBsYXN0IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCBoYW5kbGluZyB0bwogICAgLy8gZW5zdXJlIHRoZSBhcnJpdmFsIHRhbmdlbnQgaXMgY29ycmVjdC4KICAgIHEzID0gb3BzW2ldID8/IG9wc1swXTsKICAgIHE0ID0gb3BzW2kgKyAxXSA/PyBvcHNbMV07CiAgICBiZXppZXJzLnB1c2goLi4udGhpcy5sYXN0U3BsaW5lVG9CZXppZXIocTIsIHAsIHEzLCBxNCwgb3BzLCBpKSk7CgogICAgcmV0dXJuIGJlemllcnM7CiAgfQoKICAvLyBwMyBpcyBvdXIgcHJpbmNpcGFsIHBvaW50CiAgZmlyc3RTcGxpbmVUb0JlemllcihwMSwgcDIsIHAzLCBwNCwgb3BzLCBpKSB7CiAgICAvLyBSZXBvc2l0aW9uIHAxIHNvIHRoYXQgdGhlIHRhbmdlbnQgYXQKICAgIC8vIHAyIHdpbGwgbWF0Y2ggdGhlIGFjdHVhbCB0YW5nZW50IGF0IHAyLgogICAgcDEgPSB0aGlzLnVwZGF0ZUZyb21UYW5nZW50KHAxLCBwMiwgcDMpOwogICAgcmV0dXJuIHRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHAxLCBwMiwgcDMsIHA0LCBvcHMsIGkpOwogIH0KCiAgLy8gcDIgaXMgb3VyIHByaW5jaXBhbCBwb2ludAogIGxhc3RTcGxpbmVUb0JlemllcihwMSwgcDIsIHAzLCBwNCwgb3BzLCBpKSB7CiAgICAvLyBSZXBvc2l0aW9uIHA0IHNvIHRoYXQgdGhlIHRhbmdlbnQgYXQKICAgIC8vIHAzIHdpbGwgbWF0Y2ggdGhlIGFjdHVhbCB0YW5nZW50IGF0IHAzLgogICAgcDQgPSB0aGlzLnVwZGF0ZUZyb21UYW5nZW50KHA0LCBwMywgcDIpOwogICAgcmV0dXJuIHRoaXMuZnVsbFNwbGluZVRvQmV6aWVyKHAxLCBwMiwgcDMsIHA0LCBvcHMsIGkpOwogIH0KCiAgLy8gY3JlYXRlIHRoZSBCZXppZXIgZXF1aXZhbGVudCBvZiBwMi0tcDMKICBmdWxsU3BsaW5lVG9CZXppZXIocDEsIHAyLCBwMywgcDQsIG9wcywgaSkgewogICAgY29uc3QgVCA9IHAzLlQgPz8gcDIuVCA/PyAxOwogICAgY29uc3QgdGVuc2lvbiA9IDYgKiBUOwogICAgcmV0dXJuIFsKICAgICAgewogICAgICAgIGJlemllcjogdHJ1ZSwKICAgICAgICB4OiBwMi54ICsgKHAzLnggLSBwMS54KSAvIHRlbnNpb24sCiAgICAgICAgeTogcDIueSArIChwMy55IC0gcDEueSkgLyB0ZW5zaW9uLAogICAgICB9LAogICAgICB7CiAgICAgICAgYmV6aWVyOiB0cnVlLAogICAgICAgIHg6IHAzLnggLSAocDQueCAtIHAyLngpIC8gdGVuc2lvbiwKICAgICAgICB5OiBwMy55IC0gKHA0LnkgLSBwMi55KSAvIHRlbnNpb24sCiAgICAgIH0sCiAgICAgIHsgYmV6aWVyOiB0cnVlLCB4OiBwMy54LCB5OiBwMy55IH0sCiAgICBdOwogIH0KCiAgdXBkYXRlRnJvbVRhbmdlbnQocTEsIHEyLCBwMykgewogICAgLy8gTm8gbWF0dGVyIHdoZXRoZXIgcTEgYW5kIHEyIGFyZSBsaW5lIG9yCiAgICAvLyBiZXppZXIgY29vcmRpbmF0ZXMsIHRoZSBsb2dpYyBpcyB0aGUgc2FtZS4KICAgIHJldHVybiB7CiAgICAgIHRhbmdlbnRDb3JyZWN0aW9uOiB0cnVlLAogICAgICB4OiBwMy54ICsgKHExLnggLSBxMi54KSwKICAgICAgeTogcDMueSArIChxMS55IC0gcTIueSksCiAgICB9OwogIH0KfQoKLyoqCiAqIC4uLmRvY3MgZ28gaGVyZS4uLgogKi8KY2xhc3MgU2hhcGUgewogIHNlZ21lbnRzID0gW107CiAgcmVzaXphYmxlID0gZmFsc2U7CiAgb3ggPSAwOwogIG95ID0gMDsKCiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLm5ld1NlZ21lbnQoKTsKICB9CgogIG1ha2VNb3ZhYmxlKG1vdmFibGUgPSB0cnVlKSB7CiAgICBpZiAobW92YWJsZSkgewogICAgICBzZXRNb3ZhYmxlKHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgdW5zZXRNb3ZhYmxlKHRoaXMpOwogICAgfQogIH0KCiAgYWxsb3dSZXNpemluZyhhbGxvd2VkID0gdHJ1ZSkgewogICAgdGhpcy5yZXNpemFibGUgPSBhbGxvd2VkOwogIH0KCiAgY2xvc2UoKSB7CiAgICB0aGlzLm5ld1NlZ21lbnQodHJ1ZSk7CiAgfQoKICBuZXdTZWdtZW50KGNsb3NlQ3VycmVudCA9IGZhbHNlKSB7CiAgICBjb25zdCB7IHNlZ21lbnRzIH0gPSB0aGlzOwogICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gc2VnbWVudHMucHVzaChuZXcgU2VnbWVudCgpKTsKICAgIH0KICAgIGNvbnN0IGN1cnJlbnQgPSBzZWdtZW50cy5hdCgtMSk7CiAgICBpZiAoY3VycmVudD8ucG9pbnRzLmxlbmd0aCB8fCBjdXJyZW50Py5pbnN0cnVjdGlvbnMubGVuZ3RoKSB7CiAgICAgIGlmIChjbG9zZUN1cnJlbnQpIGN1cnJlbnQuY2xvc2UoKTsKICAgICAgc2VnbWVudHMucHVzaChuZXcgU2VnbWVudCgpKTsKICAgIH0KICB9CgogIGFkZCh4LCB5KSB7CiAgICBjb25zdCBzZWdtZW50ID0gdGhpcy5zZWdtZW50cy5hdCgtMSk7CiAgICBsZXQgcHRzOwogICAgaWYgKHNlZ21lbnQuaW5zdHJ1Y3Rpb25zLmxlbmd0aCkgewogICAgICBwdHMgPSBzZWdtZW50LmxpbmVUbyh4LCB5KTsKICAgIH0gZWxzZSB7CiAgICAgIHB0cyA9IHNlZ21lbnQubW92ZVRvKHgsIHkpOwogICAgfQogICAgdGhpcy5yZWNvcmRQb2ludHMocHRzKTsKICB9CgogIHJlY29yZFBvaW50cyhwdHMpIHsKICAgIGNvbnN0IHNlZ21lbnQgPSB0aGlzLnNlZ21lbnRzLmF0KC0xKTsKICAgIGlmICh0aGlzLnJlc2l6YWJsZSkgewogICAgICBwdHMuZm9yRWFjaCgocCkgPT4gewogICAgICAgIHAuX19vbl9tb3ZlID0gKCkgPT4gewogICAgICAgICAgc2VnbWVudC5pbnZhbGlkYXRlKCk7CiAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTsKICAgICAgICB9OwogICAgICAgIHNldE1vdmFibGUocCk7CiAgICAgIH0pOwogICAgfQogICAgdGhpcy5idWlsZEltYWdlKCk7CiAgfQoKICBtb3ZlVG8oeCwgeSkgewogICAgdGhpcy5uZXdTZWdtZW50KCk7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKS5tb3ZlVG8oeCwgeSkpOwogIH0KCiAgbGluZVRvKC4uLmFyZ3MpIHsKICAgIHRoaXMucmVjb3JkUG9pbnRzKHRoaXMuc2VnbWVudHMuYXQoLTEpPy5saW5lVG8oLi4uYXJncykpOwogIH0KCiAgY3VydmVUbyguLi5hcmdzKSB7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKT8uY3VydmVUbyguLi5hcmdzKSk7CiAgfQoKICBxdWFkVG8oLi4uYXJncykgewogICAgdGhpcy5yZWNvcmRQb2ludHModGhpcy5zZWdtZW50cy5hdCgtMSk/LnF1YWRUbyguLi5hcmdzKSk7CiAgfQoKICBzcGxpbmVUbyguLi5hcmdzKSB7CiAgICB0aGlzLnJlY29yZFBvaW50cyh0aGlzLnNlZ21lbnRzLmF0KC0xKT8uc3BsaW5lVG8oLi4uYXJncykpOwogIH0KCiAgb2Zmc2V0KHgsIHkpIHsKICAgIC8vIHRoaXMub3ggPSB4OwogICAgLy8gdGhpcy5veSA9IHk7CiAgICB0aGlzLnNlZ21lbnRzLmZvckVhY2goKHMpID0+IHMub2Zmc2V0KHgsIHkpKTsKICB9CgogIG9mZnNldFNlZ21lbnQoc2VnbWVudElkLCB4LCB5KSB7CiAgICBjb25zdCBzZWdtZW50ID0gdGhpcy5zZWdtZW50c1tzZWdtZW50SWRdOwogICAgc2VnbWVudC5vZmZzZXQoeCwgeSk7CiAgfQoKICBjb21taXQoKSB7CiAgICAvLyBjb25zdCB7IHNlZ21lbnRzLCBveCwgb3kgfSA9IHRoaXM7CiAgICAvLyBzZWdtZW50cy5mb3JFYWNoKChwKSA9PiBwLmNvbW1pdChveCwgb3kpKTsKICAgIC8vIHRoaXMub3ggPSB0aGlzLm95ID0gMDsKICAgIC8vIC8vIHJlYnVpbGQgc28gaXQncyByZWFkeSBieSB0aGUgbmV4dCByZWRyYXcKICAgIC8vIHRoaXMuYnVpbGRJbWFnZSgpOwogICAgdGhpcy5zZWdtZW50cy5mb3JFYWNoKChzKSA9PiBzLmNvbW1pdCgpKTsKICB9CgogIHJlc2V0KCkgewogICAgLy8gdGhpcy5veCA9IDA7CiAgICAvLyB0aGlzLm95ID0gMDsKICAgIC8vIC8vIHJlYnVpbGQgc28gaXQncyByZWFkeSBieSB0aGUgbmV4dCByZWRyYXcKICAgIC8vIHRoaXMuYnVpbGRJbWFnZSgpOwogICAgdGhpcy5zZWdtZW50cy5mb3JFYWNoKChzKSA9PiBzLm9mZnNldCgwLCAwKSk7CiAgfQoKICBub0ZpbGwoKSB7CiAgICB0aGlzLnNldEZpbGwoYG5vbmVgKTsKICB9CgogIHNldEZpbGwoZmlsbCkgewogICAgaWYgKHRoaXMuZmlsbFN0eWxlICE9PSBmaWxsKSB7CiAgICAgIHRoaXMuZmlsbFN0eWxlID0gZmlsbDsKICAgICAgdGhpcy5idWlsZEltYWdlKCk7CiAgICB9CiAgfQoKICBub1N0cm9rZSgpIHsKICAgIHRoaXMuc2V0U3Ryb2tlKGBub25lYCk7CiAgfQoKICBzZXRTdHJva2Uoc3Ryb2tlKSB7CiAgICBpZiAodGhpcy5zdHJva2VTdHlsZSAhPT0gc3Ryb2tlKSB7CiAgICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSBzdHJva2U7CiAgICAgIHRoaXMuYnVpbGRJbWFnZSgpOwogICAgfQogIH0KCiAgaW52YWxpZGF0ZSgpIHsKICAgIHRoaXMuX2NhY2hlZF9pbWFnZSA9IGZhbHNlOwogIH0KCiAgYnVpbGRJbWFnZSgpIHsKICAgIGNvbnN0IHsgc2hvd1BvaW50cywgZmlsbFN0eWxlLCBzdHJva2VTdHlsZSB9ID0gdGhpczsKICAgIGNvbnN0IHN2ZyA9IGA8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8c3ZnIHdpZHRoPSIke3dpZHRofXB4IiBoZWlnaHQ9IiR7aGVpZ2h0fXB4IiB2aWV3Qm94PSItJHt3aWR0aH0gLSR7aGVpZ2h0fSAkezMgKiB3aWR0aH0gJHszICogaGVpZ2h0fSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2ZXJzaW9uPSIxLjAiPgogICR7dGhpcy5zZWdtZW50cy5tYXAoKHMpID0+IHMuZ2V0U1ZHKHNob3dQb2ludHMsIGZpbGxTdHlsZSwgc3Ryb2tlU3R5bGUpKX0KPC9zdmc+YDsKICAgIGNvbnN0IGltZyA9ICh0aGlzLl9jYWNoZWRfaW1hZ2UgPSBuZXcgSW1hZ2UoKSk7CiAgICBpbWcubG9hZGVkID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUodHJ1ZSk7CiAgICB9KTsKICAgIGltZy5zcmMgPSBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2Eoc3ZnKX1gOwogIH0KCiAgc2hvd1BvaW50cyhzaG93UG9pbnRzID0gdHJ1ZSkgewogICAgaWYgKHRoaXMuc2hvd1BvaW50cyAhPT0gc2hvd1BvaW50cykgewogICAgICB0aGlzLnNob3dQb2ludHMgPSBzaG93UG9pbnRzOwogICAgICB0aGlzLmJ1aWxkSW1hZ2UoKTsKICAgIH0KICB9CgogIGFzeW5jIGRyYXcoKSB7CiAgICAvLyBpZiAoIXRoaXMuX2NhY2hlZF9pbWFnZSkgdGhpcy5idWlsZEltYWdlKCk7CiAgICAvLyBjb25zdCB7IG94LCBveSwgX2NhY2hlZF9pbWFnZSB9ID0gdGhpczsKICAgIC8vIGF3YWl0IF9jYWNoZWRfaW1hZ2UubG9hZGVkOwogICAgLy8gaW1hZ2UoX2NhY2hlZF9pbWFnZSwgb3ggLSB3aWR0aCwgb3kgLSBoZWlnaHQsIDMgKiB3aWR0aCwgMyAqIGhlaWdodCk7CiAgICBzYXZlKCk7CiAgICBzZXRTdHJva2UodGhpcy5zdHJva2VTdHlsZSk7CiAgICBzZXRGaWxsKHRoaXMuZmlsbFN0eWxlKTsKICAgIHRoaXMuc2VnbWVudHMuZm9yRWFjaCgocykgPT4gcy5kcmF3KHRoaXMuc2hvd1BvaW50cykpOwogICAgcmVzdG9yZSgpOwogIH0KCiAgaW5zaWRlKHgsIHkpIHsKICAgIGNvbnN0IHsgc2VnbWVudHMsIG94LCBveSB9ID0gdGhpczsKICAgIHJldHVybiBzZWdtZW50cwogICAgICAubWFwKChzLCBpZCkgPT4gewogICAgICAgIHMuaWQgPSBpZDsKICAgICAgICByZXR1cm4gczsKICAgICAgfSkKICAgICAgLmZpbHRlcigocykgPT4gcy5pbnNpZGUoeCAtIG94LCB5IC0gb3kpKTsKICB9Cn0KY2xhc3MgVmVjdG9yIHsKICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICB6ID0geC56OwogICAgICB5ID0geC55OwogICAgICB4ID0geC54OwogICAgfQogICAgdGhpcy54ID0geDsKICAgIHRoaXMueSA9IHk7CiAgICBpZiAoeiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHRoaXMueiA9IHo7CiAgICB9CiAgfQoKICBkaXN0KG90aGVyLCB5LCB6ID0gMCkgewogICAgaWYgKHkgIT09IHVuZGVmaW5lZCkgb3RoZXIgPSB7IHg6IG90aGVyLCB5LCB6IH07CiAgICBsZXQgc3VtID0gMDsKICAgIHN1bSArPSAodGhpcy54IC0gb3RoZXIueCkgKiogMjsKICAgIHN1bSArPSAodGhpcy55IC0gb3RoZXIueSkgKiogMjsKICAgIGxldCB6MSA9IHRoaXMueiA/IHRoaXMueiA6IDA7CiAgICBsZXQgejIgPSBvdGhlci56ID8gb3RoZXIueiA6IDA7CiAgICBzdW0gKz0gKHoxIC0gejIpICoqIDI7CiAgICByZXR1cm4gc3VtICoqIDAuNTsKICB9CgogIG5vcm1hbGl6ZShmKSB7CiAgICBsZXQgbWFnID0gdGhpcy5kaXN0KDAsIDAsIDApOwogICAgcmV0dXJuIG5ldyBWZWN0b3IoCiAgICAgIChmICogdGhpcy54KSAvIG1hZywKICAgICAgKGYgKiB0aGlzLnkpIC8gbWFnLAogICAgICAoZiAqIHRoaXMueikgLyBtYWcKICAgICk7CiAgfQoKICBnZXRBbmdsZSgpIHsKICAgIHJldHVybiAtTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7CiAgfQoKICByZWZsZWN0KG90aGVyKSB7CiAgICBsZXQgcCA9IG5ldyBWZWN0b3Iob3RoZXIueCAtIHRoaXMueCwgb3RoZXIueSAtIHRoaXMueSk7CiAgICBpZiAob3RoZXIueiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHAueiA9IG90aGVyLno7CiAgICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICAgIHAueiAtPSB0aGlzLno7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLnN1YnRyYWN0KHApOwogIH0KCiAgYWRkKG90aGVyKSB7CiAgICBsZXQgcCA9IG5ldyBWZWN0b3IodGhpcy54ICsgb3RoZXIueCwgdGhpcy55ICsgb3RoZXIueSk7CiAgICBpZiAodGhpcy56ICE9PSB1bmRlZmluZWQpIHsKICAgICAgcC56ID0gdGhpcy56OwogICAgICBpZiAob3RoZXIueiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcC56ICs9IG90aGVyLno7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwOwogIH0KCiAgc3VidHJhY3Qob3RoZXIpIHsKICAgIGxldCBwID0gbmV3IFZlY3Rvcih0aGlzLnggLSBvdGhlci54LCB0aGlzLnkgLSBvdGhlci55KTsKICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICBwLnogPSB0aGlzLno7CiAgICAgIGlmIChvdGhlci56ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwLnogLT0gb3RoZXIuejsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHA7CiAgfQoKICBzY2FsZShmID0gMSkgewogICAgaWYgKGYgPT09IDApIHsKICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoMCwgMCwgdGhpcy56ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAwKTsKICAgIH0KICAgIGxldCBwID0gbmV3IFZlY3Rvcih0aGlzLnggKiBmLCB0aGlzLnkgKiBmKTsKICAgIGlmICh0aGlzLnogIT09IHVuZGVmaW5lZCkgewogICAgICBwLnogPSB0aGlzLnogKiBmOwogICAgfQogICAgcmV0dXJuIHA7CiAgfQp9Ci8qKgogKiBFbnN1cmUgdGhhdCB0aGVyZSBpcyBubyBib3JkZXIgYXJvdW5kIHRoZSBjYW52YXMgZWxlbWVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Qm9yZGVyKDUsIGByZWRgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICB0ZXh0KGBjbGljayBtZWAsIHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJVcCh4LCB5KSB7CiAqICAgICAgIHNldEJvcmRlcig1LCBgcmVkYCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LCB5KSB7CiAqICAgICAgIG5vQm9yZGVyKCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0Qm9yZGVyfQogKi8KZnVuY3Rpb24gbm9Cb3JkZXIoKSB7CiAgc2V0Qm9yZGVyKGZhbHNlKTsKfQoKLyoqCiAqIERpc2FibGUgYm90aCBzdHJva2UgYW5kIGZpbGwgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dChgTm93IHlvdSBzZWUgbWVgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9Db2xvcigpOwogKiAgICAgICB0ZXh0KGBOb3cgeW91IGRvbid0YCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0Q29sb3J9CiAqIEBzZWUge0BsaW5rIG5vU3Ryb2tlfQogKiBAc2VlIHtAbGluayBub0ZpbGx9CiAqLwpmdW5jdGlvbiBub0NvbG9yKCkgewogIG5vRmlsbCgpOwogIG5vU3Ryb2tlKCk7Cn0KCi8qKgogKiBIaWRlIHRoZSBjdXJzb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYCNGRjAyYCk7CiAqICAgICAgIHJlY3QoMCwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgICAgc2V0Q29sb3IoYCMwRkYyYCk7CiAqICAgICAgIHJlY3Qod2lkdGgvMiwgMCwgd2lkdGgvMiwgaGVpZ2h0KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKHgsIHkpIHsKICogICAgICAgaWYgKHggPCB3aWR0aC8yKSB7CiAqICAgICAgICAgc2V0Q3Vyc29yKEFVVE8pOwogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIG5vQ3Vyc29yKCk7CiAqICAgICAgIH0KICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRDdXJzb3J9CiAqLwpmdW5jdGlvbiBub0N1cnNvcigpIHsKICBfX2NhbnZhcy5zdHlsZS5jdXJzb3IgPSBgbm9uZWA7Cn0KCi8qKgogKiBEaXNhYmxlIHRoZSBmaWxsIGNvbG9yLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHJlY3QoMjAsIDcwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBmaWxsZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHJlY3QoMzAsIDgwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBub3QgZmlsbGVkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0RmlsbH0KICovCmZ1bmN0aW9uIG5vRmlsbCgpIHsKICBzZXRGaWxsKGB0cmFuc3BhcmVudGApOwp9CgovKioKICogRGlzYWJsZSB0aGUgZGVmYXVsdCBncmlkIGJhY2tncm91bmQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgdGV4dChgY2xpY2sgbWVgLCB3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyVXAoeCwgeSkgewogKiAgICAgICBzZXRHcmlkKDIwLCBgbGlnaHRncmV5YCk7CiAqICAgICAgIHJlZHJhdygpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bih4LCB5KSB7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgICByZWRyYXcoKQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNldEdyaWR9CiAqLwpmdW5jdGlvbiBub0dyaWQoKSB7CiAgX19kcmF3X2dyaWQgPSBmYWxzZTsKfQoKLyoqCiAqIFNldCB0aGUgbGluZSBzdHJva2UgdG8gInNvbGlkIi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgc2V0TGluZURhc2goMSk7CiAqICAgICAgIGxpbmUoMCwyMCx3aWR0aCw1MCk7CiAqICAgICAgIHNldExpbmVEYXNoKDUpOwogKiAgICAgICBsaW5lKDAsMzAsd2lkdGgsOTApOwogKiAgICAgICBzZXRMaW5lRGFzaCgxLDIsMyw0KTsKICogICAgICAgbGluZSgwLDQwLHdpZHRoLDEzMCk7CiAqICAgICAgIG5vTGluZURhc2goKTsKICogICAgICAgbGluZSgwLDUwLHdpZHRoLDE4MCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0TGluZURhc2h9CiAqLwoKZnVuY3Rpb24gbm9MaW5lRGFzaCgpIHsKICBfX2N0eC5zZXRMaW5lRGFzaChbXSk7Cn0KCi8qKgogKiBEaXNhYmxlIHRoZSBzdHJva2UgY29sb3IuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKDEpOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgcmVjdCgyMCwgNzAsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiAtIDI1KTsKICogICAgICAgbm9TdHJva2UoKTsKICogICAgICAgcmVjdCg0MiwgODIsIDIwLCAyMCk7CiAqICAgICAgIHRleHQoYG5vdCBzdHJva2VkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgKyAyNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgc2V0U3Ryb2tlfQogKi8KCmZ1bmN0aW9uIG5vU3Ryb2tlKCkgewogIHNldFN0cm9rZShgdHJhbnNwYXJlbnRgKTsKfQoKLyoqCiAqIERpc2FibGUgdGV4dCBzdHJva2luZywgYnV0IG5vdCByZWd1bGFyIHNoYXBlIHN0cm9raW5nLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZSgxKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHJlY3QoMjAsIDcwLCAyMCwgMjApOwogKiAgICAgICB0ZXh0KGBzdHJva2VkYCwgd2lkdGgvMiwgaGVpZ2h0LzIgLSAyNSk7CiAqICAgICAgIG5vVGV4dFN0cm9rZSgpOwogKiAgICAgICByZWN0KDQyLCA4MiwgMjAsIDIwKTsKICogICAgICAgdGV4dChgbm90IHN0cm9rZWRgLCB3aWR0aC8yLCBoZWlnaHQvMiArIDI1KTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBzZXRUZXh0U3Ryb2tlfQogKi8KCmZ1bmN0aW9uIG5vVGV4dFN0cm9rZSgpIHsKICBzZXRUZXh0U3Ryb2tlKGZhbHNlLCB1bmRlZmluZWQpOwp9Ci8qKgogKiBBZGQgYSBzbGlkZXIgdG8geW91ciBmaWd1cmUsIGFsbG93aW5nIHVzZXJzIHRvIGNvbnRyb2wKICogYSB2YXJpYWJsZSBpbiB5b3VyIGdyYXBoaWNzIGNvZGUgZGlyZWN0bHkgYnkgaW50ZXJhY3RpbmcKICogd2l0aCB0aGF0IG9uLXBhZ2Ugc2xpZGVyLCB3aGljaCBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBpZgogKiB5b3Ugd2FudCB5b3VyIGdyYXBoaWNzIHRvIGJlIHVzZWFibGUgYnkgdXNlcnMgd2hvIGRvbid0CiAqIGhhdmUsIG9yIGNhbm5vdCB1c2UsIGEgbW91c2UuCiAqCiAqIFRoZSBgcHJvcExhYmVsYCB2YWx1ZSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlCiAqIHRoYXQgeW91ciBncmFwaGljcyBjb2RlIHVzZXMsIGFuZCBzaG91bGQgX25vdF8gYmUgInByZWFsbG9jYXRlZCIKICogaW4geW91ciBjb2RlIHdpdGggYSBjb25zdCwgbGV0LCBvciB2YXI6IGl0IHdpbGwgYXV0b21hdGljYWxseQogKiBnZXQgYWRkZWQgYXMgcGFydCBvZiB0aGUgc291cmNlIGxvYWRpbmcgcHJvY2Vzcy4KICoKICogVGhlIG9wdGlvbnMgb2JqZWN0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXM6CiAqCiAqIC0gbWluIC0gdGhlIHNsaWRlcidzIG1pbmltdW0gdmFsdWUsIGRlZmF1bHRzIHRvIDAKICogLSBtYXggLSB0aGUgc2xpZGVyJ3MgbWF4aW11bSB2YWx1ZSwgZGVmYXVsdHMgdG8gMQogKiAtIHN0ZXAgLSB0aGUgc3RlcCBzaXplLCBkZWZhdWx0cyB0byAobWF4IC0gbWluKS8xMAogKiAtIHZhbHVlIC0gdGhlIGluaXRpYWwgdmFsdWUsIGRlZmF1bHRzIHRvIChtYXggKyBtaW4pLzIKICogLSBjbGFzc2VzIC0gdGhlIENTUyBjbGFzc2VzIHRoYXQgd2lsbCBiZSB1c2VkLCBkZWZhdWx0cyB0byBgInNsaWRlciJgCiAqIC0gdHJhbnNmb3JtIC0gYSB2YWx1ZSBwcmVwcm9jZXNzb3IgIGRlZmF1bHRzIHRvICh2KSA9PiB2CiAqCiAqIFRoZSBgdHJhbnNmb3JtYCBwcmUtcHJvY2Vzc29yIHJ1bnMgYWZ0ZXIgdGhlIHVzZXIgdXBkYXRlcwogKiB0aGUgc2xpZGVyLCBidXQgYmVmb3JlIGl0cyB2YWx1ZSBnZXRzIGFzc2lnbmVkIHRvIHlvdXIgdmFyaWFibGUsCiAqIHNvIHRoYXQgeW91IGNhbiBtYXAgaXQgdG8gc29tZXRoaW5nIGVsc2UgKGZvciBpbnN0YW5jZSwgbnVtYmVycwogKiBpbiBvbmUgcmFuZ2UgdG8gbnVtYmVycyBpbiBhIGNvbXBsZXRlbHkgZGlmZmVyZW50IHJhbmdlLCBvciBldmVuCiAqIG51bWJlcnMgdG8gc3RyaW5ncyBvciBlbnRpcmUgb2JqZWN0cykKICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDQwMCwgMjAwKTsKICogICAgICAgYWRkU2xpZGVyKGBiZ0NvbG9yYCwgewogKiAgICAgICAgIG1pbjogMCwKICogICAgICAgICBtYXg6IDI1NSwKICogICAgICAgICBzdGVwOiAxLAogKiAgICAgICAgIHZhbHVlOiAyMDAsCiAqICAgICAgICAgdHJhbnNmb3JtOiAodikgPT4gewogKiAgICAgICAgICAgLy8gY29udmVydCB2IGludG8gYSBoZXggY29sb3IgY29kZQogKiAgICAgICAgICAgdiA9ICh2KS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgYDBgKTsKICogICAgICAgICAgIHJldHVybiBgIyR7dn0ke3Z9JHt2fWA7CiAqICAgICAgICAgfQogKiAgICAgICB9KTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGJnQ29sb3IpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB2YXJOYW1lIFRoZSBuYW1lIGZvciB0aGUgdmFyaWFibGUgdGhpcyBzbGlkZXIgZ2V0cyB0aWVkIHRvLgogKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBTZWUgZGVzY3JpcHRpb24KICogQHJldHVybnMge0hUTUxJbnB1dEVsZW1lbnR9IHRoZSBIVE1MIGlucHV0IGVsZW1lbnQgZm9yIHRoaXMgc2xpZGVyCiAqCiAqIEBzZWUge0BsaW5rIGNsZWFyU2xpZGVyc30KICovCmZ1bmN0aW9uIGFkZFNsaWRlcihwcm9wTGFiZWwsIGFzc2lnbiwgb3B0aW9ucyA9IHt9KSB7CiAgbGV0IHsKICAgIG1pbiwKICAgIG1heCwKICAgIHN0ZXAsCiAgICB2YWx1ZSwKICAgIGNsYXNzZXMgPSBgc2xpZGVyYCwKICAgIHRyYW5zZm9ybSA9ICh2KSA9PiB2LAogIH0gPSBvcHRpb25zOwoKICBtaW4gPSBtaW4gPT09IHVuZGVmaW5lZCA/IDAgOiBtaW47CiAgbWF4ID0gbWF4ID09PSB1bmRlZmluZWQgPyAxIDogbWF4OwogIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAobWF4IC0gbWluKSAvIDEwIDogc3RlcDsKICB2YWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAobWF4ICsgbWluKSAvIDIgOiB2YWx1ZTsKCiAgLy8gY3VzdG9tICJyb3VuZGluZyIsIHB1cmVseSBmb3Igc3RyaW5ncwogIGNvbnN0IHJvdW5kID0gKHYsIGQgPSA0KSA9PiB7CiAgICB2ID0gYCR7dn1gOwogICAgY29uc3QgZnMgPSB2LmluZGV4T2YoYC5gKTsKICAgIGlmIChmcyAhPT0gLTEpIHsKICAgICAgbGV0IHByZWMgPSBkIC0gZnMgPiAwID8gZCAtIGZzIDogMDsKICAgICAgdiA9IHYuc3Vic3RyaW5nKDAsIGZzICsgcHJlYyk7CiAgICB9CiAgICByZXR1cm4gdjsKICB9OwoKICBjb25zdCBjcmVhdGUgPSAodGFnKSA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7CgogIGxldCBzbGlkZXIgPSBjcmVhdGUoYGlucHV0YCk7CiAgc2xpZGVyLnR5cGUgPSBgcmFuZ2VgOwogIHNsaWRlci5taW4gPSBtaW47CiAgc2xpZGVyLm1heCA9IG1heDsKICBzbGlkZXIuc3RlcCA9IHN0ZXA7CiAgc2xpZGVyLnNldEF0dHJpYnV0ZShgdmFsdWVgLCB2YWx1ZSk7CiAgc2xpZGVyLnNldEF0dHJpYnV0ZShgY2xhc3NgLCBjbGFzc2VzKTsKCiAgY29uc3QgdXBkYXRlID0gKHsgdmFsdWUgfSkgPT4gewogICAgdmFsdWVGaWVsZC50ZXh0Q29udGVudCA9IHJvdW5kKHZhbHVlKTsKICAgIGFzc2lnbih0cmFuc2Zvcm0ocGFyc2VGbG9hdCh2YWx1ZSkpKTsKICAgIGlmICghcGxheWluZykgcmVkcmF3KCk7CiAgfTsKCiAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoYGlucHV0YCwgKHsgdGFyZ2V0IH0pID0+IHVwZGF0ZSh0YXJnZXQpKTsKCiAgbGV0IHRhYmxlID0gX19lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYHRhYmxlLnNsaWRlci13cmFwcGVyYCk7CiAgaWYgKCF0YWJsZSkgewogICAgdGFibGUgPSBjcmVhdGUoYHRhYmxlYCk7CiAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKGBzbGlkZXItd3JhcHBlcmApOwogICAgX19lbGVtZW50LnByZXBlbmQodGFibGUpOwogIH0KICBsZXQgdHIgPSBjcmVhdGUoYHRyYCk7CgogIGxldCB0ZCA9IGNyZWF0ZShgdGRgKTsKICBsZXQgbGFiZWwgPSBjcmVhdGUoYGxhYmVsYCk7CiAgbGFiZWwuY2xhc3NMaXN0LmFkZChgc2xpZGVyLWxhYmVsYCk7CiAgbGFiZWwuaW5uZXJIVE1MID0gcHJvcExhYmVsCiAgICAucmVwbGFjZSgvXyguKykkLywgYDxzdWI+JDE8L3N1Yj5gKQogICAgLnJlcGxhY2UoLyhcZCspLywgYDxzdWI+JDE8L3N1Yj5gKTsKICB0ZC5hcHBlbmQobGFiZWwpOwogIHRyLmFwcGVuZCh0ZCk7CgogIHRkID0gY3JlYXRlKGB0ZGApOwogIHRkLmNsYXNzTGlzdC5hZGQoYHNsaWRlci1taW5gKTsKICB0ZC50ZXh0Q29udGVudCA9IHJvdW5kKHNsaWRlci5taW4pOwogIHRyLmFwcGVuZCh0ZCk7CgogIHRkID0gY3JlYXRlKGB0ZGApOwogIHRkLndpZHRoID0gYCpgOwogIHRkLmFwcGVuZChzbGlkZXIpOwogIHRyLmFwcGVuZCh0ZCk7CgogIHRkID0gY3JlYXRlKGB0ZGApOwogIHRkLmNsYXNzTGlzdC5hZGQoYHNsaWRlci1tYXhgKTsKICB0ZC50ZXh0Q29udGVudCA9IHJvdW5kKHNsaWRlci5tYXgpOwogIHRyLmFwcGVuZCh0ZCk7CgogIHRkID0gY3JlYXRlKGB0ZGApOwogIHZhciB2YWx1ZUZpZWxkID0gY3JlYXRlKGBsYWJlbGApOyAvLyBmdW5jdGlvbiBzY29wZWQKICB2YWx1ZUZpZWxkLmNsYXNzTGlzdC5hZGQoYHNsaWRlci12YWx1ZWApOwogIHRkLmFwcGVuZCh2YWx1ZUZpZWxkKTsKICB0ci5hcHBlbmQodGQpOwogIHRkLmFkZEV2ZW50TGlzdGVuZXIoYHBvaW50ZXJkb3duYCwgKCkgPT4gewogICAgY29uc3QgdmFsdWUgPSBwcm9tcHQoYG5ldyB2YWx1ZT9gLCBzbGlkZXIudmFsdWUpOwogICAgaWYgKHZhbHVlICE9PSBudWxsKSB7CiAgICAgIHNsaWRlci52YWx1ZSA9IHZhbHVlOwogICAgICB1cGRhdGUoeyB2YWx1ZSB9KTsKICAgIH0KICB9KTsKCiAgdGFibGUuYXBwZW5kKHRyKTsKCiAgdXBkYXRlKHNsaWRlcik7CiAgcmV0dXJuIHNsaWRlcjsKfQoKLyoqCiAqIFJlbW92ZSBhbGwgc2xpZGVycyBmb3IgeW91ciBmaWd1cmUgZnJvbSB0aGUgcGFnZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgYWRkU2xpZGVyKGB4YCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgdGV4dChgY2xpY2sgdG8gY2xlYXJgLCB3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyRG93bigpIHsKICogICAgICAgY2xlYXJTbGlkZXJzKCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgYWRkU2xpZGVyfQogKi8KCmZ1bmN0aW9uIGNsZWFyU2xpZGVycygpIHsKICBjb25zdCB0YWJsZSA9IF9fZWxlbWVudC5xdWVyeVNlbGVjdG9yKGB0YWJsZS5zbGlkZXItd3JhcHBlcmApOwogIGlmICh0YWJsZSkgdGFibGUuaW5uZXJIVE1MID0gYGA7Cn0KCi8qKgogKiBBZGQgYSBidXR0b24gYmVsb3cgeW91ciBmaWd1cmUgdGhhdCBjYW4gdHJpZ2dlciBldmVudC1iYXNlZAogKiBjb2RlLCB3aGljaCBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBpZiB5b3Ugd2FudCB5b3VyIGdyYXBoaWNzCiAqIHRvIGJlIHVzZWFibGUgYnkgdXNlcnMgd2hvIGRvbid0IGhhdmUsIG9yIGNhbm5vdCB1c2UsIGEgbW91c2UuCiAqCiAqIG9uQ2xpY2sgaXMgc2ltaWxhciB0byB0aGUgc3RhbmRhcmQgSlMgZXZlbnQgaGFuZGxlciwgZXhjZXB0CiAqIHRoYXQgdGhlIGNhbGwgYXJndW1lbnQgaXMgYSByZWZlcmVuY2UgdG8geW91ciBidXR0b24sIG5vdAogKiB0aGUgY2xpY2sgZXZlbnQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBjb2xvcnMgPSBbYHdoaXRlYCwgYGJsYWNrYF07CiAqICAgICBsZXQgYmdDb2xvciA9IDA7CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIGFkZEJ1dHRvbihgZmxpcCBiYWNrZ3JvdW5kYCwgKGJ1dHRvbikgPT4gewogKiAgICAgICAgIGJnQ29sb3IgPSAtKGJnQ29sb3IgLSAxKTsKICogICAgICAgICByZWRyYXcoKTsKICogICAgICAgfSk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihjb2xvcnNbYmdDb2xvcl0pOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCBUaGUgdGV4dCBsYWJlbCBmb3IgeW91ciBidXR0b24KICogQHBhcmFtIHtGdW5jdGlvbn0gb25DbGljayBUaGUgY2xpY2sgaGFuZGxpbmcgZnVuY3Rpb24sIHNlZSBkZXNjcmlwdGlvbi4KICogQHJldHVybnMge0hUTUxCdXR0b25FbGVtZW50fSBUaGUgYnV0dG9uIGVsZW1lbnQgdGhpcyBhZGRlZCB0byB0aGUgcGFnZQogKgogKiBAc2VlIHtAbGluayBjbGVhckJ1dHRvbnN9CiAqLwpmdW5jdGlvbiBhZGRCdXR0b24obGFiZWwsIG9uQ2xpY2spIHsKICBpZiAoIW9uQ2xpY2spIHRocm93IG5ldyBFcnJvcihgYSBidXR0b24gbXVzdCBoYXZlIGFuIG9uQ2xpY2sgaGFuZGxlcmApOwogIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYGJ1dHRvbmApOwogIGJ0bi5jbGFzc0xpc3QuYWRkKGBncmFwaGljcy1lbGVtZW50LWJ1dHRvbmApOwogIGJ0bi50ZXh0Q29udGVudCA9IGxhYmVsOwogIGJ0bi5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsICgpID0+IG9uQ2xpY2soYnRuKSk7CiAgX19lbGVtZW50LnByZXBlbmQoYnRuKTsKICByZXR1cm4gYnRuOwp9CgovKioKICogUmVtb3ZlIGFsbCBidXR0b25zIGZvciB5b3VyIGZpZ3VyZSBmcm9tIHRoZSBwYWdlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBhZGRCdXR0b24oYHRoaXMgZG9lcyBub3RoaW5nYCwgKCkgPT4ge30pOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHRleHQoYGNsaWNrIHRvIGNsZWFyYCwgd2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckRvd24oKSB7CiAqICAgICAgIGNsZWFyQnV0dG9ucygpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIGFkZEJ1dHRvbn0KICovCmZ1bmN0aW9uIGNsZWFyQnV0dG9ucygpIHsKICBfX2VsZW1lbnQKICAgIC5xdWVyeVNlbGVjdG9yQWxsKGBidXR0b24uZ3JhcGhpY3MtZWxlbWVudC1idXR0b25gKQogICAgLmZvckVhY2goKGUpID0+IGUucmVtb3ZlKCkpOwp9Ci8qKgogKiBEcmF3IGEgY2lyY3VsYXIgYXJjIHdpdGggcmFkaXVzIGByYCBhdCAoeCx5KSwKICogc3RhcnRpbmcgYXQgYW5nbGUgYHNgIGFuZCBlbmRpbmcgYXQgYW5nbGUgYGVgLgogKiBJZiBgd2VkZ2VgIGlzIHRydWUsIHRoaXMgd2lsbCBkcmF3IGEgY2xvc2VkCiAqIHNoYXBlIHRoYXQgaXMgYW5jaG9yZWQgYXQgKHgseSkuIElmIG9taXR0ZWQKICogb3IgZXhwbGljaXRseSBzZXQgdG8gZmFsc2UsIHRoaXMgd2lsbCBkcmF3CiAqIGFuIG9wZW4gc2hhcGUgd2l0aCBhIGZpbGwgdGhhdCBjb25uZWN0cyB0aGUKICogZmlyc3QgYW5kIGxhc3QgcG9pbnQgb24gdGhlIGFyYywgYnV0IG5vIGNsb3NpbmcKICogc3Ryb2tlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgI0YwMDJgKTsKICogICAgICAgYXJjKHdpZHRoLzIgKyAzMCwgaGVpZ2h0LzIgLSA0MCwgNDAsIDAsIDAuNjYqVEFVKTsKICogICAgICAgYXJjKHdpZHRoLzIgLSAzMCwgaGVpZ2h0LzIgKyAyMCwgNDAsIDAsIDAuNjYqVEFVLCB0cnVlKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgY2lyY3VsYXIgY2VudGVyIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGNpcmN1bGFyIGNlbnRlciB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgVGhlIHJhZGl1cyBvZiB0aGlzIGFyYyBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGUgVGhlIHN0YXJ0IGFuZ2xlIGZvciB0aGlzIGFyYyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZSBUaGUgZW5kIGFuZ2xlIGZvciB0aGlzIGFyYyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7Ym9vbGVhbn0gZHJhd1dlZGdlIEEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZHJhdyBhIHdlZGdlIG9yIGNhcHBlZCBjaXJjbGUgKGRlZmF1bHQ9Y2lyY2xlKQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcG9pbnQgVGhlIGNpcmN1bGFyIGNlbnRlciB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgVGhlIHJhZGl1cyBvZiB0aGlzIGFyYyBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGUgVGhlIHN0YXJ0IGFuZ2xlIGZvciB0aGlzIGFyYyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZSBUaGUgZW5kIGFuZ2xlIGZvciB0aGlzIGFyYyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7Ym9vbGVhbn0gZHJhd1dlZGdlIEEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZHJhdyBhIHdlZGdlIG9yIGNhcHBlZCBjaXJjbGUgKGRlZmF1bHQ9Y2lyY2xlKQogKgogKiBAc2VlIHtAbGluayBjaXJjbGV9CiAqLwpmdW5jdGlvbiBhcmMoeCwgeSwgciwgcyA9IDAsIGUgPSBUQVUsIHdlZGdlID0gZmFsc2UpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHdlZGdlID0gZTsKICAgIGUgPSBzOwogICAgcyA9IHI7CiAgICByID0geTsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICBjb25zdCBzdGVwID0gMC4xOwogIHN0YXJ0KCk7CiAgaWYgKHdlZGdlKSB2ZXJ0ZXgoeCwgeSk7CiAgbGV0IGEgPSBzOwogIHZlcnRleCh4ICsgciAqIGNvcyhzKSwgeSArIHIgKiBzaW4ocykpOwogIGZvciAoYSA9IHMgKyBzdGVwOyBhIDwgZTsgYSArPSBzdGVwKSB7CiAgICB2ZXJ0ZXgoeCArIHIgKiBjb3MoYSksIHkgKyByICogc2luKGEpKTsKICB9CiAgdmVydGV4KHggKyByICogY29zKGUpLCB5ICsgciAqIHNpbihlKSk7CiAgaWYgKHdlZGdlKSB2ZXJ0ZXgoeCwgeSk7CiAgZW5kKCk7Cn0KCi8qKgogKiBEcmF3IGEgcGFpciBvZiBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBheGVzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRCb3JkZXIoMSwgYGJsYWNrYCk7CiAqICAgICAgIHNldEdyaWQoNTAsIGBsaWdodGdyZXlgKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIHNldEN1cnNvcihgbm9uZWApOwogKiAgICAgICBjbGVhcihgI2ZmZmVmN2ApOwogKiAgICAgICBzZXRDb2xvcihgIzMzM2ApOwogKiAgICAgICB0cmFuc2xhdGUoMjUsMjUpOwogKiAgICAgICBheGVzKAogKiAgICAgICAgIGB0aW1lIChzKWAsIDAsIHdpZHRoLTUwLAogKiAgICAgICAgIGBkaXN0YW5jZSAoa20pYCwgMCwgaGVpZ2h0LTUwLAogKiAgICAgICAgICIwIiwgIjYwIiwKICogICAgICAgICAiMCIsICI1MDAiKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gaExhYmVsIHRoZSBob3Jpem9udGFsIGF4aXMgbGFiZWwKICogQHBhcmFtIHtudW1iZXJ9IGhzIHRoZSBzdGFydCAobGVmdCkgcGl4ZWwgdmFsdWUgZm9yIHRoZSBob3Jpem9udGFsIGF4aXMKICogQHBhcmFtIHtudW1iZXJ9IGhlIHRoZSBlbmQgKHJpZ2h0KSBwaXhlbCB2YWx1ZSBmb3IgdGhlIGhvcml6b250YWwgYXhpcwogKiBAcGFyYW0ge3N0cmluZ30gdkxhYmVsIHRoZSB2ZXJ0aWNhbCBheGlzIGxhYmVsCiAqIEBwYXJhbSB7bnVtYmVyfSB2cyB0aGUgc3RhcnQgKHRvcCkgcGl4ZWwgdmFsdWUgZm9yIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEBwYXJhbSB7bnVtYmVyfSB2ZSB0aGUgZW5kIChib3R0b20pIHBpeGVsIHZhbHVlIGZvciB0aGUgdmVydGljYWwgYXhpcwogKiBAcGFyYW0ge3N0cmluZ30gaHNMYWJlbD8gYW4gb3B0aW9uYWwgbGFiZWwgZm9yIHRoZSBzdGFydCAobGVmdCkgb2YgdGhlIGhvcml6b250YWwgYXhpcwogKiBAcGFyYW0ge3N0cmluZ30gaGVMYWJlbD8gYW4gb3B0aW9uYWwgbGFiZWwgZm9yIHRoZSBlbmQgKHJpZ2h0KSBvZiB0aGUgaG9yaXpvbnRhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSB2c0xhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIHN0YXJ0ICh0b3ApIG9mIHRoZSB2ZXJ0aWNhbCBheGlzCiAqIEBwYXJhbSB7c3RyaW5nfSB2ZUxhYmVsPyBhbiBvcHRpb25hbCBsYWJlbCBmb3IgdGhlIGVuZCAoYm90dG9tKSBvZiB0aGUgdmVydGljYWwgYXhpcwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIGF4ZXMoCiAgaExhYmVsLAogIGhzLAogIGhlLAogIHZMYWJlbCwKICB2cywKICB2ZSwKICBoc0xhYmVsID0gZmFsc2UsCiAgaGVMYWJlbCA9IGZhbHNlLAogIHZzTGFiZWwgPSBmYWxzZSwKICB2ZUxhYmVsID0gZmFsc2UKKSB7CiAgbGluZShocywgMCwgaGUsIDApOwogIGxpbmUoMCwgdnMsIDAsIHZlKTsKCiAgY29uc3QgaHBvcyA9IDAgLSA1OwogIHRleHQoYCR7aExhYmVsfSDihpJgLCB3aWR0aCAvIDIgKyA1LCBocG9zLCBSSUdIVCk7CiAgdGV4dChoc0xhYmVsID8gaHNMYWJlbCA6IGhzLCBocywgaHBvcywgUklHSFQpOwogIHRleHQoaGVMYWJlbCA/IGhlTGFiZWwgOiBoZSwgaGUsIGhwb3MsIFJJR0hUKTsKCiAgY29uc3QgdnBvcyA9IC01OwogIHNhdmUoKTsKICB0cmFuc2xhdGUodnBvcywgaGVpZ2h0IC8gMik7CiAgcm90YXRlKC1QSSAvIDIpOwogIHRleHQoYCR7dkxhYmVsfWAsIDAsIDAsIExFRlQpOwogIHJlc3RvcmUoKTsKICB0ZXh0KGDihpNgLCB2cG9zLCBoZWlnaHQgLyAyICsgMTYsIFJJR0hUKTsKICB0ZXh0KHZzTGFiZWwgPyB2c0xhYmVsIDogdnMsIHZwb3MsIHZzICsgNSwgUklHSFQpOwogIHRleHQodmVMYWJlbCA/IHZlTGFiZWwgOiB2ZSwgdnBvcywgdmUsIFJJR0hUKTsKfQoKLyoqCiAqIERyYXcgb25lIG9yIG1vcmUgQmV6aWVyIGN1cnZlcyBmcm9tIGFuIGFycmF5CiAqIG9mIFBvaW50IG9yIFBvaW50LWxpa2VzIHRoYXQgaW1wbGVtZW50OgogKgogKiBgYGAKICogewogKiAgIHg6IG51bWJlcgogKiAgIHk6IG51bWJlcgogKiB9CiAqIGBgYAogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgI0YwMDJgKTsKICogICAgICAgYmV6aWVyKAogKiAgICAgICAgIG5ldyBQb2ludCgyMCwgaGVpZ2h0IC0gNTUpLAogKiAgICAgICAgIG5ldyBQb2ludCgyMCwgMjUpLAogKiAgICAgICAgIHsgeDogd2lkdGggLSAyMCwgeTogMjV9LAogKiAgICAgICAgIHsgeDogd2lkdGggLSAyMCwgeTogaGVpZ2h0IC0gNTV9CiAqICAgICAgICk7CiAqICAgICAgIG5vRmlsbCgpCiAqICAgICAgIGJlemllcigKICogICAgICAgICBuZXcgUG9pbnQoMCwgaGVpZ2h0IC0gMjApLAogKiAgICAgICAgIG5ldyBQb2ludCh3aWR0aCAtIDIwLCBoZWlnaHQgLSAyMCksCiAqICAgICAgICAgeyB4OiAyMCwgeTogMjB9LAogKiAgICAgICAgIHsgeDogd2lkdGgsIHk6IDIwfQogKiAgICAgICApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyWzhdfSAuLi5jb29yZGluYXRlcyBFaWdodCB4LCB5IHZhbHVlcy4KICogQHBhcmFtIHtudW1iZXJbNm5dfSAuLi5hZGRpdGlvbmFsQ29vcmRpbmF0ZXM/IE11bHRpcGxlcyBvZiBzaXggeCwgeSB2YWx1ZXMuCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlWzRdfSAuLi5jb29yZGluYXRlcyBGb3VyIHt4LHl9IGNvb3JkaW5hdGVzLgogKiBAcGFyYW0ge1BvaW50TGlrZVszbl19IC4uLmFkZGl0aW9uYWxDb29yZGluYXRlcz8gTXVsdGlwbGVzIG9mIHRocmVlIHt4LHl9IGNvb3JkaW5hdGVzLgogKgogKiBAc2VlIHtAbGluayBic3BsaW5lfQogKiBAc2VlIHtAbGluayBzcGxpbmV9CiAqLwpmdW5jdGlvbiBiZXppZXIoLi4uYXJncykgewogIGxldCBwb2ludHMgPSBhcmdzOwoKICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IGBudW1iZXJgKSB7CiAgICBwb2ludHMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikgewogICAgICBwb2ludHMucHVzaCh7IHg6IGFyZ3NbaV0sIHk6IGFyZ3NbaSArIDFdIH0pOwogICAgfQogIH0KCiAgY29uc3QgYiA9ICh0LCBhLCBiLCBjLCBkKSA9PiB7CiAgICBjb25zdCBtdCA9IDEgLSB0OwogICAgcmV0dXJuIGEgKiBtdCAqKiAzICsgMyAqIGIgKiBtdCAqKiAyICogdCArIDMgKiBjICogbXQgKiB0ICoqIDIgKyBkICogdCAqKiAzOwogIH07CgogIGxldCBbcDAsIC4uLnJlc3RdID0gcG9pbnRzOwogIHN0YXJ0KCk7CiAgZm9yIChsZXQgaSA9IDAsIGUgPSByZXN0Lmxlbmd0aDsgaSA8IGU7IGkgKz0gMykgewogICAgbGV0IFtwMSwgcDIsIHAzXSA9IHJlc3Quc2xpY2UoaSwgaSArIDMpOwogICAgaWYgKHAxICYmIHAyICYmIHAzKSB7CiAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMTsgdCArPSAwLjAxKSB7CiAgICAgICAgdmVydGV4KGIodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCksIGIodCwgcDAueSwgcDEueSwgcDIueSwgcDMueSkpOwogICAgICB9CiAgICAgIHZlcnRleChwMy54LCBwMy55KTsKICAgICAgcDAgPSBwMzsKICAgIH0KICB9CiAgZW5kKCk7Cn0KCi8qKgogKiBEcmF3IGEgQi1zcGxpbmUgdXNpbmcgZm91ciBvciBtb3JlIFBvaW50IG9yCiAqIFBvaW50LWxpa2VzIHRoYXQgaW1wbGVtZW50OgogKgogKiBgYGAKICogewogKiAgIHg6IG51bWJlcgogKiAgIHk6IG51bWJlcgogKiB9CiAqIGBgYAogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHJhbmdlKDAsIFRBVSwgUEkgLyA1LCAoYSkgPT4gcG9pbnRzLnB1c2goCiAqICAgICAgICAgbmV3IFBvaW50KAogKiAgICAgICAgICAgcmFuZG9tKDMwKSArIDUwICogY29zKGEpLAogKiAgICAgICAgICAgcmFuZG9tKDMwKSArIDUwICogc2luKGEpCiAqICAgICAgICAgKQogKiAgICAgICApKTsKICogICAgICAgc2V0TW92YWJsZSguLi5wb2ludHMpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpOwogKiAgICAgICBub1N0cm9rZSgpOwogKiAgICAgICBzZXRGaWxsKGAjMDAwMmApOwogKiAgICAgICBic3BsaW5lKC4uLnBvaW50cyk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgcG9pbnRzLmZvckVhY2gocCA9PiBwb2ludChwKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJbOF19IC4uLmNvb3JkaW5hdGVzIEVpZ2h0IHgsIHkgdmFsdWVzLgogKiBAcGFyYW0ge251bWJlclsybl19IC4uLmFkZGl0aW9uYWxDb29yZGluYXRlcz8gTXVsdGlwbGVzIG9mIHgsIHkgdmFsdWVzLgogKgogKiBAcGFyYW0ge1BvaW50TGlrZVs0XX0gLi4uY29vcmRpbmF0ZXMgRm91ciB7eCx5fSBjb29yZGluYXRlcy4KICogQHBhcmFtIHtQb2ludExpa2Vbbl19IC4uLmFkZGl0aW9uYWxDb29yZGluYXRlcz8gWmVybyBvciBtb3JlIHt4LHl9IGNvb3JkaW5hdGVzLgogKgogKiBAc2VlIHtAbGluayBiZXppZXJ9CiAqIEBzZWUge0BsaW5rIHNwbGluZX0KICovCgpmdW5jdGlvbiBic3BsaW5lKC4uLmFyZ3MpIHsKICBsZXQgb3BlbiA9IHRydWU7CiAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IGBib29sZWFuYCkgewogICAgb3BlbiA9IGFyZ3Muc3BsaWNlKGFyZ3MubGVuZ3RoIC0gMSwgMSlbMF07CiAgfQoKICBsZXQgcG9pbnRzID0gYXJnczsKCiAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBgbnVtYmVyYCkgewogICAgcG9pbnRzID0gW107CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgcG9pbnRzLnB1c2goeyB4OiBhcmdzW2ldLCB5OiBhcmdzW2kgKyAxXSB9KTsKICAgIH0KICB9CgogIHN0YXJ0KCk7CiAgbmV3IEJTcGxpbmUocG9pbnRzLCBvcGVuKS5nZXRMVVQoKS5mb3JFYWNoKChwKSA9PiB2ZXJ0ZXgocC54LCBwLnkpKTsKICBlbmQoKTsKfQoKLyoqCiAqIERyYXcgYSBjaXJjbGUgd2l0aCByYWRpdXMgYHJgIGF0IGB4LHlgLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgI0YwMDJgKTsKICogICAgICAgY2lyY2xlKHdpZHRoLzIsIGhlaWdodC8yLCA4MCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGNpcmNsZSdzIGNlbnRlciB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSBjaXJjbGUncyBjZW50ZXIgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0gciBUaGUgY2lyY2xlJ3MgcmFkaXVzIGluIHBpeGVscwogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgY2lyY2xlJ3MgY2VudGVyIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHIgVGhlIGNpcmNsZSdzIHJhZGl1cyBpbiBwaXhlbHMKICoKICogQHNlZSB7QGxpbmsgYXJjfQogKi8KZnVuY3Rpb24gY2lyY2xlKHgsIHksIHIpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHIgPSB5OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIGFyYyh4LCB5LCByLCAwLCBUQVUsIGZhbHNlKTsKfQoKLyoqCiAqIENsZWFyIHRoZSBjYW52YXMsIGFuZCBzZXQgaXQgdG8gYSBzcGVjaWZpYyAoQ1NTKSBjb2xvdXIuCiAqIElmIG5vIGBub0dyaWQoKWAgY2FsbCB3YXMgbWFkZSwgdGhpcyB3aWxsIHRoZW4gYWxzbyBkcmF3CiAqIHRoZSBiYWNrZ3JvdW5kIGdyaWQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgcGlua2ApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7Y29sb3J9IGNvbG9yPyBUaGUgKENTUykgYmFja2dyb3VuZCBjb2xvciB0byB1c2UgKGRlZmF1bHQgPSBgd2hpdGVgKQogKi8KZnVuY3Rpb24gY2xlYXIoY29sb3IgPSBgd2hpdGVgKSB7CiAgc2F2ZSgpOwogIF9fY2FudmFzLnN0eWxlLmJhY2tncm91bmQgPSBjb2xvcjsKICBfX2NhbnZhcy53aWR0aCA9IHdpZHRoOwogIF9fY3R4ID0gX19jYW52YXMuZ2V0Q29udGV4dChgMmRgKTsKICBpZiAoX19kcmF3X2dyaWQpIGdyaWQoKTsKICByZXN0b3JlKCk7Cn0KCi8qKgogKiBDb3VudGVycGFydCB0byBzdGFydCgpLCBmaW5hbGl6ZXMgdGhlIGN1cnJlbnQgc2hhcGUgYW5kCiAqIGNvbG91cnMgaXQuIElmIGBjbG9zZWAgaXMgdHJ1ZSwgaXQgd2lsbCBjbG9zZSB0aGUgcGF0aAogKiBiZWZvcmUgY29sb3VyaW5nLgogKgogKiBJZiBgbm9GaWxsKClgIGlzIGluIGVmZmVjdCwgdGhlIHNoYXBlIHdpbGwgbm90IGJlIGZpbGxlZC4KICogaWYgYG5vU3Ryb2tlKClgIGlzIGluIGVmZmVjdCwgdGhlIHNoYXBlIG91dGxpbmUgd2lsbCBub3QgYmUgY29sb3VyZWQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGBnb2xkYCk7CiAqICAgICAgIHN0YXJ0KCk7CiAqICAgICAgIHZlcnRleCgwLGhlaWdodC8yKTsKICogICAgICAgdmVydGV4KHdpZHRoLzIsIDApOwogKiAgICAgICB2ZXJ0ZXgod2lkdGgsIGhlaWdodC8yKTsKICogICAgICAgdmVydGV4KHdpZHRoLzIsIGhlaWdodCk7CiAqICAgICAgIGVuZCh0cnVlKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlPyBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gY2xvc2UgdGhlIHBhdGggKGRlZmF1bHQgPSBmYWxzZSkKICoKICogQHNlZSB7QGxpbmsgc3RhcnR9CiAqIEBzZWUge0BsaW5rIHZlcnRleH0KICogQHNlZSB7QGxpbmsgZW5kU2hhcGV9CiAqLwpmdW5jdGlvbiBlbmQoY2xvc2UgPSBmYWxzZSkgewogIGlmIChjbG9zZSkgX19jdHguY2xvc2VQYXRoKCk7CiAgX19jdHguZmlsbCgpOwogIF9fY3R4LnN0cm9rZSgpOwogIGlmIChfX2N0eC5saW5lV2lkdGggJSAyID09PSAxKSB7CiAgICBfX2N0eC50cmFuc2xhdGUoLTAuNSwgLTAuNSk7CiAgfQp9CgovKioKICogRHJhdyBhbiBpbWFnZSBpbiBhIGdpdmVuIGxvY2F0aW9uIHdpdGggYW4gb3B0aW9uYWwKICogd2lkdGggYW5kIGhlaWdodC4gSWYgb21pdHRlZCwgdGhlIHdpZHRoIGFuZCBoZWlnaHQKICogd2lsbCBiZSB0aGUgaW1hZ2UncyBvd24gZGltZW5zaW9ucy4gTm90ZSB0aGF0IHRoZQogKiBpbWFnZSBtYXkgYmUgZWl0aGVyIGEgVVJMLCBvciBhbiA8aW1nPiBlbGVtZW50LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBhc3luYyBmdW5jdGlvbjogaWYgaXQgaXMgaW1wb3J0YW50CiAqIHRoYXQgbm90aGluZyBnZXRzIGRyYXduIHVudGlsIHRoZSBpbWFnZSBoYXMgYmVlbiBkcmF3biwKICogcmVtZW1iZXIgdG8gYGF3YWl0YCBpdHMgY2FsbC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGFzeW5jIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBhd2FpdCBpbWFnZShgaHR0cHM6Ly9kdW1teWltYWdlLmNvbS8xMDB4MTAwYCwgNTAsIDUwLCAxMDAsIDEwMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtJbWFnZXxzdHJpbmd9IGltZ09yVVJMIFRoZSBpbWFnZSB0byBkcmF3IGVpdGhlciBhcyBJbWFnZSBvYmplY3QsIG9yIGltYWdlIFVSTC4KICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGRyYXcgcG9zaXRpb24ncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSBkcmF3IHBvc2l0aW9uJ3MgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0gdyBUaGUgd2lkdGggb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcGFyYW0ge251bWJlcn0gaCBUaGUgaGVpZ2h0IG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICogQHJldHVybnMge0ltYWdlfSBUaGUgZHJhd24gaW1hZ2UKICoKICogQHBhcmFtIHtJbWFnZXxzdHJpbmd9IGltZ09yVVJMIFRoZSBpbWFnZSB0byBkcmF3IGVpdGhlciBhcyBJbWFnZSBvYmplY3QsIG9yIGltYWdlIFVSTC4KICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIGRyYXcgcG9zaXRpb24gYXMge3gseX0gY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0gdyBUaGUgd2lkdGggb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKiBAcGFyYW0ge251bWJlcn0gaCBUaGUgaGVpZ2h0IG92ZXIgd2hpY2ggdG8gZHJhdyB0aGUgaW1hZ2UKICogQHJldHVybnMge0ltYWdlfSBUaGUgZHJhd24gaW1hZ2UKICovCmFzeW5jIGZ1bmN0aW9uIGltYWdlKGltZywgeCA9IDAsIHkgPSAwLCB3LCBoKSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICBoID0gdzsKICAgIHcgPSB5OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQoKICBpZiAodHlwZW9mIGltZyA9PT0gYHN0cmluZ2ApIHsKICAgIGltZyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgaW1nYCk7CiAgICAgIHRhZy5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHRhZyk7CiAgICAgIHRhZy5vbmVycm9yID0gKCkgPT4gcmVqZWN0KCk7CiAgICAgIHRhZy5zcmMgPSBpbWc7CiAgICB9KTsKICB9CiAgX19jdHguZHJhd0ltYWdlKGltZywgeCwgeSwgdyB8fCBpbWcud2lkdGgsIGggfHwgaW1nLmhlaWdodCk7CiAgcmV0dXJuIGltZzsKfQoKLyoqCiAqIERyYXcgYSBsaW5lIGZyb20gb25lIGNvb3JkaW5hdGUgdG8gYW5vdGhlci4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHJhbmdlKDAsaGVpZ2h0LDIwLCAoaSkgPT4gbGluZSgwLCAwLCB3aWR0aCwgaSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4MSBUaGUgZmlyc3QgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MSBUaGUgZmlyc3QgcG9pbnQncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB4MiBUaGUgc2Vjb25kIHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTIgVGhlIHNlY29uZCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAxIFRoZSBmaXJzdCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpa2V9IHAyIFRoZSBzZWNvbmQgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqLwpmdW5jdGlvbiBsaW5lKHgxLCB5MSwgeDIsIHkyKSB7CiAgaWYgKHgxLnggIT09IHVuZGVmaW5lZCAmJiB4MS55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkyID0geTEueTsKICAgIHgyID0geTEueDsKICAgIHkxID0geDEueTsKICAgIHgxID0geDEueDsKICB9CgogIHN0YXJ0KCk7CiAgdmVydGV4KHgxLCB5MSk7CiAgdmVydGV4KHgyLCB5Mik7CiAgZW5kKCk7Cn0KCi8qKgogKiBQbG90IGEgeT1mKHgpIGZ1bmN0aW9uLiBUaGUgaW5wdXQgdG8gdGhlIGZ1bmN0aW9uCiAqIHdpbGwgc3BhbiB0aGUgaW50ZXJ2YWwgW2EsYl0gdXNpbmcgdGhlIGluZGljYXRlZAogKiBudW1iZXIgb2Ygc3RlcHMsIGFuZCB0aGUgcmUgc3VsdCBtYXkgYmUgc2NhbGVkIGJvdGgKICogaW4gdGhlIHggYW5kIHkgZGlyZWN0aW9uIGluIG9yZGVyIHRvIGRyYXcgc29tZXRoaW5nCiAqIHRoYXQgeW91IGNhbiBhY3R1YWxseSBzZWUgKGUuZy4gaWYgeW91J3JlIHBsb3R0aW5nCiAqIHRvIHRoZSBkb21haW4gWzAsMV0geW91IHdvdWxkbid0IGJlIGFibGUgdG8gc2VlIHRoZQogKiByZXN1bHQgd2l0aG91dCBzY2FsaW5nKS4KICoKICogVGhpcyBmdW5jdGlvbiBpcyBhd2FyZSBvZiwgYW5kIHdpbGwgcGxvdCwgZGlzY29udGludWl0aWVzCiAqIHVzaW5nIHRoZSBzdGFuZGFyZCBvcGVuIGNpcmNsZSBub3RhdGlvbiwgdW5sZXNzIGluc3RydWN0ZWQKICogbm90IHRvIGRvIHNvIHVzaW5nIHRoZSBgaWdub3JlRGlzY29udGludWl0eWAgYm9vbGVhbiBmbGFnLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIG5vRmlsbCgpOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHRyYW5zbGF0ZSgwLCBoZWlnaHQgLyAyKTsKICogICAgICAgY29uc3QgZm4gPSAoeCkgPT4gY29zKHgpICoqIDYgLyBzaW4oeCkgLSBzaW4oeCkvMjsKICogICAgICAgcGxvdChmbiwgMCwgMipUQVUsIDEyMCwgd2lkdGggLyBUQVUsIGhlaWdodCAvIDIpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7RnVuY3Rpb259IGYgdGhlIGB5ID0gZih4KWAgZnVuY3Rpb24gdG8gcGxvdAogKiBAcGFyYW0ge251bWJlcn0gYT8gVGhlIGxvd2VyIGJvdW5kIGZvciB0aGUgaW5wdXQgdmFsdWUgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0ge251bWJlcn0gYj8gVGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgaW5wdXQgdmFsdWUgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0ge251bWJlcn0gc3RlcHM/IFRoZSBudW1iZXIgb2YgcGxvdCBwb2ludHMgdG8gcGxvdCBvdmVyIHRoZSBpbnRlcnZhbCBbYSxiXSAoZGVmYXVsdCA9IDEwMCkKICogQHBhcmFtIHtudW1iZXJ9IHhzY2FsZT8gQW4gb3B0aW9uYWwgc2NhbGluZyBmYWN0b3IgdG8gYXBwbHkgdG8gZWFjaCBwbG90IHBvaW50J3MgeCB2YWx1ZSAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSB7bnVtYmVyfSB5c2NhbGU/IEFuIG9wdGlvbmFsIHNjYWxpbmcgZmFjdG9yIHRvIGFwcGx5IHRvIGVhY2ggcGxvdCBwb2ludCdzIHkgdmFsdWUgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0ge2Jvb2xlYW59IGlnbm9yZURpc2NvbnRpbnVpdHk/IERvIG5vdCBkcmF3IHNwZWNpYWwgZWxlbWVudHMgZm9yIGRpc2NvbnRpbnVpdGllcyAoZGVmYXVsdCA9IGZhbHNlKQogKgogKiBAc2VlIHtAbGluayBwbG90RGF0YX0KICovCmZ1bmN0aW9uIHBsb3QoCiAgZiwKICBhID0gMCwKICBiID0gMSwKICBzdGVwcyA9IDEwMCwKICB4c2NhbGUgPSAxLAogIHlzY2FsZSA9IDEsCiAgaWdub3JlRGlzY29udGludWl0eSA9IGZhbHNlCikgewogIGNvbnN0IGludGVydmFsID0gYiAtIGE7CiAgc3RhcnQoKTsKICBsZXQgW3B5LCBkeSwgcGR5XSA9IFswLCAwLCAwXTsKICBjb25zdCBzdGVwID0gaW50ZXJ2YWwgLyAoc3RlcHMgLSAxKTsKICBjb25zdCBkaXNjb250aW51aXR5ID0gKGksIHgsIHkpID0+IHsKICAgIGVuZCgpOwogICAgc2F2ZSgpOwogICAgbm9GaWxsKCk7CiAgICBwb2ludCh4ICogeHNjYWxlLCBweSAqIHlzY2FsZSk7CiAgICBwb2ludCh4ICogeHNjYWxlLCB5ICogeXNjYWxlKTsKICAgIHJlc3RvcmUoKTsKICAgIHN0YXJ0KCk7CiAgfTsKICBmb3IgKGxldCBpID0gMCwgeCwgeTsgaSA8IHN0ZXBzOyBpKyspIHsKICAgIHggPSBhICsgaSAqIHN0ZXA7CiAgICB5ID0gZih4KTsKICAgIC8vIElmIGYoeCkgY2hhbmdlcyBpbiB2aW9sYXRpb24gb2Ygd2hhdCBpdHMgZicoeCkgc3VnZ2VzdGVkLAogICAgLy8gdGhhdCdzIGEgZGlzY29udGludWl0eSBhbmQgd2UgZHJhdyBhbiBhc3ltcHRvdGUuCiAgICBkeSA9ICh5IC0gcHkpICogc3RlcDsKICAgIGlmICghaWdub3JlRGlzY29udGludWl0eSkgewogICAgICBpZiAocGR5ICE9PSBudWxsICYmIHNpZ24oeSAtIHB5KSAhPT0gc2lnbihwZHkpICYmIGFicyhwZHkpID4gMC4wMSkgewogICAgICAgIGRpc2NvbnRpbnVpdHkoaSwgeCwgeSk7CiAgICAgICAgcGR5ID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICBwZHkgPSBkeTsKICAgICAgfQogICAgfQogICAgdmVydGV4KHggKiB4c2NhbGUsIHkgKiB5c2NhbGUpOwogICAgcHkgPSB5OwogIH0KICBlbmQoKTsKfQoKLyoqCiAqIFBsb3QgYSAyRCBncmFwaCB1c2luZyBhIGNvbGxlY3Rpb24gb2YgYW55LWRpbWVuc2lvbmFsIGRhdGEsCiAqIGJ5IGluZGljYXRpbmcgd2hpY2ggZGltZW5zaW9uIHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBgeGAKICogYW5kIHdoaWNoIGRpbWVuc2lvbiBzaG91bGQgYmUgdHJlYXRlZCBhcyB0aGUgYHlgLiBJZiBubyBgeGAKICogYW5kIGB5YCBhcmUgcHJvdmlkZWQsIGBkYXRhYCB3aWxsIGJlIHRyZWF0ZWQgYSAxRCBhcnJheSBhbmQKICogd2lsbCBwbG90IHdpdGggdGhlIGFycmF5IGluZGV4IGFzIGB4YCBhbmQgZWxlbWVudCBhdCB0aGF0CiAqIGluZGV4IGFzIGB5YC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgdHJhbnNsYXRlKDAsIGhlaWdodC8yKTsKICoKICogICAgICAgc2V0U3Ryb2tlKGBkYXJrZ3JlZW5gKTsKICogICAgICAgbGV0IGRhdGEgPSBhcnJheSh3aWR0aCwgKGkpID0+IFtpLCBoZWlnaHQvMiAqIHNpbihpLzI1KV0pOwogKiAgICAgICBwbG90RGF0YShkYXRhLCAwLCAxKTsKICoKICogICAgICAgc2V0U3Ryb2tlKGBwdXJwbGVgKTsKICogICAgICAgZGF0YSA9IGFycmF5KHdpZHRoLCAoaSkgPT4gKHsKICogICAgICAgICBtZWVwOiBpLAogKiAgICAgICAgIG1vb3A6IGhlaWdodC8yICogY29zKGkvMjUpCiAqICAgICAgIH0pKTsKICogICAgICAgcGxvdERhdGEoZGF0YSwgYG1lZXBgLCBgbW9vcGApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7b2JqZWN0W119IGRhdGEgVGhlIGFueS1kaW1lbnNpb25hbCBkYXRhIGZyb20gd2hpY2ggdG8gcGxvdCBvbmUgZGltZW5zaW9uIGFnYWluIGFub3RoZXIKICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4PyBUaGUgcHJvcGVydHkgbmFtZSBvciBpbmRpdmlkdWFsIGVsZW1lbnQgYXJyYXkgaW5kZXggdG8gdXNlIGFzIHggZGltZW5zaW9uCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geT8gVGhlIHByb3BlcnR5IG5hbWUgb3IgaW5kaXZpZHVhbCBlbGVtZW50IGFycmF5IGluZGV4IHRvIHVzZSBhcyB5IGRpbWVuc2lvbgogKgogKiBAc2VlIHtAbGluayBwbG90fQogKi8KZnVuY3Rpb24gcGxvdERhdGEoZGF0YSwgeCwgeSkgewogIHN0YXJ0KCk7CiAgaWYgKHggIT09IHVuZGVmaW5lZCAmJiB5ICE9PSB1bmRlZmluZWQpIHsKICAgIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgICB5ID0geC55OwogICAgICB4ID0geC54OwogICAgfQogICAgZGF0YS5mb3JFYWNoKChwKSA9PiB2ZXJ0ZXgocFt4XSwgcFt5XSkpOwogIH0gZWxzZSB7CiAgICBkYXRhLmZvckVhY2goKHksIHgpID0+IHZlcnRleCh4LCB5KSk7CiAgfQogIGVuZCgpOwp9CgovKioKICogRHJhdyBhIHBvaW50IChlaXRoZXIgZnJvbSB4L3kgb3IgcG9pbnQtbGlrZSkuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgcmFuZ2UoMCwgVEFVLCAoYSkgPT4gewogKiAgICAgICAgIHBvaW50KDQwICogY29zKGEpLCA0MCAqIHNpbihhKSk7CiAqICAgICAgIH0pOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSBwb2ludCdzIGNlbnRlciB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSBwb2ludCdzIGNlbnRlciB5IHBpeGVsIHZhbHVlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSBwb2ludCdzIGNlbnRlciB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIGNpcmNsZX0KICovCmZ1bmN0aW9uIHBvaW50KHgsIHkpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICBjaXJjbGUoeCwgeSwgMyk7Cn0KCi8qKgogKiBEcmF3IGEgcmVjdGFuZ2xlIGF0IHRoZSBzcGVjaWZpZWQgY29vcmRpbmF0ZSwgd2l0aAogKiB0aGUgc3BlY2lmaWMgd2lkdGggYW5kIGhlaWdodC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICByZWN0KDQwLCA0MCwgd2lkdGggLSA4MCwgaGVpZ2h0IC0gODApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSByZWN0J3MgY29ybmVyICB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSByZWN0J3MgY29ybmVyICB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgcmVjdDtzIGNvcmRlciB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB3IFRoZSB3aWR0aCBvdmVyIHdoaWNoIHRvIGRyYXcgdGhlIGltYWdlCiAqIEBwYXJhbSB7bnVtYmVyfSBoIFRoZSBoZWlnaHQgb3ZlciB3aGljaCB0byBkcmF3IHRoZSBpbWFnZQogKi8KZnVuY3Rpb24gcmVjdCh4LCB5LCB3LCBoKSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICBoID0gdzsKICAgIHcgPSB5OwogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQoKICBzdGFydCgpOwogIHZlcnRleCh4LCB5KTsKICB2ZXJ0ZXgoeCArIHcsIHkpOwogIHZlcnRleCh4ICsgdywgeSArIGgpOwogIHZlcnRleCh4LCB5ICsgaCk7CiAgdmVydGV4KHgsIHkpOwogIGVuZCgpOwp9CgovKioKICogRHJhdyBhIGNhcmRpbmFsIChoZXJtaXRlKSBzcGxpbmUgdGhhdCBwYXNzZXMgdGhyb3VnaCBlYWNoCiAqIHBvaW50IHByb3ZpZGVkLCB1c2luZyBhIG1hdGhlbWF0aWNhbGx5IHZpcnR1YWwgc3RhcnQgYW5kCiAqIGVuZCB0byBlbnN1cmUgdGhlIGN1cnZlIHN0YXJ0cyBhbmQgZW5kcyBhdCB0aGUgcHJvdmlkZWQKICogc3RhcnQgYW5kIGVuZCBwb2ludC4gVGhpcyBjYW4gYmUgYnlwYXNzZWQgYnkgc2V0dGluZwogKiB0aGUgYHZpcnR1YWxgIGFyZ3VtZW50IHRvIGBmYWxzZWAuCiAqCiAqIEFkZGl0aW9uYWxseSwgdGhlIHNwbGluZSdzIHRpZ2h0bmVzcywgd2hpY2ggY29udHJvbHMKICogaG93ICJiZW5keSIgdGhlIHNwbGluZSBpcyAodGhlIHRpZ2h0ZXIgdGhlIHNwbGluZSwKICogdGhlIHNoYXJwZXIgYmVuZHMgYmVjb21lKSBjYW4gYmUgY29udHJvbGxlZCBieSBzZXR0aW5nCiAqIHRoZSBgdGlnaHRuZXNzYCB2YWx1ZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IHBvaW50cyA9IFtdOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICByYW5nZSgwLCBUQVUsIFBJIC8gNSwgKGEpID0+IHBvaW50cy5wdXNoKAogKiAgICAgICAgIG5ldyBQb2ludCgKICogICAgICAgICAgIHJhbmRvbSgzMCkgKyA1MCAqIGNvcyhhKSwKICogICAgICAgICAgIHJhbmRvbSgzMCkgKyA1MCAqIHNpbihhKQogKiAgICAgICAgICkKICogICAgICAgKSk7CiAqICAgICAgIHNldE1vdmFibGUoLi4ucG9pbnRzKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTsKICogICAgICAgc2V0RmlsbChgIzAwMDJgKTsKICogICAgICAgc3BsaW5lKC4uLnBvaW50cyk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgcG9pbnRzLmZvckVhY2gocCA9PiBwb2ludChwKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICoKICogQHBhcmFtIHtQb2ludExpa2VbXX0gLi4ucG9pbnRzIFRoZSBwb2ludHMgYWNyb3NzIHdoaWNoIHRvIGZpdCBhIHNwbGluZQogKiBAcGFyYW0ge2Jvb2xlYW59IHZpcnR1YWw/IFdoZXRoZXIgb3Igbm90IHRvIGludmVudCBuZXcgbWF0aGVtYXRpY2FsIHBvaW50cyB0aGF0IGVuc3VyZSB0aGUgY3VydmUgc3RhcnRzIGFuZCBlbmRzIGF0IHRoZSBwcm92aWRlZCBzdGFydCBhbmQgZW5kIHBvaW50cy4gKGRlZmF1bHQgPSB0cnVlKQogKiBAcGFyYW0ge251bWJlcn0gdGlnaHRuZXNzPyBIb3cgdGlnaHQgdGhpcyBzcGxpbmUgc2hvdWxkIGJlIGZpdCB0aHJvdWdoIHRoZSBwb2ludHMgcHJvdmlkZWQuIFRoZSBoaWdoZXIgdGhlIHRpZ2h0bmVzcywgdGhlIG1vcmUgcG9seWdvbmFsIHRoZSBjdXJ2ZSBiZWNvbWVzIChkZWZhdWx0ID0gMSkKICoKICogQHNlZSB7QGxpbmsgYmV6aWVyfQogKiBAc2VlIHtAbGluayBic3BsaW5lfQogKi8KZnVuY3Rpb24gc3BsaW5lKC4uLmFyZ3MpIHsKICBsZXQgcG9pbnRzID0gYXJnczsKICBsZXQgdmlydHVhbCA9IHRydWU7CiAgbGV0IFQgPSAxOwoKICAvLyBpZiB0aGUgbGFzdCBvciBzaW5nbGUtdG8tbGFzdCBpcyBhIGJvb2wsIHRoYXQncyBgdmlydHVhbGA6CiAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IGBib29sZWFuYCkgewogICAgW3ZpcnR1YWxdID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAxLCAxKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMl0gPT09IGBib29sZWFuYCkgewogICAgW3ZpcnR1YWxdID0gYXJncy5zcGxpY2UoYXJncy5sZW5ndGggLSAyLCAxKTsKICB9CgogIC8vIElmIHRoaXMgbWFrZXMgdGhlIG51bWJlciBvZiBhcmdzIG9kZCwgdGhlIGxhc3QgYXJnIGlzIFQKICBpZiAoYXJncy5sZW5ndGggJSAyID09PSAxKSB7CiAgICBbVF0gPSBhcmdzLnNwbGljZShhcmdzLmxlbmd0aCAtIDEsIDEpOwogIH0KCiAgLy8gdGhlbiwgd2UgY2FuIGNvbnZlcnQKICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IGBudW1iZXJgKSB7CiAgICBwb2ludHMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMikgewogICAgICBwb2ludHMucHVzaCh7IHg6IGFyZ3NbaV0sIHk6IGFyZ3NbaSArIDFdIH0pOwogICAgfQogIH0KCiAgbGV0IGNwb2ludHMgPSBwb2ludHM7CiAgaWYgKHZpcnR1YWwpIHsKICAgIGNvbnN0IGYwID0gcG9pbnRzWzBdLAogICAgICBmMSA9IHBvaW50c1sxXSwKICAgICAgZjIgPSBwb2ludHNbMl0sCiAgICAgIGZzbSA9IG5ldyBWZWN0b3IoZjAueCAvIDIgKyBmMi54IC8gMiwgZjAueSAvIDIgKyBmMi55IC8gMiksCiAgICAgIGYwciA9IG5ldyBWZWN0b3IoZjApLnJlZmxlY3QoZjEpLAogICAgICBmc3IgPSBmc20ucmVmbGVjdChmMSksCiAgICAgIGZuID0gbmV3IFZlY3RvcihmMHIueCAvIDIgKyBmc3IueCAvIDIsIGYwci55IC8gMiArIGZzci55IC8gMiksCiAgICAgIGwyID0gcG9pbnRzLmF0KC0zKSwKICAgICAgbDEgPSBwb2ludHMuYXQoLTIpLAogICAgICBsMCA9IHBvaW50cy5hdCgtMSksCiAgICAgIGxzbSA9IG5ldyBWZWN0b3IobDAueCAvIDIgKyBsMi54IC8gMiwgbDAueSAvIDIgKyBsMi55IC8gMiksCiAgICAgIGwwciA9IG5ldyBWZWN0b3IobDApLnJlZmxlY3QobDEpLAogICAgICBsbiA9IG5ldyBWZWN0b3IobDByLnggLyAyICsgbHNtLnggLyAyLCBsMHIueSAvIDIgKyBsc20ueSAvIDIpOwogICAgY3BvaW50cyA9IFtmbiwgLi4ucG9pbnRzLCBsbl07CiAgfQoKICAvLyBmb3VyIHBvaW50IHNsaWRpbmcgd2luZG93IG92ZXIgdGhlIHNlZ21lbnQKICBjb25zdCBiZXppZXJQb2ludHMgPSBbXTsKICBmb3IgKGxldCBpID0gMCwgZSA9IGNwb2ludHMubGVuZ3RoIC0gMzsgaSA8IGU7IGkrKykgewogICAgbGV0IFtjMSwgYzIsIGMzLCBjNF0gPSBjcG9pbnRzLnNsaWNlKGksIGkgKyA0KTsKICAgIGxldCBwMiA9IHsKICAgICAgeDogYzIueCArIChjMy54IC0gYzEueCkgLyAoNiAqIFQpLAogICAgICB5OiBjMi55ICsgKGMzLnkgLSBjMS55KSAvICg2ICogVCksCiAgICB9OwogICAgbGV0IHAzID0gewogICAgICB4OiBjMy54IC0gKGM0LnggLSBjMi54KSAvICg2ICogVCksCiAgICAgIHk6IGMzLnkgLSAoYzQueSAtIGMyLnkpIC8gKDYgKiBUKSwKICAgIH07CiAgICBpZiAoaSA9PT0gMCkgYmV6aWVyUG9pbnRzLnB1c2goYzIpOwogICAgYmV6aWVyUG9pbnRzLnB1c2gocDIsIHAzLCBjMyk7CiAgfQoKICBiZXppZXIoLi4uYmV6aWVyUG9pbnRzKTsKfQoKLyoqCiAqIFN0YXJ0cyBhIChuZXcpIHNoYXBlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2V0RmlsbChgZ29sZGApOwogKiAgICAgICBzdGFydCgpOwogKiAgICAgICB2ZXJ0ZXgoMCxoZWlnaHQvMik7CiAqICAgICAgIHZlcnRleCh3aWR0aC8yLCAwKTsKICogICAgICAgdmVydGV4KHdpZHRoLCBoZWlnaHQvMik7CiAqICAgICAgIHZlcnRleCh3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgICBlbmQodHJ1ZSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHNlZSB7QGxpbmsgZW5kfQogKiBAc2VlIHtAbGluayB2ZXJ0ZXh9CiAqIEBzZWUge0BsaW5rIHN0YXJ0U2hhcGV9CiAqLwpmdW5jdGlvbiBzdGFydCgpIHsKICBpZiAoX19jdHgubGluZVdpZHRoICUgMiA9PT0gMSkgewogICAgX19jdHgudHJhbnNsYXRlKDAuNSwgMC41KTsKICB9CiAgX19jdHguYmVnaW5QYXRoKCk7CiAgX19maXJzdCA9IGZhbHNlOwp9CgovKioKICogRHJhdyBzb21lIHRleHQgdG8gdGhlIHNjcmVlbi4gSXRzIHBsYWNlbWVudCBpcwogKiBkZXRlcm1pbmVkIGJ5IGJvdGggdGhlIGNvb3JkaW5hdGUgcHJvdmlkZWQsIGFuZAogKiB0aGUgeC95IGFsaWdubWVudCBwcm92aWRlZC4gVmFsaWQgYHhBbGlnbmAgdmFsdWVzCiAqIGFyZToKICoKICogLSBDRU5URVIgLSB0aGUgdGV4dCBhbmNob3IgaXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGV4dC4gVGV4dCBpcyBwbGFjZWQgZXZlbmx5IG9uIGVpdGhlciBzaWRlLgogKiAtIEVORCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgcmlnaHQgZm9yIExUUiB0ZXh0LCBhbmQgb24gdGhlIGxlZnQgZm9yIFJUTCB0ZXh0LgogKiAtIExFRlQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgdGV4dC4gYWxsIHRleHQgaXMgdG8gdGhlIHJpZ2h0LgogKiAtIFJJR0hUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSB0ZXh0LiBBbGwgdGV4dCBpcyB0byB0aGUgbGVmdC4KICogLSBTVEFSVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgbGVmdCBmb3IgTFRSIHRleHQsIGFuZCBvbiB0aGUgcmlnaHQgZm9yIFJUTCB0ZXh0LgogKgogKiBWYWxpZCBgeUFsaWduYCB2YWx1ZXMgYXJlOgogKgogKiAtIEFMUEhBQkVUSUMgLSBzdGFuZGFyZCB0ZXh0IGFsaWdubWVudAogKiAtIEJPVFRPTSAtIHRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgYm91bmRpbmcgYm94CiAqIC0gSEFOR0lORyAtIHJlbGV2YW50IGZvciBUaWJldGFuIGFuZCBvdGhlciBJbmRpYyBzY3JpcHRzLgogKiAtIElERU9HUkFQSElDIC0gcmVsZXZhbnQgZm9yIGlkZW9ncmFwaGljIENKS1YgdGV4dC4KICogLSBNSURETEUgLSBUaGUgdmVydGljYWwgZXF1aXZhbGVudCBvZiAiY2VudGVyIi4KICogLSBUT1AgLSBUaGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSB0b3Agb2YgdGhlIHR5cG9ncmFwaGljICJlbSBzcXVhcmUiLgogKgogKiBOb3RlIHRoYXQgdGhlIHByaW1hcnkgdGV4dCBjb2xvdXIgdXNlcyB0aGUgZmlsbCBjb2xvdXIuIElmIHRleHQKICogc3Ryb2tpbmcgaXMgZW5hYmxlZCwgdGhlIHRoZSB0ZXh0IG91dGxpbmUgd2lsbCBiZSBjb2xvdXJlZCB1c2luZwogKiB0aGUgY3VycmVudCBzdHJva2UgY29sb3VyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHRleHQoIm5vcm1hbCB0ZXh0Iiwgd2lkdGgvMiwgNjAsIENFTlRFUiwgQ0VOVEVSKTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHNldFRleHRTdHJva2UoMSk7CiAqICAgICAgIHRleHQoInVuZmlsbGVkIHRleHQiLCB3aWR0aC8yLCAxMDAsIENFTlRFUiwgQ0VOVEVSKTsKICogICAgICAgc2V0U3Ryb2tlKGByZWRgKTsKICogICAgICAgc2V0RmlsbChgeWVsbG93YCk7CiAqICAgICAgIHRleHQoImZhbmN5IHRleHQiLCB3aWR0aC8yLCAxNDAsIENFTlRFUiwgQ0VOVEVSKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSB0ZXh0IHdlIHdhbnQgdG8gc2hvdwogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgdGV4dCBsb2NhdGlvbidzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHRleHQgbG9jYXRpb24ncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7c3RyaW5nfSB4QWxpZ24/IEFuIG9wdGlvbmFsIGhvcml6b250YWwgYWxpZ25tZW50IHN0cmluZwogKiBAcGFyYW0ge3N0cmluZ30geUFsaWduPyBBbiBvcHRpb25hbCB2ZXJ0aWNhbCAgYWxpZ25tZW50IHN0cmluZwogKgogKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSB0ZXh0IHdlIHdhbnQgdG8gc2hvdwogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgdGV4dCBsb2NhdGlvbidzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtzdHJpbmd9IHhBbGlnbj8gQW4gb3B0aW9uYWwgaG9yaXpvbnRhbCBhbGlnbm1lbnQgc3RyaW5nCiAqIEBwYXJhbSB7c3RyaW5nfSB5QWxpZ24/IEFuIG9wdGlvbmFsIHZlcnRpY2FsICBhbGlnbm1lbnQgc3RyaW5nCiAqCiAqIEBzZWUge0BsaW5rIHNldFRleHRTdHJva2V9CiAqLwpmdW5jdGlvbiB0ZXh0KHN0ciwgeCwgeSwgeEFsaWduLCB5QWxpZ24pIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHlBbGlnbiA9IHhBbGlnbjsKICAgIHhBbGlnbiA9IHk7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIHNhdmUoKTsKICBpZiAoeEFsaWduKSB7CiAgICBzZXRUZXh0QWxpZ24oeEFsaWduLCB5QWxpZ24pOwogIH0KICBfX2N0eC5maWxsVGV4dChzdHIsIHgsIHkpOwogIGlmIChfX3RleHRTdHJva2UpIHsKICAgIHNldFN0cm9rZShfX3RleHRTdHJva2UpOwogICAgX19jdHguc3Ryb2tlVGV4dChzdHIsIHgsIHkpOwogIH0KICByZXN0b3JlKCk7Cn0KCi8qKgogKiBEcmF3IGEgdHJpYW5nbGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGByZWRgKTsKICogICAgICAgdHJpYW5nbGUod2lkdGgvMiwgMzAsIDEvNCAqIHdpZHRoLCAxNjAsIDMvNCAqIHdpZHRoLCAxMTApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4MSBUaGUgZmlyc3QgcG9pbnQncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MSBUaGUgZmlyc3QgcG9pbnQncyB5IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB4MiBUaGUgc2Vjb25kIHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTIgVGhlIHNlY29uZCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHgzIFRoZSB0aGlyZCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkzIFRoZSB0aGlyZCBwb2ludCdzIHkgcGl4ZWwgdmFsdWUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAxIFRoZSBmaXJzdCBwb2ludCdzIHt4LHl9IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpa2V9IHAyIFRoZSBzZWNvbmQgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwMyBUaGUgdGhpcmQgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqLwpmdW5jdGlvbiB0cmlhbmdsZSh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7CiAgaWYgKHgxLnggIT09IHVuZGVmaW5lZCAmJiB4MS55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkzID0geDIueTsKICAgIHgzID0geDIueDsKICAgIHkyID0geTEueTsKICAgIHgyID0geTEueDsKICAgIHkxID0geDEueTsKICAgIHgxID0geDEueDsKICB9CgogIHN0YXJ0KCk7CiAgdmVydGV4KHgxLCB5MSk7CiAgdmVydGV4KHgyLCB5Mik7CiAgdmVydGV4KHgzLCB5Myk7CiAgdmVydGV4KHgxLCB5MSk7CiAgZW5kKCk7Cn0KCi8qKgogKiBBZGQgYSB2ZXJ0ZXggdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgc2hhcGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0U3Ryb2tlKGBibGFja2ApOwogKiAgICAgICBzZXRGaWxsKGByZWRgKTsKICogICAgICAgc3RhcnQoKTsKICogICAgICAgdmVydGV4KHdpZHRoLzIsIDMwKTsKICogICAgICAgdmVydGV4KDEvNCAqIHdpZHRoLCAxNjApOwogKiAgICAgICB2ZXJ0ZXgoMy80ICogd2lkdGgsIDExMCk7CiAqICAgICAgIGVuZCgpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4IFRoZSB2ZXJ0ZXgncyB4IHBpeGVsIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSB2ZXJ0ZXgncyB5IHBpeGVsIHZhbHVlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSB2ZXJ0ZXgge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBlbmR9CiAqIEBzZWUge0BsaW5rIHN0YXJ0fQogKi8KZnVuY3Rpb24gdmVydGV4KHgsIHkpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KICBpZiAoX19maXJzdCkgewogICAgX19jdHgubGluZVRvKHgsIHkpOwogIH0gZWxzZSB7CiAgICBfX2ZpcnN0ID0geyB4LCB5IH07CiAgICBfX2N0eC5tb3ZlVG8oeCwgeSk7CiAgfQp9Ci8qKgogKiBDcmVhdGUgYW4gYXJyYXkgb2Ygc3BlY2lmaWVkIGxlbmd0aCwgb3B0aW9uYWxseSBmaWxsZWQgdXNpbmcgYQogKiBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBlbGVtZW50IGluZGV4IGFzIHNpbmdsZSBpbnB1dCBhcmd1bWVudC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBub0ZpbGwoKTsKICogICAgICAgdHJhbnNsYXRlKDAsIGhlaWdodC8yKTsKICogICAgICAgbGV0IGRhdGEgPSBhcnJheSh3aWR0aCwgKGkpID0+IFtpLCBoZWlnaHQvMiAqIHNpbihpLzI1KV0pOwogKiAgICAgICBwbG90RGF0YShkYXRhLCAwLCAxKTsKICogICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgc2l6ZSBvZiB0aGUgYXJyYXkgeW91IHdhbnQKICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsbEZ1bmN0aW9uPyBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBnZXRzIHVzZWQgdG8gZmlsbCB0aGUgYXJyYXkKICovCmZ1bmN0aW9uIGFycmF5KGxlbiwgZmlsbEZ1bmN0aW9uKSB7CiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGxlbikuZmlsbCgpOwogIGlmIChmaWxsRnVuY3Rpb24pIHsKICAgIHJldHVybiBhcnIubWFwKChfLCBpKSA9PiBmaWxsRnVuY3Rpb24oaSkpOwogIH0KICByZXR1cm4gYXJyOwp9CgovKioKICogRW1wdHkgdGhlIGxpc3Qgb2YgbW92YWJsZSBwb2ludHMgaW4geW91ciBncmFwaGljLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIGFkZEJ1dHRvbihgbG9ja2AsICgpID0+IHsKICogICAgICAgICBjbGVhck1vdmFibGUoKTsKICogICAgICAgICByZWRyYXcoKTsKICogICAgICAgfSk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgZm9yKGxldCBwIG9mIHBvaW50cykgewogKiAgICAgICAgIHNldENvbG9yKGlzTW92YWJsZShwKSA/IGByZWRgIDogYGdyZXlgKTsKICogICAgICAgICBwb2ludChwKTsKICogICAgICAgfQogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckRvd24oeCx5KSB7CiAqICAgICAgIGlmIChjdXJyZW50TW92YWJsZSkgcmV0dXJuOwogKiAgICAgICBjb25zdCBwID0gbmV3IFBvaW50KHgseSk7CiAqICAgICAgIHBvaW50cy5wdXNoKHApOwogKiAgICAgICBzZXRNb3ZhYmxlKHApOwogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBpc01vdmFibGV9CiAqIEBzZWUge0BsaW5rIHNldE1vdmFibGV9CiAqLwpmdW5jdGlvbiBjbGVhck1vdmFibGUoKSB7CiAgX19tb3ZhYmxlX3BvaW50cy5zcGxpY2UoMCwgX19tb3ZhYmxlX3BvaW50cy5sZW5ndGgpOwp9CgovKioKICogQ3JlYXRlIGEgY29weSBvZiB0aGUgY3VycmVudCBjYW52YXMgZWxlbWVudAogKiBmb3IgdXNlIHNvbWV3aGVyZSBlbHNlIGluIHlvdXIgb3duIGNvZGUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgcGlua2ApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlckRvd24oeCx5KSB7CiAqICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoCiAqICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KGBncmFwaGljczp1cGRhdGVgLCB7CiAqICAgICAgICAgICBkZXRhaWw6IHsKICogICAgICAgICAgICAgY2FudmFzOiBjb3B5KCkKICogICAgICAgICAgIH0KICogICAgICAgICB9KQogKiAgICAgICApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEByZXR1cm5zIHtIVE1MQ2FudmFzRWxlbWVudH0gQSBjb3B5IG9mIHRoZSBjdXJyZW50IGNhbnZhcwogKi8KZnVuY3Rpb24gY29weSgpIHsKICBjb25zdCBjb3B5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgY2FudmFzYCk7CiAgY29weS53aWR0aCA9IHdpZHRoOwogIGNvcHkuaGVpZ2h0ID0gaGVpZ2h0OwogIGNvbnN0IGN0eCA9IGNvcHkuZ2V0Q29udGV4dChgMmRgKTsKICBjdHguZHJhd0ltYWdlKF9fY2FudmFzLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKICByZXR1cm4gY29weTsKfQoKLyoqCiAqIEdlbmVyYXRlcyBhIGNvbG9yIGJhc2VkIG9uIHRoZSBIU0wgY29sb3Igc3BhY2UuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihjb2xvcig0NSwgODAsIDkwKSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IGh1ZSBpbiB0aGUgcmFuZ2UgWzAsIDM2MF0KICogQHBhcmFtIHtudW1iZXJ9IHNhdHVyYXRpb24gaW4gdGhlIHJhbmdlIFswLCAxMDBdCiAqIEBwYXJhbSB7bnVtYmVyfSBsaWdodG5lc3MgaW4gdGhlIHJhbmdlIFswLCAxMDBdCiAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5IGluIHRoZSByYW5nZSBbMCwgMV0KICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgaHNsYSBjb2xvciBzdHJpbmcKICoKICogQHNlZSB7QGxpbmsgcmFuZG9tQ29sb3J9CiAqLwpmdW5jdGlvbiBjb2xvcihoID0gX19jdXJyZW50X2h1ZSwgcyA9IDUwLCBsID0gNTAsIGEgPSAxKSB7CiAgcmV0dXJuIGBoc2xhKCR7aH0sJHtzfSUsJHtsfSUsJHthfSlgOwp9CgovKioKICogRmluZCBhbiBIVE1MIGVsZW1lbnQgaW5zaWRlIHlvdXIgZ3JhcGhpY3MtZWxlbWVudAogKiBieSBxdWVyeSBzZWxlY3Rvci4gVGhpcyBpcyBlcXVpdmFsZW50IHRvOgogKgogKiBgYGAKICogeW91ckVsZW1lbnQucXVlcnlTZWxlY3RvcihxcykKICogYGBgCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVNlbGVjdG9yIEEgcXVlcnkgc2VsZWN0b3IKICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9IFRoZSBtYXRjaGVkIGVsZW1lbnQsIG9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLgogKi8KZnVuY3Rpb24gZmluZChxcykgewogIHJldHVybiBfX2VsZW1lbnQucXVlcnlTZWxlY3Rvcihxcyk7Cn0KCi8qKgogKiBGaW5kIGFsbCBIVE1MIGVsZW1lbnRzIGluc2lkZSB5b3VyIGdyYXBoaWNzLWVsZW1lbnQKICogdGhhdCBtYXRjaCBhIGdpdmVuIHF1ZXJ5IHNlbGVjdG9yLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG86CiAqCiAqIGBgYAogKiBBcnJheS5mcm9tKHlvdXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXMpKQogKiBgYGAKICoKICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U2VsZWN0b3IgQSBxdWVyeSBzZWxlY3RvcgogKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX0gQW4gYXJyYXkgd2l0aCBhbGwgbWF0Y2hpbmcgZWxlbWVudHMsIFtdIGlmIHRoZXJlIHdlcmUgbm8gbWF0Y2hlcy4KICovCmZ1bmN0aW9uIGZpbmRBbGwocXMpIHsKICByZXR1cm4gWy4uLl9fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHFzKV07Cn0KCi8qKgogKiBNYXJrIGEgc3BlY2lmaWMgY29sb3IgYXMgdGhlIGhpZ2hsaWdodCBjb2xvciwKICogd2hpY2ggY2F1c2VzIHRoZSBncmFwaGljIHRvIHJlZHJhdyB3aXRoIHRoYXQKICogY29sb3IgcmVwbGFjZWQgYnkgd2hpY2hldmVyIGNvbG9yIHlvdSBwaWNrZWQKICogYXMgaGlnaGxpZ2h0IGNvbG9yLgogKgogKiBOb3RlIHRoYXQgeW91IGNhbiBvbmx5IHVzZSBuYW1lZCAoQ1NTKSBjb2xvcnMKICogd2l0aCB0aGlzIGZ1bmN0aW9uLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRIaWdobGlnaHRDb2xvcihgbGltZWApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHRleHQoImxldCdzIGdvIiwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyQWN0aXZlKHN0YXRlKSB7CiAqICAgICAgIGlmIChzdGF0ZSkgaGlnaGxpZ2h0KGByZWRgKTsKICogICAgICAgZWxzZSBoaWdobGlnaHQoZmFsc2UpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7Y29sb3J8Ym9vbGVhbn0gY29sb3IgU2V0IHRoZSBjb2xvciB0aGF0IHNob3VsZCBnZXQgcmVwbGFjZWQgd2l0aCB0aGUgaGlnaGxpZ2h0IGNvbG9yLCBvciBkaXNhYmxlIGhpZ2hsaWdodCB3aGVuIGNvbG9yIGlzIGBmYWxzZWAKICoKICogQHNlZSB7QGxpbmsgc2V0SGlnaGxpZ2h0Q29sb3J9CiAqLwpmdW5jdGlvbiBoaWdobGlnaHQoY29sb3IpIHsKICBpZiAoQ1NTX0NPTE9SX01BUFtjb2xvcl0pIHsKICAgIF9faGlnaGxpZ2h0X2NvbG9yID0gQ1NTX0NPTE9SX01BUFtjb2xvcl07CiAgfSBlbHNlIHsKICAgIF9faGlnaGxpZ2h0X2NvbG9yID0gY29sb3I7CiAgfQogIHJlZHJhdygpOwp9CgovKioKICogQ2hlY2sgd2hldGhlciBhIHBvaW50IGlzIHJlZ2lzdGVyZWQgYXMgbW92YWJsZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGNvbnN0IHBvaW50cyA9IFtdOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBhZGRCdXR0b24oYGxvY2tgLCAoKSA9PiB7CiAqICAgICAgICAgY2xlYXJNb3ZhYmxlKCk7CiAqICAgICAgICAgcmVkcmF3KCk7CiAqICAgICAgIH0pOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIGZvcihsZXQgcCBvZiBwb2ludHMpIHsKICogICAgICAgICBzZXRDb2xvcihpc01vdmFibGUocCkgPyBgcmVkYCA6IGBncmV5YCk7CiAqICAgICAgICAgcG9pbnQocCk7CiAqICAgICAgIH0KICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKHgseSkgewogKiAgICAgICBpZiAoY3VycmVudE1vdmFibGUpIHJldHVybjsKICogICAgICAgY29uc3QgcCA9IG5ldyBQb2ludCh4LHkpOwogKiAgICAgICBwb2ludHMucHVzaChwKTsKICogICAgICAgc2V0TW92YWJsZShwKTsKICogICAgICAgcmVkcmF3KCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtQb2ludExpa2V9IFRoZSBwb2ludCB0aGF0IHdlIHdhbnQgdG8gY2hlY2sgIm1vdmFiaWxpdHkiIGZvcgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvdXIgcG9pbnQgaXMgaW4gdGhlIGxpc3Qgb2YgbW92YWJsZSBwb2ludHMsIG90aGVyd2lzZSBmYWxzZQogKgogKiBAc2VlIHtAbGluayBjbGVhck1vdmFibGV9CiAqIEBzZWUge0BsaW5rIHNldE1vdmFibGV9CiAqLwpmdW5jdGlvbiBpc01vdmFibGUocG9pbnQpIHsKICByZXR1cm4gX19tb3ZhYmxlX3BvaW50cy5pbmNsdWRlcyhwb2ludCk7Cn0KCi8qKgogKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCB0aGlzCiAqIGdyYXBoaWMgaGFzIGJlZW4gcnVubmluZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIHBsYXkoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dEFsaWduKENFTlRFUiwgTUlERExFKTsKICogICAgICAgY29uc3Qgc2Vjb25kcyA9IChtaWxsaXMoKS8xMDAwKXwwOwogKiAgICAgICB0ZXh0KGAke3NlY29uZHN9c2AsIHdpZHRoLzIsIGhlaWdodC8yKQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEByZXR1cm5zIHtudW1iZXJ9IG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGdyYXBoaWMgbG9hZGVkIGluCiAqLwpmdW5jdGlvbiBtaWxsaXMoKSB7CiAgcmV0dXJuIERhdGUubm93KCkgLSBfX3N0YXJ0X3RpbWU7Cn0KCi8qKgogKiBQYXVzZSB0aGUgZ3JhcGhpYyBpZiBpdHMgY3VycmVudGx5IHBsYXlpbmcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwbGF5KCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIGNvbnN0IHNlY29uZHMgPSAobWlsbGlzKCkvMTAwMCkudG9GaXhlZCgxKTsKICogICAgICAgdGV4dChgJHtzZWNvbmRzfXNgLCB3aWR0aC8yLCBoZWlnaHQvMikKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJBY3RpdmUoc3RhdGUpIHsKICogICAgICAgaWYoc3RhdGUpIHsKICogICAgICAgICBwYXVzZSgpOwogKiAgICAgICB9IGVsc2UgewogKiAgICAgICAgIHBsYXkoKTsKICogICAgICAgfQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHBsYXl9CiAqIEBzZWUge0BsaW5rIHRvZ2dsZVBsYXl9CiAqLwpmdW5jdGlvbiBwYXVzZSgpIHsKICBwbGF5aW5nID0gZmFsc2U7Cn0KCi8qKgogKiBTdGFydCBwbGF5aW5nIHlvdXIgZ3JhcGhpYywgbWVhbmluZyBpdCB3aWxsIGNhbGwgZHJhdygpCiAqIGF0IHdoYXRldmVyIHJhdGUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBsb29wIGlzCiAqIGFsbG93ZWQgdG8gcnVuIG9uIHlvdXIgY29tcHV0ZXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBsZXQgZnBzID0gMDsKICogICAgIGxldCBjaGVja2VkID0gZmFsc2U7CiAqICAgICBsZXQgbGFzdEZyYW1lQ2hlY2sgPSAwOwogKgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBjb25zdCBzZWNvbmRzID0gKG1pbGxpcygpLzEwMDApLnRvRml4ZWQoMSk7CiAqICAgICAgIHRleHQoYGZwczogJHtmcHN9YCwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICAgIGlmIChzZWNvbmRzLmVuZHNXaXRoKGAuMGApKSB7CiAqICAgICAgICAgaWYgKCFjaGVja2VkKSB7CiAqICAgICAgICAgICBjaGVja2VkID0gdHJ1ZTsKICogICAgICAgICAgIGZwcyA9IGZyYW1lIC0gbGFzdEZyYW1lQ2hlY2s7CiAqICAgICAgICAgICBsYXN0RnJhbWVDaGVjayA9IGZyYW1lOwogKiAgICAgICAgIH0KICogICAgICAgfSBlbHNlIHsKICogICAgICAgICBjaGVja2VkID0gZmFsc2U7CiAqICAgICAgIH0KICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAc2VlIHtAbGluayBwYXVzZX0KICogQHNlZSB7QGxpbmsgdG9nZ2xlUGxheX0KICovCmZ1bmN0aW9uIHBsYXkoKSB7CiAgcGxheWluZyA9IHRydWU7CiAgX19kcmF3KCk7Cn0KCi8qKgogKiBHZW5lcmF0ZSBhIHJhbmRvbSBjb2xvdXIuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uCiAqIGFsbG93cyB5b3UgdG8gZ2V0ICJ0aGUgY3VycmVudGx5IGdlbmVyYXRlZCByYW5kb20KICogY29sb3VyIiBpbiBkaWZmZXJlbnQgb3BhY2l0aWVzIGJ5IGNhbGxpbmcgdGhlIGZ1bmN0aW9uCiAqIHdpdGggYW4gb3BhY2l0eSB2YWx1ZSwgYW5kIGBmYWxzZWAgYXMgY3ljbGUgYXJndW1lbnQuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihyYW5kb21Db2xvcigpKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJEb3duKCkgewogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKgogKiBAcGFyYW0ge251bWJlcn0gb3BhY2l0eSBUaGUgb3BhY2l0eSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAsMV0KICogQHBhcmFtIHtudW1iZXJ9IGN5Y2xlPyBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gbW92ZSBvbiB0byB0aGUgbmV4dCBjb2xvdXIgKGRlZmF1bHQgPSB0cnVlKQogKgogKiBAc2VlIHtAbGluayBjb2xvcn0KICovCmZ1bmN0aW9uIHJhbmRvbUNvbG9yKGEgPSAxLjAsIGN5Y2xlID0gdHJ1ZSkgewogIGlmIChjeWNsZSkgX19jdXJyZW50X2h1ZSA9IHJhbmRvbSgwLCAzNjApOwogIHJldHVybiBgaHNsYSgke19fY3VycmVudF9odWV9LDUwJSw1MCUsJHthfSlgOwp9CgovKioKICogQW4gYWx0ZXJuYXRpdmUgdG8gd3JpdGluZyBmb3IgbG9vcHMsIGJlY2F1c2UKICogbm8gb25lIHdhbnRzIHRvIGNvbnN0YW50bHkgd3JpdGUgdmFyIGFsbG9jYXRpb25zCiAqIHRoYXQgb25seSBsaXZlIGZvciB0aGUgZHVyYXRpb24gb2YgYSBsb29wLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHJhbmdlKDAsIFRBVSwgKGEpID0+IHBvaW50KDQwICogY29zKGEpLCA0MCAqIHNpbihhKSkpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgZXF1aXZhbGVudCBvZiBhIGZvciBsb29wJ3MgaW5pdGlhbCBgbGV0IGkgPSAuLi5gCiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVxdWl2YWxlbnQgb2YgYSBmb3IgbG9vcCdzIGBpIDwgZW5kYAogKiBAcGFyYW0ge251bWJlcn0gc3RlcD8gVGhlIHN0ZXAgc2l6ZSBieSB3aGljaCB0byBpbmNyZW1lbnQgYXQgZWFjaCBpdGVyYXRpb24gKGRlZmF1bHRzID0gYChzdGFydC1lbmQpLzEwYCkKICogQHBhcmFtIHtGdW5jdGlvbn0gcnVuRnVuY3Rpb24gVGhlIGZ1bmN0aW9uIHRvIHJ1biBhdCBlYWNoIGl0ZXJhdGlvbgogKi8KZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgcnVuRnVuY3Rpb24pIHsKICBpZiAodHlwZW9mIHN0ZXAgPT09IGBmdW5jdGlvbmApIHsKICAgIHJ1bkZ1bmN0aW9uID0gc3RlcDsKICAgIHN0ZXAgPSAoZW5kIC0gc3RhcnQpIC8gMTA7CiAgfQogIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBzdGVwKSB7CiAgICBydW5GdW5jdGlvbihpKTsKICB9Cn0KCi8qKgogKiBTYWZlbHkgdHJpZ2dlciBhIG5ldyBkcmF3IHBhc3MuIElmIHRoZSBncmFwaGljIGlzIHJ1bm5pbmcKICogaW4gYW5pbWF0ZWQgbW9kZSwgb3IgYSByZWRyYXcoKSBpcyB0cmlnZ2VyZWQgX2R1cmluZ18gYQogKiByZWRyYXcoKSwgdGhpcyBjYWxsIHdpbGwgZG8gbm90aGluZy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNvbnN0IGggPSBtYXAocG9pbnRlci54LCAwLCB3aWR0aCwgMCwgMzYwKTsKICogICAgICAgY29uc3QgbCA9IG1hcChwb2ludGVyLnksIDAsIGhlaWdodCwgNTAsIDApOwogKiAgICAgICBjbGVhcihjb2xvcihoLCAxMDAsIGwpKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKCkgewogKiAgICAgICByZWRyYXcoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKi8KZnVuY3Rpb24gcmVkcmF3KCkgewogIGlmIChfX3JlZHJhd2luZykgcmV0dXJuOwogIGlmIChwbGF5aW5nKSByZXR1cm47CiAgX19yZWRyYXdpbmcgPSB0cnVlOwogIF9fZHJhdygpOwogIF9fcmVkcmF3aW5nID0gZmFsc2U7Cn0KCi8qKgogKiBSZXN0b3JlIHRoZSBncmFwaGljcyBjb250ZXh0ICh0cmFuc2Zvcm1zLAogKiBjdXJyZW50IGNvbG9ycywgZXRjKSB0byB3aGF0IHRoZXkgd2VyZQogKiB3aGVuIHNhdmUoKSB3YXMgY2FsbGVkLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgY29uc3QgcG9pbnRzID0gW107CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICBsaW5lKDAsMCw4MCwwKTsKICogICAgICAgc2F2ZSgpOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCkKICogICAgICAgcmFuZ2UoMCwgNSwgMSwgKGEpID0+IHsKICogICAgICAgICByb3RhdGUoUEkvOCk7CiAqICAgICAgICAgbGluZSgwLDAsODAsMCk7CiAqICAgICAgIH0pOwogKiAgICAgICByZXN0b3JlKCk7CiAqICAgICAgIGxpbmUoLTIwLDAsLTgwLDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHNhdmV9CiAqLwpmdW5jdGlvbiByZXN0b3JlKCkgewogIF9fY3R4LnJlc3RvcmUoKTsKfQoKLyoqCiAqIE1hcmsgb25lIG9yIG1vcmUgcG9pbnRzIGFzIG1vdmFibGUsIG1lYW5pbmcKICogdGhhdCB0aGUgdXNlciBjYW4gcmVwb3NpdGlvbiB0aGUgcG9pbnQgYXJvdW5kIG9uCiAqIHRoZSBjYW52YXMgYnkgdG91Y2gvY2xpY2stZHJhZ2dpbmcuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgZm9yIChsZXQgaSA9IDQwOyBpIDwgMjAwOyBpICs9IDIwKSB7CiAqICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KGkgLSAyMCwgMTIwKSk7CiAqICAgICAgIH0KICogICAgICAgc2V0TW92YWJsZSguLi5wb2ludHMpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgbm9GaWxsKCk7CiAqICAgICAgIHNldFN0cm9rZShgcHVycGxlYCk7CiAqICAgICAgIGJzcGxpbmUoLi4ucG9pbnRzKTsKICogICAgICAgZm9yKGxldCBwIG9mIHBvaW50cykgcG9pbnQocCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtQb2ludExpa2Vbbl19IHBvaW50cyBPbmUgb3IgbW9yZSBwb2ludHMgdG8gbWFyayBhcyBtb3ZhYmxlLgogKgogKiBAc2VlIHtAbGluayBpc01vdmFibGV9CiAqIEBzZWUge0BsaW5rIGNsZWFyTW92YWJsZX0KICovCmZ1bmN0aW9uIHNldE1vdmFibGUoLi4ucG9pbnRzKSB7CiAgcG9pbnRzLmZvckVhY2goKHApID0+IHsKICAgIGlmIChfX21vdmFibGVfcG9pbnRzLmluZGV4T2YocCkgPT09IC0xKSB7CiAgICAgIF9fbW92YWJsZV9wb2ludHMucHVzaChwKTsKICAgIH0KICB9KTsKfQoKLyoqCiAqIFNldCAob3IgY2hhbmdlKSB0aGUgZ3JhcGhpYydzIHNpemUuIE5vdGUgdGhhdCB5b3VyIHdpZHRoCiAqIGFuZCBoZWlnaHQgdmFsdWVzIHdpbGwgZ2V0IHJvdW5kZWQgdG8gaW50ZWdlciB2YWx1ZXMuCiAqCiAqIE5vdGUgdGhhdCBgc2V0U2l6ZWAgd2lsbCBpbW1lZGlhdGVseSB0cmlnZ2VyIGEgcmVkcmF3LAogKiB3aGV0aGVyIHlvdSB3YW50IGl0IHRvIG9yIG5vdCwgYmVjYXVzZSBjaGFuZ2luZyBjYW52YXMKICogZGltZW5zaW9ucyBjbGVhcnMgdGhlIGNhbnZhcywgbmVjZXNzaXRhdGluZyBhIHJlZHJhdy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDQwMCwgMjAwKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIGNlbnRlcigpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKQogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHRleHQoYCR7d2lkdGh9LyR7aGVpZ2h0fWAsIDAsIDAsIENFTlRFUiwgTUlERExFKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIHBvaW50ZXJVcCgpIHsKICogICAgICAgc2V0U2l6ZShyYW5kb20oMTAwLDQwMCksIDIwMCk7CiAqICAgICAgIC8vIE5vdGUgdGhhdCB0aGVyZSBpcyBubyByZWRyYXcoKSBoZXJlIQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBUaGUgZ3JhcGhpY3Mgd2lkdGggaW4gcGl4ZWxzCiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVGhlIGdyYXBoaWNzIGhlaWdodCBpbiBwaXhlbHMKICovCmZ1bmN0aW9uIHNldFNpemUodyA9IDQwMCwgaCA9IDIwMCkgewogIHdpZHRoID0gX19jYW52YXMud2lkdGggPSB3IHwgMDsKICBoZWlnaHQgPSBfX2NhbnZhcy5oZWlnaHQgPSBoIHwgMDsKICBfX2VsZW1lbnQuc3R5bGUubWF4V2lkdGggPSBgY2FsYygyZW0gKyAke3dpZHRofXB4YDsKICBfX2N0eCA9IF9fY2FudmFzLmdldENvbnRleHQoYDJkYCk7CiAgX19kcmF3KCk7Cn0KCi8qKgogKiBTYXZlIHRoZSBjdXJyZW50IGdyYXBoaWNzIGNvbnRleHQgKHRyYW5zZm9ybXMsCiAqIGN1cnJlbnQgY29sb3JzLCBldGMpIHNvIHRoYXQgdGhvc2UgY2FuIGJlIHJlc3RvcmVkCiAqIGFmdGVyIGNoYW5naW5nIHRoZW0uCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBjb25zdCBwb2ludHMgPSBbXTsKICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgIGxpbmUoMCwwLDgwLDApOwogKiAgICAgICBzYXZlKCk7CiAqICAgICAgIHNldENvbG9yKGBkYXJrZ3JlZW5gKQogKiAgICAgICByYW5nZSgwLCA1LCAxLCAoYSkgPT4gewogKiAgICAgICAgIHJvdGF0ZShQSS84KTsKICogICAgICAgICBsaW5lKDAsMCw4MCwwKTsKICogICAgICAgfSk7CiAqICAgICAgIHJlc3RvcmUoKTsKICogICAgICAgbGluZSgtMjAsMCwtODAsMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogKiBAc2VlIHtAbGluayByZXN0b3JlfQogKi8KZnVuY3Rpb24gc2F2ZSgpIHsKICBfX2N0eC5zYXZlKCk7Cn0KCi8qKgogKiBDb252ZXJ0IHRoZSBjdXJyZW50IGNhbnZhcyBpbnRvIGFuIGRhdGEgVVJMCiAqIHRoYXQgcmVwcmVzZW50cyBhIFBORyBpbWFnZS4KICoKICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgY2FudmFzIGFzIFBORyBkYXRhIFVSTAogKi8KZnVuY3Rpb24gdG9EYXRhVVJMKCkgewogIHJldHVybiBfX2NhbnZhcy50b0RhdGFVUkwoKTsKfQoKLyoqCiAqIElmIHRoZSBncmFwaGljIGlzIGN1cnJlbnRseSBwbGF5aW5nLCBwYXVzZSBpdCwKICogYW5kIGlmIGl0J3MgcGF1c2VkLCBwbGF5IGl0LgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Rm9udFNpemUoMjUpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICBjb25zdCBzZWNvbmRzID0gKG1pbGxpcygpLzEwMDApLnRvRml4ZWQoMSk7CiAqICAgICAgIHRleHQoYCR7c2Vjb25kc31zYCwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyQWN0aXZlKHN0YXRlKSB7CiAqICAgICAgIHRvZ2dsZVBsYXkoKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIG5ldyBwbGF5IHN0YXRlCiAqCiAqIEBzZWUge0BsaW5rIHBhdXNlfQogKiBAc2VlIHtAbGluayBwbGF5fQogKi8KZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHsKICBwbGF5aW5nID8gcGF1c2UoKSA6IHBsYXkoKTsKICByZXR1cm4gcGxheWluZzsKfQpjb25zdCB7CiAgLyoqCiAgICogR2V0IHRoZSBhYnNvbHV0ZSB2YWx1ZSBmb3Igc29tZSBpbnB1dAogICAqCiAgICogRXhhbXBsZToKICAgKgogICAqIDxncmFwaGljcy1lbGVtZW50PgogICAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICAgKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICAgKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICAgKiAgICAgICB0cmFuc2xhdGUoMCwgaGVpZ2h0LzIpOwogICAqICAgICAgIG5vRmlsbCgpOwogICAqICAgICAgIHNldFN0cm9rZShgYmxhY2tgKTsKICAgKiAgICAgICBsaW5lKC1odWdlLCAwLCBodWdlLCAwKTsKICAgKgogICAqICAgICAgIGNvbnN0IHcyID0gd2lkdGgvMjsKICAgKiAgICAgICBjb25zdCBkYXRhID0gYXJyYXkod2lkdGgsICh4KSA9PiBbeCwgeCAtIHcyLCBhYnMoeCAtIHcyKV0pOwogICAqCiAgICogICAgICAgc2V0U3Ryb2tlKGByZWRgKTsKICAgKiAgICAgICBwbG90RGF0YShkYXRhLCAwLCAxKTsKICAgKgogICAqICAgICAgIHNldFN0cm9rZShgYmx1ZWApOwogICAqICAgICAgIHBsb3REYXRhKGRhdGEsIDAsIDIpOwogICAqICAgICB9CiAgICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICAgKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gdiBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGlucHV0IHZhbHVlIHdpdGggaXRzIHNpZ24gc2V0IHRvIHBvc2l0aXZlCiAgICovCiAgYWJzLAoKICAvKioKICAgKiBUaGUgaW52ZXJzZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSB2IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW52ZXJzZSBjb3NpbmUgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGFzaW59CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgYWNvcywKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgaW52ZXJzZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cGVyYm9saWMgaW52ZXJzZSBjb3NpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqIEBzZWUge0BsaW5rIGFjb3N9CiAgICovCiAgYWNvc2gsCgogIC8qKgogICAqIFRoZSBpbnZlcnNlIHNpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGludmVyc2Ugc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgYWNvc30KICAgKiBAc2VlIHtAbGluayBhc2luaH0KICAgKi8KICBhc2luLAoKICAvKioKICAgKiBUaGUgaHlwZXJib2xpYyBpbnZlcnNlIHNpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cGVyYm9saWMgaW52ZXJzZSBzaW5lCiAgICoKICAgKiBAc2VlIHtAbGluayBhY29zaH0KICAgKiBAc2VlIHtAbGluayBhc2lufQogICAqLwogIGFzaW5oLAoKICAvKioKICAgKiBUaGUgaW52ZXJzZSB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnZlcnNlIHRhbmdlbnQKICAgKgogICAqIEBzZWUge0BsaW5rIHRhbn0KICAgKi8KICBhdGFuLAoKICAvKioKICAgKiBUaGUgImF0YW4yIiBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0F0YW4yCiAgICoKICAgKiBAcGFyYW0ge3l9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcGFyYW0ge3h9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYXRhbjIgYW5nbGUgZm9yIHRoaXMgbnVtYmVyIHBhaXIKICAgKi8KICBhdGFuMiwKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgaW52ZXJzZSB0YW5nZW50IGZ1bmN0aW9uCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW52ZXJzZV9oeXBlcmJvbGljX2Z1bmN0aW9ucyNEZWZpbml0aW9uc19pbl90ZXJtc19vZl9sb2dhcml0aG1zCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBoeXBlcmJvbGljIGludmVyc2UgdGFuZ2VudAogICAqCiAgICogQHNlZSB7QGxpbmsgdGFufQogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqIEBzZWUge0BsaW5rIGFzaW5ofQogICAqLwogIGF0YW5oLAoKICAvKioKICAgKiBUaGUgY3ViZSByb290IGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSAocmVhbCkgY3ViZSByb290IG9mIHRoYXQgbnVtYmVyCiAgICoKICAgKiBAc2VlIHtAbGluayBzcXJ0fQogICAqLwogIGNicnQsCgogIC8qKgogICAqIFRoZSAicm91bmQgdXAgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciIgZnVuY3Rpb24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBpbnRlZ2VyIHJlc3VsdCBhZnRlciByb3VuZGluZyB1cC4KICAgKgogICAqIEBzZWUge0BsaW5rIGZsb29yfQogICAqIEBzZWUge0BsaW5rIHJvdW5kfQogICAqLwogIGNlaWwsCgogIC8qKgogICAqIEdldCB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgemVybyBiaXRzIGluIHRoZSAzMi1iaXQgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIGEgbnVtYmVyCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvIGJpdHMgaW4gdGhlIDMyLWJpdCBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgdGhhdCBudW1iZXIuCiAgICovCiAgY2x6MzIsCgogIC8qKgogICAqIFRoZSBjb3NpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGNvc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgc2lufQogICAqLwogIGNvcywKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgY29zaW5lIGZ1bmN0aW9uCiAgICoKICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW52ZXJzZV9oeXBlcmJvbGljX2Z1bmN0aW9ucyNEZWZpbml0aW9uc19pbl90ZXJtc19vZl9sb2dhcml0aG1zCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBoeXBlcmJvbGljIGNvc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgY29zfQogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqLwogIGNvc2gsCgogIC8qKgogICAqIFRoZSBleHBvbmVudCBmdW5jdGlvbiwgdGhhdCBpczogZV54CiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXQgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB2YWx1ZSBvZiBFIHJhaXNlZCB0byB0aGF0IG51bWJlcidzIHBvd2VyCiAgICoKICAgKiBAc2VlIHtAbGluayBFfQogICAqLwogIGV4cCwKCiAgLyoqCiAgICogVGhlICJyb3VuZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIiIGZ1bmN0aW9uLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW50ZWdlciByZXN1bHQgYWZ0ZXIgcm91bmRpbmcgZG93bi4KICAgKgogICAqIEBzZWUge0BsaW5rIGNlaWx9CiAgICogQHNlZSB7QGxpbmsgcm91bmR9CiAgICovCiAgZmxvb3IsCgogIC8qKgogICAqIFJvdW5kIGEgbnVtYmVyIHRvIHRoZSBuZWFyZXN0IDMyIGJpdCwgcmF0aGVyIHRoYW4gdGhlCiAgICogc3RhbmRhcmQgSlMgNjQgYml0LCBmbG9hdGluZyBwb2ludCByZXByZXNlbnRhdGlvbi4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBhZnRlciByb3VuZGluZyB0byB0aGUgbmVhcmVzdCAzMiBiaXQgZmxvYXRpbmcgcG9pbnQgcmVwcmVzZW50YXRpb24uCiAgICoKICAgKiBAc2VlIHtAbGluayByb3VuZH0KICAgKi8KICBmcm91bmQsCgogIC8qKgogICAqIFRoZSBFdWNsaWRlYW4gaHlwb3RlbnVzZSBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJbXX0gLi4uaW5wdXQgVHdvIG9yIG1vcmUgbnVtYmVycwogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBoeXBvdGVudXNlIGdpdmVuIHRob3NlIG51bWJlcnMuCiAgICovCiAgaHlwb3QsCgogIC8qKgogICAqIFRoZSAzMiBiaXQgaW50ZWdlciBtdWx0aXBsaWNhdGlvbiBmdW5jdGlvbi4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBhIEFueSAzMiBiaXQgaW50ZWdlcgogICAqIEBwYXJhbSB7bnVtYmVyfSBiIEFueSAzMiBiaXQgaW50ZWdlcgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSAzMiBiaXQgaW50ZWdlciByZXN1bHQgb2YgYSAqIGIKICAgKi8KICBpbXVsLAoKICAvKioKICAgKiBUaGUgbmF0dXJhbCBsb2dhcml0aG0gZnVuY3Rpb24sIGkuZS4gdGhlIGJhc2UtRSBsb2dhcml0aG0KICAgKgogICAqIChOb3RlIHRoYXQgaW4gSlMgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgImxvZyIgcmF0aGVyIHRoYW4gImxuIikKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIG5hdHVyYWwgbG9nYXJpdGhtIG9mIHRoYXQgbnVtYmVyCiAgICoKICAgKiBAc2VlIHtAbGluayBFfQogICAqIEBzZWUge0BsaW5rIGxvZ30KICAgKi8KICBsb2c6IGxuLAoKICAvKioKICAgKiBUaGUgImNvbW1vbiBsb2dhcml0aG0iIGZ1bmN0aW9uLCBpLmUuIHRoZSBiYXNlLTEwIGxvZ2FyaXRobS4KICAgKgogICAqIChOb3RlIHRoYXQgaW4gSlMgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgImxvZzEwIiByYXRoZXIgdGhhbiAibG9nIikKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGNvbW1vbiBsb2dhcml0aG0gb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGxufQogICAqLwogIGxvZzEwOiBsb2csCgogIC8qKgogICAqIFRoZSBiaW5hcnkgbG9nYXJpdGhtIGZ1bmN0aW9uLCBpLmUuIHRoZSBiYXNlLTIgbG9nYXJpdGhtLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYmFzZSAyIGxvZ2FyaXRobSBvZiB0aGF0IG51bWJlcgogICAqCiAgICogQHNlZSB7QGxpbmsgbG59CiAgICogQHNlZSB7QGxpbmsgbG9nfQogICAqLwogIGxvZzIsCgogIC8qKgogICAqIEZpbmQgdGhlIG1heGltdW0gdmFsdWUgaW4gYSBzZXQgb2YgbnVtYmVycwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IC4uLmlucHV0IEFueSB0d28gb3IgIG1vcmUgbnVtYmVycwogICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBoaWdoZXN0IHZhbHVlZCBudW1iZXIgZnJvbSBhbW9uZyB0aGUgaW5wdXQuCiAgICoKICAgKiBAc2VlIHtAbGluayBtaW59CiAgICovCiAgbWF4LAoKICAvKioKICAgKiBGaW5kIHRoZSBtaW5pbXVtIHZhbHVlIGluIGEgc2V0IG9mIG51bWJlcnMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSAuLi5pbnB1dCBBbnkgdHdvIG9yICBtb3JlIG51bWJlcnMKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbG93ZXN0IHZhbHVlZCBudW1iZXIgZnJvbSBhbW9uZyB0aGUgaW5wdXQuCiAgICoKICAgKiBAc2VlIHtAbGluayBtYXh9CiAgICovCiAgbWluLAoKICAvKioKICAgKiBUaGUgcG93ZXIgZnVuY3Rpb24uCiAgICoKICAgKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBhIGhvbGRvdmVyIGZyb20gYmVmb3JlIEpTCiAgICogaGFkIHRoZSBgKipgIG9wZXJhdG9yIGZvciBwZXJmb3JtaW5nIHRoaXMgY2FsY3VsYXRpb24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gYSBBbnkgbnVtYmVyCiAgICogQHBhcmFtIHtudW1iZXJ9IGIgQW55IG51bWJlcgogICAqIEByZXR1cm5zIHtudW1iZXJ8TmFOfSBvdXRwdXQgYSAqKiBiIG9yIE5hTiBpZiB0aGF0IGlzIHVuZGVmaW5lZAogICAqLwogIHBvdywKCiAgLyoqCiAgICogVGhlICJyb3VuZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIiBmdW5jdGlvbiwgcm91bmRpbmcgYW55CiAgICogdmFsdWUgW3guMCwgeC40OTk5Li4uXSB0byB4LCBhbmQgYW55IHZhbHVlIFt4LjUsIHguOTk5Li4uXQogICAqIHRvIHggKyAxLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW50ZWdlciByZXN1bHQgYWZ0ZXIgcm91bmRpbmcuCiAgICoKICAgKiBAc2VlIHtAbGluayBjZWlsfQogICAqIEBzZWUge0BsaW5rIGZsb29yfQogICAqLwogIHJvdW5kLAoKICAvKioKICAgKiBHZXQgdGhlIHNpZ24gb2YgYSBudW1iZXIKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gKzEgaWYgdGhlIG51bWJlciB3YXMgcG9zaXRpdmUsIC0xIGlmIGl0IHdhcyBuZWdhdGl2ZSwgb3IgMCBpZiB0aGUgaW5wdXQgd2FzIHplcm8uCiAgICovCiAgc2lnbiwKCiAgLyoqCiAgICogVGhlIHNpbmUgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIHNpbmUKICAgKgogICAqIEBzZWUge0BsaW5rIGNvc30KICAgKi8KICBzaW4sCgogIC8qKgogICAqIFRoZSBoeXBlcmJvbGljIHNpbmUgZnVuY3Rpb24KICAgKgogICAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnNlX2h5cGVyYm9saWNfZnVuY3Rpb25zI0RlZmluaXRpb25zX2luX3Rlcm1zX29mX2xvZ2FyaXRobXMKICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIGh5cGVyYm9saWMgc2luZQogICAqCiAgICogQHNlZSB7QGxpbmsgc2lufQogICAqIEBzZWUge0BsaW5rIGFjb3NofQogICAqLwogIHNpbmgsCgogIC8qKgogICAqIFRoZSBzcXVhcmUgcm9vdCBmdW5jdGlvbi4KICAgKgogICAqCiAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgYSBob2xkb3ZlciBmcm9tIGJlZm9yZSBKUwogICAqIGhhZCB0aGUgYCoqYCBvcGVyYXRvciBmb3IgcGVyZm9ybWluZyB0aGlzIGNhbGN1bGF0aW9uCiAgICogYnkgdXNpbmcgYHggKiogMC41YC4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCBBbnkgbnVtYmVyCiAgICogQHJldHVybnMge251bWJlcn0gVGhlIHNxdWFyZSByb290IG9mIHRoYXQgbnVtYmVyCiAgICoKICAgKiBAc2VlIHtAbGluayBjYnJ0fQogICAqIEBzZWUge0BsaW5rIHBvd30KICAgKi8KICBzcXJ0LAoKICAvKioKICAgKiBUaGUgdGFuZ2VudCBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgdGFuZ2VudAogICAqLwogIHRhbiwKCiAgLyoqCiAgICogVGhlIGh5cGVyYm9saWMgdGFuZ2VudCBmdW5jdGlvbgogICAqCiAgICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVyc2VfaHlwZXJib2xpY19mdW5jdGlvbnMjRGVmaW5pdGlvbnNfaW5fdGVybXNfb2ZfbG9nYXJpdGhtcwogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaHlwZXJib2xpYyB0YW5nZW50CiAgICoKICAgKiBAc2VlIHtAbGluayB0YW59CiAgICogQHNlZSB7QGxpbmsgYXNpbmh9CiAgICogQHNlZSB7QGxpbmsgYWNvc2h9CiAgICovCiAgdGFuaCwKCiAgLyoqCiAgICogVHJ1bmNhdGUgYSBmcmFjdGlvbiB0byBhbiBpbnRlZ2VyIGJ5IHNpbXBseSBkcm9wcGluZyB0aGUgZnJhY3Rpb25hbCBwYXJ0LgogICAqIE5vdGUgdGhhdCB0aGlzIGRpZmZlcnMgZnJvbSB0aGUgYGZsb29yYCBmdW5jdGlvbjoKICAgKgogICAqIGBgYAogICAqIGZsb29yKDQuMik7ICAvLyA0CiAgICogZmxvb3IoLTQuMik7IC8vIC01CiAgICoKICAgKiB0cnVuYyg0LjIpOyAgLy8gNAogICAqIHRydW5jKC00LjIpOyAvLyAtNAogICAqIGBgYAogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IEFueSBudW1iZXIKICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW50ZWdlciBwYXJ0IG9ubHkgb2YgdGhhdCBudW1iZXIKICAgKgogICAqIEBzZWUge0BsaW5rIGZsb29yfQogICAqLwogIHRydW5jLAp9ID0gTWF0aDsKCi8qKgogKiBHZXQgdGhlIGJpbm9taWFsIGNvZWZmaWNpZW50IChuIGNob29zZSBrKS4KICoKICogQHBhcmFtIHtudW1iZXJ9IG4gQSBwb3NpdGl2ZSBpbnRlZ2VyCiAqIEBwYXJhbSB7bnVtYmVyfSBrIEEgcG9zaXRpdmUgaW50ZWdlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG5gCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB2YWx1ZSAobiBjaG9vc2UgaykKICovCmZ1bmN0aW9uIGJpbm9taWFsKG4sIGspIHsKICBpZiAobiA9PT0gMCkgcmV0dXJuIDE7CiAgdmFyIGx1dCA9IF9fYmlub21pYWxDb2VmZmljaWVudHM7CiAgd2hpbGUgKG4gPj0gbHV0Lmxlbmd0aCkgewogICAgdmFyIHMgPSBsdXQubGVuZ3RoOwogICAgdmFyIG5leHRSb3cgPSBbMV07CiAgICBmb3IgKHZhciBpID0gMSwgcHJldiA9IHMgLSAxOyBpIDwgczsgaSsrKSB7CiAgICAgIG5leHRSb3dbaV0gPSBsdXRbcHJldl1baSAtIDFdICsgbHV0W3ByZXZdW2ldOwogICAgfQogICAgbmV4dFJvd1tzXSA9IDE7CiAgICBsdXQucHVzaChuZXh0Um93KTsKICB9CiAgcmV0dXJuIGx1dFtuXVtrXTsKfQoKLyoqCiAqIENvbnN0cmFpbiBhIG51bWJlciB0byB3aXRoaW4gYSBnaXZlbiByYW5nZS4KICogVGhpcyBpcyByZWFsbHkgbm90aGluZyBtb3JlIHRoYW4gYSBjb252ZW5pZW50CiAqIGZ1bmN0aW9uIHdyYXBwZXIgYXJvdW5kIHRoZSBzdGF0ZW1lbnQ6CiAqCiAqIGBgYAogKiB2IDwgcyA/IHMgOiB2ID4gZSA/IGUgOiB2CiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnN0cmFpbgogKiBAcGFyYW0ge251bWJlcn0gbG93ZXJCb3VuZCBUaGUgbG93ZXIgYm91bmQgb24gb3VyIHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlckJvdW5kIFRoZSB1cHBlciBib3VuZCBvbiBvdXIgdmFsdWUKICogQHJldHVybnMge251bWJlcn0gVGhlIHZhbHVlLCBpZiBpdCBmYWxscyB3aXRoaW5nIFtsb3dlckJvdW5kLHVwcGVyQm91bmRdLCBvdGhlcndpc2Ugb25lIG9mIHRob3NlIGJvdW5kcy4KICoKICogQHNlZSB7QGxpbmsgY29uc3RyYWluTWFwfQogKi8KZnVuY3Rpb24gY29uc3RyYWluKHYsIHMsIGUpIHsKICByZXR1cm4gdiA8IHMgPyBzIDogdiA+IGUgPyBlIDogdjsKfQoKLyoqCiAqIFRoZSBjb3NlY2FudCBmdW5jdGlvbiwgd2hpY2ggaXM6CiAqCiAqIGBgYAogKiAxIC8gc2luKHYpCiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIGlucHV0IHZhbHVlLCBpbiByYWRpYW5zLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY29zZWNhbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayBzZWN9CiAqLwpmdW5jdGlvbiBjc2ModikgewogIHJldHVybiAxIC8gc2luKHYpOwp9CgovKioKICogVGhlIGNvdGFuZ2VudCBmdW5jdGlvbiwgd2hpY2ggaXM6CiAqCiAqIGBgYAogKiBjb3ModikgLyBzaW4odikKICogYGBgCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgaW5wdXQgdmFsdWUsIGluIHJhZGlhbnMuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjb3RhbmdlbnQgb2Ygb3VyIHZhbHVlLgogKgogKiBAc2VlIHtAbGluayB0YW59CiAqLwpmdW5jdGlvbiBjdG4odikgewogIHJldHVybiBjb3ModikgLyBzaW4odik7Cn0KCi8qKgogKiBDb252ZXJ0IGEgbnVtYmVyIGluIHJhZGlhbnMgdG8gYSBudW1iZXIgaW4gZGVncmVlcy4KICogVGhpcyBpcyByZWFsbHkgbm90aGluZyBtb3JlIHRoYW4gYSBjb252ZW5pZW50CiAqIGZ1bmN0aW9uIHdyYXBwZXIgYXJvdW5kIHRoZSBzdGF0ZW1lbnQ6CiAqCiAqIGBgYAogKiB2L1BJICogMTgwCiAqIGBgYAogKgogKiBXaXRoIG9uZSB0cmljaywgaW4gdGhhdCBpdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB0aGUKICogcmVzdWx0YW50IHZhbHVlIHRvIHRoZSBzdGFuZGFyZCBbMCwgMzYwXSBpbnRlcnZhbC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb25zdHJhaW4KICogQHBhcmFtIHtib29sZWFufSBjb25zdHJhaW4/IEEgYm9vbGVhbiB0aGF0IGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gY29uc3RyYWluIHRoZSByZXN1bHRhbnQgdmFsdWUgdG8gWzAsIDM2MF0gKGRlZmF1bHQgPSBmYWxzZSkKICogQHJldHVybnMge251bWJlcn0gVGhlIGRlZ3JlZSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbnB1dCB2YWx1ZSBpbiByYWRpYW5zLCBvcHRpb25hbGx5IGNvbnN0cmFpbmVkIHRvIFswLCAzNjBdCiAqCiAqIEBzZWUge0BsaW5rIHJhZGlhbnN9CiAqIEBzZWUge0BsaW5rIGNvbnN0cmFpbn0KICovCmZ1bmN0aW9uIGRlZ3JlZXModiwgY29uc3RyYWluID0gZmFsc2UpIHsKICBsZXQgZCA9ICh2IC8gUEkpICogMTgwOwogIGlmICghY29uc3RyYWluKSByZXR1cm4gZDsKICB3aGlsZSAoZCA8IDApIGQgKz0gMzYwOwogIHJldHVybiBkICUgMzYwOwp9CgovKioKICogQ2FsY3VsYXRlIHRoZSAyRCBFdWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLgogKgogKiBAcGFyYW0ge251bWJlcn0geDEgVGhlIGZpcnN0IHBvaW50J3MgeCBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geTEgVGhlIGZpcnN0IHBvaW50J3MgeSBwaXhlbCB2YWx1ZQogKiBAcGFyYW0ge251bWJlcn0geDIgVGhlIHNlY29uZCBwb2ludCdzIHggcGl4ZWwgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkyIFRoZSBzZWNvbmQgcG9pbnQncyB5IHBpeGVsIHZhbHVlCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBldWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIGNvb3JkaW5hdGVzCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwMSBUaGUgZmlyc3QgcG9pbnQncyB7eCx5fSBjb29yZGluYXRlCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwMiBUaGUgc2Vjb25kIHBvaW50J3Mge3gseX0gY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBjb29yZGluYXRlcwogKi8KZnVuY3Rpb24gZGlzdCh4MSwgeTEsIHgyLCB5MikgewogIGlmICh4MS54ICE9PSB1bmRlZmluZWQgJiYgeDEueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5MiA9IHkxLnk7CiAgICB4MiA9IHkxLng7CiAgICB5MSA9IHgxLnk7CiAgICB4MSA9IHgxLnk7CiAgfQogIGNvbnN0IGR4ID0geDIgLSB4MTsKICBjb25zdCBkeSA9IHkyIC0geTE7CiAgcmV0dXJuIGh5cG90KGR4LCBkeSk7Cn0KCi8qKgogKiBQZXJmb3JtcyBhIGxpbmUvbGluZSBpbnRlcnNlY3Rpb24gdGVzdCBnaXZlIGVpdGhlciBmb3VyIHBvaW50cwogKiBkZWZpbmluZyB0aGUgbGluZXMgKHAxLS1wMikgYW5kIChwMy0tcDQpLCBvciBlaWdodCBjb29yZGluYXRlcwogKiBzcGFubmluZyBsaW5lcyAoeDEseTEpLS0oeDIseTIpIGFuZCAoeDMseTMpLS0oeDQseTQpLgogKgogKiBUaGlzIGZ1bmN0aW9uIGNvdmVycyBib3RoICJsaW5lL2xpbmUiIGFuZCAic2VnbWVudCIvInNlZ21lbnQiCiAqIHRlc3RpbmcgYnkgc2V0dGluZyBhIGJvb2xlYW4gdmFsdWUgYGluQm91bmRzYCBvbiB0aGUgcmVzdWx0OgogKiB3aGVuIGZhbHNlLCB0aGVyZSBpcyBvbmx5IGEgbGluZS9saW5lIGludGVyc2VjdGlvbiwgYnV0IHdoZW4KICogdHJ1ZSwgdGhlIGFjdHVhbCBsaW5lIHNlZ21lbnRzIGludGVyc2VjdC4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIGNlbnRlcigpOwogKiAgICAgICAvLyAuLi5jb2RlIGdvZXMgaGVyZS4uLgogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB4MSBUaGUgZmlyc3QgcG9pbnQncyB4IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHkxIFRoZSBmaXJzdCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geDIgVGhlIHNlY29uZCBwb2ludCdzIHggY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geTIgVGhlIHNlY29uZCBwb2ludCdzIHkgY29vcmRpbmF0ZQogKiBAcGFyYW0ge251bWJlcn0geDMgVGhlIHRoaXJkIHBvaW50J3MgeCBjb29yZGluYXRlCiAqIEBwYXJhbSB7bnVtYmVyfSB5MyBUaGUgdGhpcmQgcG9pbnQncyB5IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHg0IFRoZSBmb3VydGggcG9pbnQncyB4IGNvb3JkaW5hdGUKICogQHBhcmFtIHtudW1iZXJ9IHk0IFRoZSBmb3VydGggcG9pbnQncyB5IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZXxmYWxzZX0gRWl0aGVyIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQsIG9yIGZhbHNlIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbgogKgogKiBAcGFyYW0ge1BvaW50TGluZX0gcDEgVGhlIGZpcnN0IGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpbmV9IHAyIFRoZSBzZWNvbmQgY29vcmRpbmF0ZQogKiBAcGFyYW0ge1BvaW50TGluZX0gcDMgVGhlIHRoaXJkIGNvb3JkaW5hdGUKICogQHBhcmFtIHtQb2ludExpbmV9IHA0IFRoZSBmb3VydGggY29vcmRpbmF0ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfGZhbHNlfSBFaXRoZXIgdGhlIGludGVyc2VjdGlvbiBwb2ludCwgb3IgZmFsc2UgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uCiAqLwpmdW5jdGlvbiBsbGkoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7CiAgaWYgKHgxLnggIT09IHVuZGVmaW5lZCAmJiB4MS55ICE9PSB1bmRlZmluZWQpIHsKICAgIHk0ID0geTIueTsKICAgIHg0ID0geTIueDsKICAgIHkzID0geDIueTsKICAgIHgzID0geDIueDsKICAgIHkyID0geTEueTsKICAgIHgyID0geTEueDsKICAgIHkxID0geDEueTsKICAgIHgxID0geDEueDsKICB9CiAgY29uc3QgbnggPSAoeDEgKiB5MiAtIHkxICogeDIpICogKHgzIC0geDQpIC0gKHgxIC0geDIpICogKHgzICogeTQgLSB5MyAqIHg0KTsKICBjb25zdCBueSA9ICh4MSAqIHkyIC0geTEgKiB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgKiB5NCAtIHkzICogeDQpOwogIGNvbnN0IGQgPSAoeDEgLSB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgLSB4NCk7CgogIGlmIChkID09PSAwKSByZXR1cm4gZmFsc2U7CgogIGNvbnN0IHIgPSB7IHg6IG54IC8gZCwgeTogbnkgLyBkLCBpbkJvdW5kczogdHJ1ZSB9OwogIGxldCBhID0geDE7CiAgbGV0IGIgPSB4MjsKICBpZiAoeDEgPiB4MikgewogICAgYSA9IHgyOwogICAgYiA9IHgxOwogIH0KICBpZiAoci54IDwgYSB8fCByLnggPiBiKSByLmluQm91bmRzID0gZmFsc2U7CiAgZWxzZSB7CiAgICBhID0geTE7CiAgICBiID0geTI7CiAgICBpZiAoeTEgPiB5MikgewogICAgICBhID0geTI7CiAgICAgIGIgPSB5MTsKICAgIH0KICAgIGlmIChyLnkgPCBhIHx8IHIueSA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICAgIGVsc2UgewogICAgICBhID0geDM7CiAgICAgIGIgPSB4NDsKICAgICAgaWYgKHgzID4geDQpIHsKICAgICAgICBhID0geDQ7CiAgICAgICAgYiA9IHgzOwogICAgICB9CiAgICAgIGlmIChyLnggPCBhIHx8IHIueCA+IGIpIHIuaW5Cb3VuZHMgPSBmYWxzZTsKICAgICAgZWxzZSB7CiAgICAgICAgYSA9IHkzOwogICAgICAgIGIgPSB5NDsKICAgICAgICBpZiAoeTMgPiB5NCkgewogICAgICAgICAgYSA9IHk0OwogICAgICAgICAgYiA9IHkzOwogICAgICAgIH0KICAgICAgICBpZiAoci55IDwgYSB8fCByLnkgPiBiKSByLmluQm91bmRzID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIHI7Cn0KCi8qKgogKiBNYXAgYSB2YWx1ZSBmcm9tIG9uZSBpbnRlcnZhbCB0byBhbm90aGVyLCBvcHRpb25hbGx5CiAqIGNvbnN0cmFpbmVkIHRvIHRoZSB0YXJnZXQgaW50ZXJ2YWwuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBPdXIgaW5wdXQgdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbmFsU3RhcnQgVGhlIGxvd2VyIGJvdW5kIG9mIG91ciBkb21haW4KICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbmFsRW5kIFRoZSB1cHBlciBib3VuZCBvZiBvdXIgZG9tYWluCiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdTdGFydCBUaGUgbG93ZXIgYm91bmQgb2Ygb3VyIHRhcmdldCBpbnRlcnZhbAogKiBAcGFyYW0ge251bWJlcn0gbmV3RW5kIFRoZSB1cHBlciBib3VuZCBvbiBvdXIgdGFyZ2V0IGludGVydmFsCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29uc3RyYWluPyAgQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb25zdHJhaW4gdGhlIHJlc3VsdGFudCB2YWx1ZSB0byBbbmV3U3RhcnQsbmV3RW5kXSAoZGVmYXVsdCA9IGZhbHNlKQogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVzdWx0IG9mIG1hcHBpbmcgb3VyIHZhbHVlIGZyb20gb3VyIGRvbWFpbiBpbnRlcnZhbCB0byBvdXIgdGFyZ2V0IGludGVydmFsLCBvcHRpb25hbGx5IGNvbnN0cmFpbmVkIHRvIHRoZSB0YXJnZXQgaW50ZXJ2YWwuCiAqCiAqIEBzZWUge0BsaW5rIGNvbnN0cmFpbn0KICogQHNlZSB7QGxpbmsgY29uc3RyYWluTWFwfQogKi8KZnVuY3Rpb24gbWFwKHYsIHMsIGUsIG5zLCBuZSwgY29uc3RyYWluZWQgPSBmYWxzZSkgewogIGNvbnN0IGkxID0gZSAtIHMsCiAgICBpMiA9IG5lIC0gbnMsCiAgICBwID0gdiAtIHM7CiAgbGV0IHIgPSBucyArIChwICogaTIpIC8gaTE7CiAgaWYgKGNvbnN0cmFpbmVkKSByZXR1cm4gY29uc3RyYWluKHIsIG5zLCBuZSk7CiAgcmV0dXJuIHI7Cn0KCi8qKgogKiBDb252ZXJ0IGEgbnVtYmVyIGluIGRlZ3JlZXMgdG8gYSBudW1iZXIgaW4gcmFkaWFucy4KICogVGhpcyBpcyByZWFsbHkgbm90aGluZyBtb3JlIHRoYW4gYSBjb252ZW5pZW50CiAqIGZ1bmN0aW9uIHdyYXBwZXIgYXJvdW5kIHRoZSBzdGF0ZW1lbnQ6CiAqCiAqIGBgYAogKiB2LzE4MCAqIFBJCiAqIGBgYAogKgogKiBXaXRoIG9uZSB0cmljaywgaW4gdGhhdCBpdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB0aGUKICogcmVzdWx0YW50IHZhbHVlIHRvIHRoZSBzdGFuZGFyZCBbMCwgVEFVXSBpbnRlcnZhbC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb25zdHJhaW4KICogQHBhcmFtIHtib29sZWFufSBjb25zdHJhaW4/IEEgYm9vbGVhbiB0aGF0IGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gY29uc3RyYWluIHRoZSByZXN1bHRhbnQgdmFsdWUgdG8gWzAsIFRBVV0gKGRlZmF1bHQgPSBmYWxzZSkKICogQHJldHVybnMge251bWJlcn0gVGhlIHJhZGlhbnMgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgaW5wdXQgdmFsdWUgaW4gZGVncmVlcywgb3B0aW9uYWxseSBjb25zdHJhaW5lZCB0byBbMCwgVEFVXQogKgogKiBAc2VlIHtAbGluayBkZWdyZWVzfQogKiBAc2VlIHtAbGluayBjb25zdHJhaW59CiAqLwpmdW5jdGlvbiByYWRpYW5zKHYsIGNvbnN0cmFpbiA9IGZhbHNlKSB7CiAgbGV0IHIgPSAodiAvIDE4MCkgKiBQSTsKICBpZiAoIWNvbnN0cmFpbikgcmV0dXJuIHI7CiAgd2hpbGUgKHIgPCAwKSByICs9IFRBVTsKICByZXR1cm4gciAlIFRBVTsKfQoKLyoqCiAqIEdlbmVyYXRlIGEgcHNldWRvLXJhbmRvbSBudW1iZXIuCiAqCiAqIFRoaXMgaXMgYmFzZWQgb24gdGhlIFNwbGl0TWl4MzIgYWxnb3JpdGhtLCBjb3ZlcmVkCiAqIG92ZXIgb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3NTkzMzE2Lzc0MDU1MwogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBzZXRGb250U2l6ZSgyMCk7CiAqICAgICAgIHJhbmdlKDAsIGhlaWdodCArIDIwLCAyMCwgKHYpID0+IHsKICogICAgICAgICB0ZXh0KHJhbmRvbSgpLCA1LCB2KTsKICogICAgICAgfSkKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKgogKgogKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgaW4gdGhlIGludGVydmFsIFswLDEpCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhIFRoZSB1cHBlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBudW1iZXIKICogQHJldHVybnMge251bWJlcn0gQSByYW5kb20gbnVtYmVyIGluIHRoZSBpbnRlcnZhbCBbMCxhKQogKgogKiBAcGFyYW0ge251bWJlcn0gYSBUaGUgbG93ZXIgYm91bmQgZm9yIHRoZSByYW5kb20gbnVtYmVyCiAqIEBwYXJhbSB7bnVtYmVyfSBiIFRoZSB1cHBlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBudW1iZXIKICogQHJldHVybnMge251bWJlcn0gQSByYW5kb20gbnVtYmVyIGluIHRoZSBpbnRlcnZhbCBbYSwgYikKICoKICogQHNlZSB7QGxpbmsgcmFuZG9tU2VlZH0KICovCmZ1bmN0aW9uIHJhbmRvbShhID0gMSwgYikgewogIGNvbnN0IHIgPSBfX3BybmcubmV4dCgpOwogIGlmIChiID09PSB1bmRlZmluZWQpIHJldHVybiBhICogcjsKICByZXR1cm4gYSArIHIgKiAoYiAtIGEpOwp9CgovKioKICogU2V0IHRoZSBwc2V1ZG8tcmFuZG9tIG51bWJlciBnZW5lcmF0b3Igc2VlZC4gSWYgbm8gc2VlZAogKiB2YWx1ZSBpcyBwcm92aWRlZCwgdGhpcyBpcyBlcXVpdmFsZW50IHRvIGNhbGxpbmc6CiAqCiAqIGBgYAogKiByYW5kb21TZWVkKERhdGUubm93KCkgKiBNYXRoLnJhbmRvbSgpKQogKiBgYGAKICoKICogQHBhcmFtIHtudW1iZXJ9IHNlZWQ/IFRoZSByYW5kb20gc2VlZCB2YWx1ZS4KICoKICogQHNlZSB7QGxpbmsgcmFuZG9tfQogKi8KZnVuY3Rpb24gcmFuZG9tU2VlZChzZWVkID0gRGF0ZS5ub3coKSAqIE1hdGgucmFuZG9tKCkpIHsKICBfX3BybmcucmVzZWVkKHNlZWQpOwp9CgovKioKICogVGhlIHNlY2FudCBmdW5jdGlvbiwgd2hpY2ggaXM6CiAqCiAqIGBgYAogKiAxIC8gY29zKHYpCiAqIGBgYAogKgogKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIGlucHV0IHZhbHVlLCBpbiByYWRpYW5zLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2VjYW50IG9mIG91ciB2YWx1ZS4KICoKICogQHNlZSB7QGxpbmsgY3NjfQogKi8KZnVuY3Rpb24gc2VjKHYpIHsKICByZXR1cm4gMSAvIGNvcyh2KTsKfQovKioKICogSW52ZXJ0IGEgbWF0cml4LCBvciB1bmRlZmluZWQgaWYgdGhlIG1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZS4KICoKICogQHBhcmFtIHtNYXRyaXh9IE0gVGhlIG1hdHJpeCB0byBpbnZlcnQKICogQHJldHVybnMge251bWJlcltdW119IFRoZSBtYXRyaXggaW52ZXJzZSBhcyAyRCBudW1iZXIgYXJyYXkKICovCmZ1bmN0aW9uIGludmVydE1hdHJpeChNKSB7CiAgLy8gQ29waWVkIGZyb20gaHR0cDovL2Jsb2cuYWNpcG8uY29tL21hdHJpeC1pbnZlcnNpb24taW4tamF2YXNjcmlwdC8KICAvLyBXaXRoIHBlcm1pc3Npb24sIGh0dHA6Ly9ibG9nLmFjaXBvLmNvbS9tYXRyaXgtaW52ZXJzaW9uLWluLWphdmFzY3JpcHQvI2NvbW1lbnQtNTA1NzI4OTg4OQoKICAvLyAoMSkgJ2F1Z21lbnQnIHRoZSBtYXRyaXggKGxlZnQpIGJ5IHRoZSBpZGVudGl0eSAob24gdGhlIHJpZ2h0KQogIC8vICgyKSBUdXJuIHRoZSBtYXRyaXggb24gdGhlIGxlZnQgaW50byB0aGUgaWRlbnRpdHkgYnkgZWxlbWV0cnkgcm93IG9wcwogIC8vICgzKSBUaGUgbWF0cml4IG9uIHRoZSByaWdodCBpcyB0aGUgaW52ZXJzZSAod2FzIHRoZSBpZGVudGl0eSBtYXRyaXgpCiAgLy8gVGhlcmUgYXJlIDMgZWxlbXRhcnkgcm93IG9wczoKICAvLyAoYSkgU3dhcCAyIHJvd3MKICAvLyAoYikgTXVsdGlwbHkgYSByb3cgYnkgYSBzY2FsYXIKICAvLyAoYykgQWRkIDIgcm93cwoKICAvLyBpZiB0aGUgbWF0cml4IGlzbid0IHNxdWFyZTogZXhpdCAoZXJyb3IpCiAgaWYgKE0ubGVuZ3RoICE9PSBNWzBdLmxlbmd0aCkgewogICAgY29uc29sZS53YXJuKCJDYW5ub3QgaW52ZXJ0IG5vbi1zcXVhcmUgbWF0cmljZXMiKTsKICAgIHJldHVybjsKICB9CgogIC8vIGNyZWF0ZSB0aGUgaWRlbnRpdHkgbWF0cml4IChJKSwgYW5kIGEgY29weSAoQykgb2YgdGhlIG9yaWdpbmFsCiAgdmFyIGkgPSAwLAogICAgaWkgPSAwLAogICAgaiA9IDAsCiAgICBkaW0gPSBNLmxlbmd0aCwKICAgIGUgPSAwLAogICAgdCA9IDA7CiAgdmFyIEkgPSBbXSwKICAgIEMgPSBbXTsKICBmb3IgKGkgPSAwOyBpIDwgZGltOyBpICs9IDEpIHsKICAgIC8vIENyZWF0ZSB0aGUgcm93CiAgICBJW0kubGVuZ3RoXSA9IFtdOwogICAgQ1tDLmxlbmd0aF0gPSBbXTsKICAgIGZvciAoaiA9IDA7IGogPCBkaW07IGogKz0gMSkgewogICAgICAvL2lmIHdlJ3JlIG9uIHRoZSBkaWFnb25hbCwgcHV0IGEgMSAoZm9yIGlkZW50aXR5KQogICAgICBpZiAoaSA9PSBqKSB7CiAgICAgICAgSVtpXVtqXSA9IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgSVtpXVtqXSA9IDA7CiAgICAgIH0KCiAgICAgIC8vIEFsc28sIG1ha2UgdGhlIGNvcHkgb2YgdGhlIG9yaWdpbmFsCiAgICAgIENbaV1bal0gPSBNW2ldW2pdOwogICAgfQogIH0KCiAgLy8gUGVyZm9ybSBlbGVtZW50YXJ5IHJvdyBvcGVyYXRpb25zCiAgZm9yIChpID0gMDsgaSA8IGRpbTsgaSArPSAxKSB7CiAgICAvLyBnZXQgdGhlIGVsZW1lbnQgZSBvbiB0aGUgZGlhZ29uYWwKICAgIGUgPSBDW2ldW2ldOwoKICAgIC8vIGlmIHdlIGhhdmUgYSAwIG9uIHRoZSBkaWFnb25hbCAod2UnbGwgbmVlZCB0byBzd2FwIHdpdGggYSBsb3dlciByb3cpCiAgICBpZiAoZSA9PSAwKSB7CiAgICAgIC8vbG9vayB0aHJvdWdoIGV2ZXJ5IHJvdyBiZWxvdyB0aGUgaSd0aCByb3cKICAgICAgZm9yIChpaSA9IGkgKyAxOyBpaSA8IGRpbTsgaWkgKz0gMSkgewogICAgICAgIC8vaWYgdGhlIGlpJ3RoIHJvdyBoYXMgYSBub24tMCBpbiB0aGUgaSd0aCBjb2wKICAgICAgICBpZiAoQ1tpaV1baV0gIT0gMCkgewogICAgICAgICAgLy9pdCB3b3VsZCBtYWtlIHRoZSBkaWFnb25hbCBoYXZlIGEgbm9uLTAgc28gc3dhcCBpdAogICAgICAgICAgZm9yIChqID0gMDsgaiA8IGRpbTsgaisrKSB7CiAgICAgICAgICAgIGUgPSBDW2ldW2pdOyAvL3RlbXAgc3RvcmUgaSd0aCByb3cKICAgICAgICAgICAgQ1tpXVtqXSA9IENbaWldW2pdOyAvL3JlcGxhY2UgaSd0aCByb3cgYnkgaWkndGgKICAgICAgICAgICAgQ1tpaV1bal0gPSBlOyAvL3JlcGFjZSBpaSd0aCBieSB0ZW1wCiAgICAgICAgICAgIGUgPSBJW2ldW2pdOyAvL3RlbXAgc3RvcmUgaSd0aCByb3cKICAgICAgICAgICAgSVtpXVtqXSA9IElbaWldW2pdOyAvL3JlcGxhY2UgaSd0aCByb3cgYnkgaWkndGgKICAgICAgICAgICAgSVtpaV1bal0gPSBlOyAvL3JlcGFjZSBpaSd0aCBieSB0ZW1wCiAgICAgICAgICB9CiAgICAgICAgICAvL2Rvbid0IGJvdGhlciBjaGVja2luZyBvdGhlciByb3dzIHNpbmNlIHdlJ3ZlIHN3YXBwZWQKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICAvL2dldCB0aGUgbmV3IGRpYWdvbmFsCiAgICAgIGUgPSBDW2ldW2ldOwogICAgICAvL2lmIGl0J3Mgc3RpbGwgMCwgbm90IGludmVydGlibGUgKGVycm9yKQogICAgICBpZiAoZSA9PSAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9CgogICAgLy8gU2NhbGUgdGhpcyByb3cgZG93biBieSBlIChzbyB3ZSBoYXZlIGEgMSBvbiB0aGUgZGlhZ29uYWwpCiAgICBmb3IgKGogPSAwOyBqIDwgZGltOyBqKyspIHsKICAgICAgQ1tpXVtqXSA9IENbaV1bal0gLyBlOyAvL2FwcGx5IHRvIG9yaWdpbmFsIG1hdHJpeAogICAgICBJW2ldW2pdID0gSVtpXVtqXSAvIGU7IC8vYXBwbHkgdG8gaWRlbnRpdHkKICAgIH0KCiAgICAvLyBTdWJ0cmFjdCB0aGlzIHJvdyAoc2NhbGVkIGFwcHJvcHJpYXRlbHkgZm9yIGVhY2ggcm93KSBmcm9tIEFMTCBvZgogICAgLy8gdGhlIG90aGVyIHJvd3Mgc28gdGhhdCB0aGVyZSB3aWxsIGJlIDAncyBpbiB0aGlzIGNvbHVtbiBpbiB0aGUKICAgIC8vIHJvd3MgYWJvdmUgYW5kIGJlbG93IHRoaXMgb25lCiAgICBmb3IgKGlpID0gMDsgaWkgPCBkaW07IGlpKyspIHsKICAgICAgLy8gT25seSBhcHBseSB0byBvdGhlciByb3dzICh3ZSB3YW50IGEgMSBvbiB0aGUgZGlhZ29uYWwpCiAgICAgIGlmIChpaSA9PSBpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIC8vIFdlIHdhbnQgdG8gY2hhbmdlIHRoaXMgZWxlbWVudCB0byAwCiAgICAgIGUgPSBDW2lpXVtpXTsKCiAgICAgIC8vIFN1YnRyYWN0ICh0aGUgcm93IGFib3ZlKG9yIGJlbG93KSBzY2FsZWQgYnkgZSkgZnJvbSAodGhlCiAgICAgIC8vIGN1cnJlbnQgcm93KSBidXQgc3RhcnQgYXQgdGhlIGkndGggY29sdW1uIGFuZCBhc3N1bWUgYWxsIHRoZQogICAgICAvLyBzdHVmZiBsZWZ0IG9mIGRpYWdvbmFsIGlzIDAgKHdoaWNoIGl0IHNob3VsZCBiZSBpZiB3ZSBtYWRlIHRoaXMKICAgICAgLy8gYWxnb3JpdGhtIGNvcnJlY3RseSkKICAgICAgZm9yIChqID0gMDsgaiA8IGRpbTsgaisrKSB7CiAgICAgICAgQ1tpaV1bal0gLT0gZSAqIENbaV1bal07IC8vYXBwbHkgdG8gb3JpZ2luYWwgbWF0cml4CiAgICAgICAgSVtpaV1bal0gLT0gZSAqIElbaV1bal07IC8vYXBwbHkgdG8gaWRlbnRpdHkKICAgICAgfQogICAgfQogIH0KCiAgLy93ZSd2ZSBkb25lIGFsbCBvcGVyYXRpb25zLCBDIHNob3VsZCBiZSB0aGUgaWRlbnRpdHkKICAvL21hdHJpeCBJIHNob3VsZCBiZSB0aGUgaW52ZXJzZToKICByZXR1cm4gSTsKfQoKLyoqCiAqIE11bHRpcGx5IHR3byBtYXRyaWNlcwogKgogKiBAcGFyYW0ge01hdHJpeH0gbTEKICogQHBhcmFtIHtNYXRyaXh9IG0yCiAqIEByZXR1cm5zIHtudW1iZXJbXVtdfSBUaGUgcmVzdWx0IG9mIG0xICogbTIgIGFzIDJEIG51bWJlciBhcnJheQogKi8KZnVuY3Rpb24gbXVsdGlwbHlNYXRyaXgobTEsIG0yKSB7CiAgdmFyIE0gPSBbXTsKICB2YXIgbTJ0ID0gdHJhbnNwb3NlTWF0cml4KG0yKTsKICBtMS5mb3JFYWNoKChyb3csIHIpID0+IHsKICAgIE1bcl0gPSBbXTsKICAgIG0ydC5mb3JFYWNoKChjb2wsIGMpID0+IHsKICAgICAgTVtyXVtjXSA9IHJvdy5tYXAoKHYsIGkpID0+IGNvbFtpXSAqIHYpLnJlZHVjZSgoYSwgdikgPT4gYSArIHYsIDApOwogICAgfSk7CiAgfSk7CiAgcmV0dXJuIE07Cn0KCi8qKgogKiBUcmFuc3Bvc2UgYSBtYXRyaXgKICoKICogQHBhcmFtIHtNYXRyaXh9IE0gVGhlIG1hdHJpeCB0byB0cmFuc3Bvc2UKICogQHJldHVybnMge251bWJlcltdW119IFRoZSBtYXRyaXggdHJhbnNwb3NlIGFzIDJEIG51bWJlciBhcnJheQogKi8KZnVuY3Rpb24gdHJhbnNwb3NlTWF0cml4KE0pIHsKICByZXR1cm4gTVswXS5tYXAoKGNvbCwgaSkgPT4gTS5tYXAoKHJvdykgPT4gcm93W2ldKSk7Cn0KLyoqCiAqIFByb2plY3QgYSAzRCBjb29yZGluYXRlIHRvIDJELgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRQcm9qZWN0b3Iod2lkdGggLyAyLCBoZWlnaHQgLyAyLCA1MCwgLTAuNCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAxLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgZ3JlZW5gKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgM0QgY29vcmRpbmF0ZSdzIHggdmFsdWUKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIDNEIGNvb3JkaW5hdGUncyB4IHZhbHVlCiAqIEBwYXJhbSB7bnVtYmVyfSB6IFRoZSAzRCBjb29yZGluYXRlJ3MgeCB2YWx1ZQogKiBAcmV0dXJucyB7UG9pbnRMaWtlfSBwICBUaGUgcHJvamVjdGVkIDJEIHt4LHl9IGNvb3JkaW5hdGUKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIDJEIGNvb3JkaW5hdGUgYXMge3gseSx6fSBjb29yZGluYXRlCiAqIEByZXR1cm5zIHtQb2ludExpa2V9IHAgIFRoZSBwcm9qZWN0ZWQgMkQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBzZXRQcm9qZWN0b3J9CiAqLwpmdW5jdGlvbiBwcm9qZWN0KHgsIHksIHopIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQgJiYgeC56ICE9PSB1bmRlZmluZWQpIHsKICAgIHogPSB4Lno7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgcmV0dXJuIF9fcHJvamVjdG9yLnByb2plY3QoeCwgeSwgeik7Cn0KCi8qKgogKiBTZXQgdGhlIHByb2plY3RvcidzIHgsIHksIGFuZCB6IGF4aXMgcm90YXRpb24KICogaW4gcmFkaWFucy4gTm90ZSB0aGF0IHRoZXNlIGFyZSBhcHBsaWVkIGluIG9yZGVyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRQcm9qZWN0b3Iod2lkdGggLyAyLCBoZWlnaHQgLyAyLCA1MCwgLTAuNCk7CiAqICAgICAgIHBsYXkoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBjb25zdCBtID0gbWlsbGlzKCkgLyA1MDAwOwogKiAgICAgICByb3RhdGVQcm9qZWN0b3IobSwgMiAqIG0sIDMgKiBtKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAxLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgZ3JlZW5gKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gb3ZlciB0aGUgeCBheGlzIGluIHJhZGlhbnMKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIG92ZXIgdGhlIHkgYXhpcyBpbiByYWRpYW5zCiAqIEBwYXJhbSB7bnVtYmVyfSB6IFRoZSBhbmdsZSBvZiByb3RhdGlvbiBvdmVyIHRoZSB6IGF4aXMgaW4gcmFkaWFucwogKgogKiBAc2VlIHtAbGluayBwcm9qZWN0fQogKi8KZnVuY3Rpb24gcm90YXRlUHJvamVjdG9yKHgsIHksIHopIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQgJiYgeC56ICE9PSB1bmRlZmluZWQpIHsKICAgIHogPSB4Lno7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CiAgX19wcm9qZWN0b3Iuc2V0Um90YXRpb24oeCwgeSwgeik7Cn0KCi8qKgogKiBTZXQgdGhlIHByb2plY3QgcGFyYW1ldGVycy4gQ3VycmVudGx5LCBvbmx5CiAqIGNhYmluZXQgcHJvamVjdCBpcyBzdXBwb3J0ZWQsIHdoaWNoIGFjY2VwdHMKICogdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRQcm9qZWN0b3Iod2lkdGggLyAyLCBoZWlnaHQgLyAyLCA1MCwgLTAuNCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoMSwgLTEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgLTEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KDEsIDEsIC0xKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICBsaW5lKHByb2plY3QoLTEsIC0xLCAtMSksIHByb2plY3QoLTEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAxLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAtMSwgLTEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgxLCAxLCAtMSksIHByb2plY3QoMSwgMSwgMSkpOwogKiAgICAgICBzZXRDb2xvcihgZ3JlZW5gKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIC0xKSwgcHJvamVjdCgxLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KDEsIDEsIDEpLCBwcm9qZWN0KDEsIC0xLCAxKSk7CiAqICAgICAgIGxpbmUocHJvamVjdCgtMSwgMSwgLTEpLCBwcm9qZWN0KC0xLCAtMSwgLTEpKTsKICogICAgICAgbGluZShwcm9qZWN0KC0xLCAxLCAxKSwgcHJvamVjdCgtMSwgLTEsIDEpKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0gIHtudW1iZXJ9IHhPZmZzZXQgb2YgdGhlIHByb2plY3Rpb24gd3J0IHRoZSBjYW52YXMgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0gIHtudW1iZXJ9IHlPZmZzZXQgb2YgdGhlIHByb2plY3Rpb24gd3J0IHRoZSBjYW52YXMgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0gIHtudW1iZXJ9IHNjYWxlIGZhY3RvciBmb3IgdGhlIDNEIGlucHV0IChkZWZhdWx0ID0gMSkKICogQHBhcmFtICB7bnVtYmVyfSBjYWJpbmV0IGFuZ2xlIGluIHJhZGlhbnMgKGRlZmF1bHQgPSAtcGkvNikKICoKICogQHNlZSB7QGxpbmsgcHJvamVjdH0KICovCmZ1bmN0aW9uIHNldFByb2plY3RvciguLi5hcmdzKSB7CiAgX19wcm9qZWN0b3IudXBkYXRlKC4uLmFyZ3MpOwp9Ci8qKgogKiBTZXQgYSBib3JkZXIgYXJvdW5kIHRoZSBjYW52YXMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIHNldEJvcmRlcigxMCwgYHJlZGApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7bnVtYmVyfGJvb2xlYW59IHdpZHRoPyBUaGUgd2lkdGggb2YgdGhlIGJvcmRlciBpbiBwaXhlbHMsIGRpc2FibGluZyB0aGUgYm9yZGVyIG9taXR0ZWQKICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yPyBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlciAoZGVmYXVsdCA9IGJsYWNrKQogKgogKiBAc2VlIHtAbGluayBub0JvcmRlcn0KICovCmZ1bmN0aW9uIHNldEJvcmRlcih3aWR0aCA9IDEsIGNvbG9yID0gYGJsYWNrYCkgewogIGlmICghd2lkdGgpIHsKICAgIF9fY2FudmFzLnN0eWxlLmJvcmRlciA9IGBub25lYDsKICB9IGVsc2UgewogICAgX19jYW52YXMuc3R5bGUuYm9yZGVyID0gYCR7d2lkdGh9cHggc29saWQgJHtjb2xvcn1gOwogIH0KfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBzdHJva2UgYW5kIGZpbGwgY29sb3VyIGF0CiAqIHRoZSBzYW1lIHRpbWUuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICByZWN0KDUwLCA1MCwgMTAwLCAxMDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlcgogKgogKiBAc2VlIHtAbGluayBzZXRTdHJva2V9CiAqIEBzZWUge0BsaW5rIHNldEZpbGx9CiAqIEBzZWUge0BsaW5rIG5vQ29sb3J9CiAqLwpmdW5jdGlvbiBzZXRDb2xvcihjb2xvcikgewogIHNldEZpbGwoY29sb3IpOwogIHNldFN0cm9rZShjb2xvcik7Cn0KCi8qKgogKiBDaGFuZ2UgdGhlIGN1cnNvciB0byBhIHNwZWNpZmljIGljb246CiAqCiAqIC0gQVVUTyAtIHVzZSB3aGF0ZXZlciB0aGUgYnJvd3NlciB3b3VsZCBvdGhlcndpc2UgdXNlCiAqIC0gQ1JPU1MgLSB1c2UgYSBjcm9zcy1oYWlyIGljb24KICogLSBQT0lOVEVSIC0gdXNlIHRoZSAicG9pbnRlciIgaWNvbiB0aGF0IGlzIGFsc28gdXNlZCBmb3IgY2xpY2thYmxlIGxpbmtzCiAqCiAqIFVzZSBhbnkgb3RoZXIgc3RyaW5nIGZvdW5kIG92ZXIgb24gdGhlIE1ETiBjdXJzb3IgYXJ0aWNsZSB0byBzZXQgYSBjdXJzb3Igbm90IGNvdmVyZWQgYnkgdGhlIGFib3ZlIGNvbnN0YW50cy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGB3aGl0ZWApOwogKiAgICAgICBzZXRDb2xvcihgI0ZGMDJgKTsKICogICAgICAgcmVjdCgwLCAwLCB3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgICBzZXRDb2xvcihgIzBGRjJgKTsKICogICAgICAgcmVjdCh3aWR0aC8yLCAwLCB3aWR0aC8yLCBoZWlnaHQpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gcG9pbnRlck1vdmUoeCwgeSkgewogKiAgICAgICBpZiAoeCA8IHdpZHRoLzIpIHsKICogICAgICAgICBzZXRDdXJzb3IoQVVUTyk7CiAqICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgbm9DdXJzb3IoKTsKICogICAgICAgfQogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBDU1MgY3Vyc29yIHR5cGUKICoKICogQHNlZSB7QGxpbmsgbm9DdXJzb3J9CiAqLwpmdW5jdGlvbiBzZXRDdXJzb3IodHlwZSkgewogIF9fY3VycmVudF9jdXJzb3IgPSB0eXBlOwogIF9fY2FudmFzLnN0eWxlLmN1cnNvciA9IF9fY3VycmVudF9jdXJzb3I7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgZmlsbCBjb2xvdXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICByZWN0KDUwLCA1MCwgMTAwLCAxMDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlciAoZGVmYXVsdCA9IGJsYWNrKQogKgogKiBAc2VlIHtAbGluayBub0ZpbGx9CiAqLwpmdW5jdGlvbiBzZXRGaWxsKGNvbG9yID0gYGJsYWNrYCkgewogIGlmIChDU1NfQ09MT1JfTUFQW2NvbG9yXSA9PT0gX19oaWdobGlnaHRfY29sb3IpIHsKICAgIGNvbG9yID0gX19jdXJyZW50X2hpZ2hsaWdodF9jb2xvcjsKICB9CiAgX19jdHguZmlsbFN0eWxlID0gY29sb3I7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgZm9udCB1c2luZyBhIHNpbmdsZSBzdHJpbmcuIEZvciB0aGUgc3ludGF4LAogKiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnQKICoKICogQHBhcmFtIHtzdHJpbmd9IGZvbnQgQSBDU1Mgc2hvcnRoYW5kIGZvbnQgcHJvcGVydHkKICoKICogQHNlZSB7QGxpbmsgc2V0Rm9udEZhbWlseX0KICogQHNlZSB7QGxpbmsgc2V0Rm9udFNpemV9CiAqIEBzZWUge0BsaW5rIHNldEZvbnRXZWlnaHR9CiAqLwpmdW5jdGlvbiBzZXRGb250KGZvbnQpIHsKICBfX2N0eC5mb250ID0gZm9udCB8fCBgJHtfX2ZvbnQud2VpZ2h0fSAke19fZm9udC5zaXplfXB4ICR7X19mb250LmZhbWlseX1gOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IGZvbnQgZmFtaWx5LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgQ1NTIGZvbnQgZmFtaWx5IG5hbWUKICoKICogQHNlZSB7QGxpbmsgc2V0Rm9udFNpemV9CiAqIEBzZWUge0BsaW5rIHNldEZvbnRXZWlnaHR9CiAqLwpmdW5jdGlvbiBzZXRGb250RmFtaWx5KG5hbWUpIHsKICBfX2ZvbnQuZmFtaWx5ID0gbmFtZTsKICBzZXRGb250KCk7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgZm9udCBzaXplCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBweCBUaGUgZm9udCBzaXplIGluIHBpeGVscwogKgogKiBAc2VlIHtAbGluayBzZXRGb250RmFtaWx5fQogKiBAc2VlIHtAbGluayBzZXRGb250V2VpZ2h0fQogKi8KZnVuY3Rpb24gc2V0Rm9udFNpemUocHgpIHsKICBfX2ZvbnQuc2l6ZSA9IHB4OwogIHNldEZvbnQoKTsKfQoKLyoqCiAqIFNldCB0aGUgY3VycmVudCBmb250IHdlaWdodAogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbCBUaGUgQ1NTIHdlaWdodCBudW1iZXIgb3Igb25lIG9mIHRoZSBzcGVjaWFsIHN0cmluZ3MgIm5vcm1hbCIsICJib2xkIiwgImJvbGRlciIsIG9yICJsaWdodGVyIi4KICoKICogQHNlZSB7QGxpbmsgc2V0Rm9udEZhbWlseX0KICogQHNlZSB7QGxpbmsgc2V0Rm9udFNpemV9CiAqLwpmdW5jdGlvbiBzZXRGb250V2VpZ2h0KHZhbCkgewogIF9fZm9udC53ZWlnaHQgPSB2YWw7CiAgc2V0Rm9udCgpOwp9CgovKioKICogU2V0IHRoZSBiYWNrZ3JvdW5kIGdyaWQgc3BhY2luZyBhbmQgY29sb3VyLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgc2V0R3JpZCgyMCwgYGxhdmVuZGVyYCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgd2hpdGVgKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gc3BhY2luZz8gVGhlIHNwYWNpbmcgYmV0d2VlbiBncmlkIGxpbmVzIGluIHBpeGVscyAoZGVmYXVsdCA9IDIwKQogKiBAcGFyYW0ge3N0cmluZ30gY29sb3I/IFRoZSBDU1MgY29sb3IgdG8gdXNlIGZvciB0aGUgYm9yZGVyIChkZWZhdWx0ID0gbGlnaHRncmV5KQogKgogKiBAc2VlIHtAbGluayBub0dyaWR9CiAqLwpmdW5jdGlvbiBzZXRHcmlkKHNwYWNpbmcgPSAyMCwgY29sb3IgPSBgbGlnaHRncmV5YCkgewogIF9fZHJhd19ncmlkID0gdHJ1ZTsKICBfX2dyaWRfc3BhY2luZyA9IHNwYWNpbmc7CiAgX19ncmlkX2NvbG9yID0gY29sb3I7Cn0KCi8qKgogKiBTZXQgdGhlIGNvbG9yIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwbGFjZSB3aGF0ZXZlcgogKiBoaWdobGlnaHQoKSBtYXJrZWQgYXMgdGhlICJ0byBoaWdobGlnaHQiIGNvbG9yLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzZXRIaWdobGlnaHRDb2xvcihgbGltZWApOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgc2V0Q29sb3IoYHJlZGApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIHNldFRleHRBbGlnbihDRU5URVIsIE1JRERMRSk7CiAqICAgICAgIHRleHQoImxldCdzIGdvIiwgd2lkdGgvMiwgaGVpZ2h0LzIpCiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyQWN0aXZlKHN0YXRlKSB7CiAqICAgICAgIGlmIChzdGF0ZSkgaGlnaGxpZ2h0KGByZWRgKTsKICogICAgICAgZWxzZSBoaWdobGlnaHQoZmFsc2UpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlcgogKgogKiBAc2VlIHtAbGluayBoaWdobGlnaHR9CiAqLwpmdW5jdGlvbiBzZXRIaWdobGlnaHRDb2xvcihjb2xvcikgewogIF9fY3VycmVudF9oaWdobGlnaHRfY29sb3IgPSBjb2xvcjsKfQoKLyoqCiAqIFNldCB0aGUgbGluZSBkYXNoIHByb3BlcnR5LiBTZWUgdGhlIGZvbGxvd2luZyBNRE4gYXJ0aWNsZSBmb3IgdGhlIGRldGFpbHM6CiAqCiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvc2V0TGluZURhc2gKICoKICogQHBhcmFtICB7bnVtYmVyW119IC4uLnZhbHVlcyBUaGUgZGFzaCBpbnRlcnZhbHMgaW4gcGl4ZWwKICoKICogQHNlZSB7QGxpbmsgbm9MaW5lRGFzaH0KICovCmZ1bmN0aW9uIHNldExpbmVEYXNoKC4uLnZhbHVlcykgewogIF9fY3R4LnNldExpbmVEYXNoKHZhbHVlcyk7Cn0KCi8qKgogKiBTZXQgdGhlIGxpbmUgd2lkdGggaW4gcGl4ZWxzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICByYW5nZSgxLCAxMCwgKGkpID0+IHsKICogICAgICAgICBzZXRMaW5lV2lkdGgoaSk7CiAqICAgICAgICAgbGluZSgyMCwgaSAqIDIwLCAxODAsIGkgKiAyMCk7CiAqICAgICAgIH0pCiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoPyBUaGUgbGluZSB3aWR0aCBpbiBwaXhlbHMgKGRlZmF1bHQgPSAxKQogKgogKiBAc2VlIHtAbGluayBzZXRUZXh0U3Ryb2tlfQogKi8KZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoID0gMSkgewogIF9fY3R4LmxpbmVXaWR0aCA9IHdpZHRoOwp9CgovKioKICogU2V0IHRoZSBjdXJyZW50IHN0cm9rZSBjb2xvdXIuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcigpOwogKiAgICAgICBzZXRTdHJva2UoYGJsYWNrYCk7CiAqICAgICAgIHNldEZpbGwoYHJlZGApOwogKiAgICAgICByZWN0KDUwLCA1MCwgMTAwLCAxMDApOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgQ1NTIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJvcmRlciAoZGVmYXVsdCA9IGJsYWNrKQogKgogKiBAc2VlIHtAbGluayBzZXRGaWxsfQogKiBAc2VlIHtAbGluayBzZXRDb2xvcn0KICovCmZ1bmN0aW9uIHNldFN0cm9rZShjb2xvciA9IGBibGFja2ApIHsKICBpZiAoQ1NTX0NPTE9SX01BUFtjb2xvcl0gPT09IF9faGlnaGxpZ2h0X2NvbG9yKSB7CiAgICBjb2xvciA9IF9fY3VycmVudF9oaWdobGlnaHRfY29sb3I7CiAgfQogIF9fY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgdGV4dCBhbGlnbm1lbnQgdmFsdWVzLgogKgogKiBWYWxpZCBgeEFsaWduYCB2YWx1ZXMgYXJlOgogKgogKiAtIENFTlRFUiAtIHRoZSB0ZXh0IGFuY2hvciBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0ZXh0LiBUZXh0IGlzIHBsYWNlZCBldmVubHkgb24gZWl0aGVyIHNpZGUuCiAqIC0gRU5EIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSByaWdodCBmb3IgTFRSIHRleHQsIGFuZCBvbiB0aGUgbGVmdCBmb3IgUlRMIHRleHQuCiAqIC0gTEVGVCAtIHRoZSB0ZXh0IGFuY2hvciBpcyBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSB0ZXh0LiBhbGwgdGV4dCBpcyB0byB0aGUgcmlnaHQuCiAqIC0gUklHSFQgLSB0aGUgdGV4dCBhbmNob3IgaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHRleHQuIEFsbCB0ZXh0IGlzIHRvIHRoZSBsZWZ0LgogKiAtIFNUQVJUIC0gdGhlIHRleHQgYW5jaG9yIGlzIG9uIHRoZSBsZWZ0IGZvciBMVFIgdGV4dCwgYW5kIG9uIHRoZSByaWdodCBmb3IgUlRMIHRleHQuCiAqCiAqIFZhbGlkIGB5QWxpZ25gIHZhbHVlcyBhcmU6CiAqCiAqIC0gQUxQSEFCRVRJQyAtIHN0YW5kYXJkIHRleHQgYWxpZ25tZW50IChkZWZhdWx0KQogKiAtIEJPVFRPTSAtIHRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgYm91bmRpbmcgYm94CiAqIC0gSEFOR0lORyAtIHJlbGV2YW50IGZvciBUaWJldGFuIGFuZCBvdGhlciBJbmRpYyBzY3JpcHRzLgogKiAtIElERU9HUkFQSElDIC0gcmVsZXZhbnQgZm9yIGlkZW9ncmFwaGljIENKS1YgdGV4dC4KICogLSBNSURETEUgLSBUaGUgdmVydGljYWwgZXF1aXZhbGVudCBvZiAiY2VudGVyIi4KICogLSBUT1AgLSBUaGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSB0b3Agb2YgdGhlIHR5cG9ncmFwaGljICJlbSBzcXVhcmUiLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDIwKTsKICogICAgICAgc2V0Q29sb3IoYGJsYWNrYCk7CiAqICAgICAgIGxpbmUod2lkdGggLyAyLCAwLCB3aWR0aCAvIDIsIGhlaWdodCk7CiAqICAgICAgIGxpbmUoMCwgaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCAvIDIpOwogKiAgICAgICBzZXRUZXh0QWxpZ24oQ0VOVEVSLCBNSURETEUpOwogKiAgICAgICB0ZXh0KCJjZW50ZXIgbWlkZGxlIiwgd2lkdGggLyAyLCBoZWlnaHQvMik7CiAqICAgICAgIGxpbmUoMCwgaGVpZ2h0IC8gMiAtIDUwLCB3aWR0aCwgaGVpZ2h0IC8gMiAtIDUwKTsKICogICAgICAgc2V0VGV4dEFsaWduKFJJR0hULCBUT1ApOwogKiAgICAgICB0ZXh0KCJyaWdodCB0b3AiLCB3aWR0aCAvIDIsIGhlaWdodC8yIC0gNTApOwogKiAgICAgICBsaW5lKDAsIGhlaWdodCAvIDIgKyA1MCwgd2lkdGgsIGhlaWdodCAvIDIgKyA1MCk7CiAqICAgICAgIHNldFRleHRBbGlnbihMRUZULCBCT1RUT00pOwogKiAgICAgICB0ZXh0KCJsZWZ0IGJvdHRvbSIsIHdpZHRoIC8gMiwgaGVpZ2h0LzIgKyA1MCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtzdHJpbmd9IHhBbGlnbiBUaGUgQ1NTIGhvcml6b250YWwgYWxpZ25tZW50CiAqIEBwYXJhbSB7c3RyaW5nfSB5QWxpZ24gVGhlIENTUyB2ZXJ0aWNhbCBhbGlnbm1lbnQKICovCmZ1bmN0aW9uIHNldFRleHRBbGlnbih4QWxpZ24sIHlBbGlnbikgewogIF9fY3R4LnRleHRBbGlnbiA9IHhBbGlnbjsKICBfX2N0eC50ZXh0QmFzZWxpbmUgPSB5QWxpZ247Cn0KCi8qKgogKiBTZXQgdGhlIHRleHQgb3V0bGluZSBzdHJva2luZyBwcm9wZXJ0aWVzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldEZvbnRTaXplKDI1KTsKICogICAgICAgc2V0VGV4dFN0cm9rZShgcmVkYCwgMSk7CiAqICAgICAgIHNldEZpbGwoYHllbGxvd2ApOwogKiAgICAgICB0ZXh0KCJmYW5jeSB0ZXh0Iiwgd2lkdGgvMiwgODAsIENFTlRFUiwgQ0VOVEVSKTsKICogICAgICAgc2V0Rm9udFNpemUoNjUpOwogKiAgICAgICBzZXRUZXh0U3Ryb2tlKGByZWRgLCAzKTsKICogICAgICAgc2V0RmlsbChgeWVsbG93YCk7CiAqICAgICAgIHRleHQoImZhbmN5IHRleHQiLCB3aWR0aC8yLCAxNDAsIENFTlRFUiwgQ0VOVEVSKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIENTUyBjb2xvciB0byB1c2UgZm9yIHRoZSBib3JkZXIKICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoPyBUaGUgdGV4dCBzdHJva2Ugd2lkdGggaW4gcGl4ZWxzIChkZWZhdWx0ID0gMSkKICoKICogQHNlZSB7QGxpbmsgc2V0U3Ryb2tlfQogKiBAc2VlIHtAbGluayBzZXRMaW5lV2lkdGh9CiAqLwpmdW5jdGlvbiBzZXRUZXh0U3Ryb2tlKGNvbG9yLCB3aWR0aCA9IDEpIHsKICBfX3RleHRTdHJva2UgPSBjb2xvcjsKICBzZXRMaW5lV2lkdGgod2lkdGgpOwp9Ci8qKgogKiBTdGFydCBhIG5ldyBzaGFwZS4gVGhpcyB5aWVsZHMgYSBgU2hhcGVgIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgQVBJOgogKgogKiAtIGBtYWtlTW92YWJsZShtb3ZhYmxlPzogYm9vbGVhbilgIC0gYWxsb3cgdGhpcyBzaGFwZSB0byBiZSBtb3ZlZCBhcm91bmQgd2l0aCB0aGUgcG9pbnRlciAoYG1vdmFibGVgIGlzIHRydWUgaWYgb21pdHRlZCkKICogLSBgYWxsb3dSZXNpemluZyhhbGxvd2VkPzogYm9vbGVhbilgIC0gYWxsb3cgdGhlIHBvaW50cyB0aGF0IG1ha2UgdXAgdGhpcyBzaGFwZSB0byBiZSBtb3ZlZCBhcm91bmQgKGBhbGxvd2VkYCBpcyB0cnVlIGlmIG9taXR0ZWQpCiAqIC0gYHNob3dQb2ludHMoc2hvd1BvaW50cz86IGJvb2xlYW4pYCAtIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gZHJhdyB0aGUgcGF0aGluZyBwb2ludHMgb24gdG9wIG9mIHRoZSBzaGFwZSBkdXJpbmcgZHJhdygpLgogKiAtIGBjbG9zZSgpYCAtIGNsb3NlIHRoZSBjdXJyZW50IHNlZ21lbnQgc28gbm8gbmV3IHBvaW50cyBjYW4gYmUgYWRkZWQuCiAqIC0gYG5ld1NlZ21lbnQoY2xvc2VFeGlzdGluZz86IGJvb2xlYW4pYCAtIHN0YXJ0IGEgbmV3IHNlZ21lbnQgaW4gdGhpcyBzaGFwZSwgdwogKgogKiBBIFNoYXBlIGFsc28gc3VwcG9ydHMgdGhlIGZvbGxvd2luZyB1dGlsaXR5IGZ1bmN0aW9uczoKICoKICogLSBgb2Zmc2V0KHgsIHkpYCAtICh0ZW1wb3JhcmlseSkgbW92ZSB0aGlzIHNoYXBlIGJ5ICh4LHkpCiAqIC0gYGNvbW1pdCgpYCAtIGNvbW1pdCB0aGUgdGVtcG9yYXJ5IG9mZnNldCBieSByZXdyaXRpbmcgYWxsIGNvb3JkaWFudGVzLgogKiAtIGByZXNldCgpYCAtIHJlc2V0IHRoZSBzaGFwZSB0byBoYXZpbmcgbm8gb2Zmc2V0LgogKiAtIGBkcmF3KClgIC0gZHJhd3MgdGhlIHNoYXBlIHVzaW5nIGl0cyBjdXJyZW50IHN0cm9rZSwgZmlsbCwgYW5kICJzaG93IHBvaW50cyIgc2V0dGluZ3MuCiAqIC0gYGluc2lkZSh4LCB5KTogc2VnbWVudFtdYCAtIHJldHVybnMgdGhlIGxpc3Qgb2YgYWxsIHNlZ21lbnRzIHRoYXQgKHgseSkgaXMgaW5zaWRlIG9mLgogKgogKiBBbmQgaXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBwYXRoaW5nIGZ1bmN0aW9ucywgd2l0aCBhcmd1bWVudHMgdGhhdCBjYW4gZWl0aGVyIGNvbnNpc3Qgb2YKICogKHRoZSBuZWNlc3NhcnkgbnVtYmVyIG9mKSBwYWlycyBvZiBjb29yZGluYXRlIHZhbHVlcywgb3IgKHRoZSBuZWNlc3NhcnkgbnVtYmVyIG9mKSBwb2ludGxpa2VzLAogKiBiZWluZyBvYmplY3RzIHdpdGggYW4gYHhgIGFuZCBgeWAgcHJvcGVydHkuCiAqCiAqIC0gYG1vdmVUbyh4LHkgT1IgcDpwb2ludExpa2UpYCAtIHN0YXJ0IGEgbmV3IHNlZ21lbnQgYW5kIG1hcmsgaXRzIHBhdGggYXMgc3RhcnRpbmcgYXQgKHgseSkuCiAqIC0gYGxpbmVUbyh4LHksLi4uIE9SIHAsLi4uKWAgLSBhZGQgb25lIG9yIG1vcmUgcG9pbnRzIHRoYXQgY29ubmVjdCB0byB0aGUgcHJldmlvdXMgcG9pbnQgd2l0aCBhIHN0cmFpZ2h0IGxpbmUuCiAqIC0gYHF1YWRUbyhjeCxjeSx4LHksLi4uIE9SIGNwLHAsLi4uKWAgLSBhZGQgb25lIG9yIG1vcmUgcXVhZHJhdGljIGJlemllciBjdXJ2ZXMsIHdoZXJlIChjeCxjeSkvY3AgaXMgdGhlIGNvbnRyb2wgcG9pbnQsIGFuZCAoeCx5KS9wIHRoZSBlbmQgcG9pbnQuCiAqIC0gYGN1cnZlVG8oY3gxLGN5MSxjeDIsY3kyLHgseSwuLi4gT1IgYzFwLGMycCxwLC4uLilgIC0gYWRkIG9uZSBvciBtb3JlIGN1YmljIGJlemllciBjdXJ2ZXMsIHdoaWNoIGhhdmUgdHdvIGNvbnRyb2wgcG9pbnRzLgogKiAtIGBzcGxpbmVUbyh4MSx5MSwuLi4gT1IgcDEsLi4uKWAgLSBhZGQgb25lIG9yIG1vcmUgY2FyZGluYWwgc3BsaW5lIHBhdGhpbmcgY29vcmRpbmF0ZXMuCiAqCiAqIENhcmRpbmFsIHNwbGluZSBjb29yZGluYXRlcyBhcmUgcmVuZGVyZWQgYnkgdHJlYXRpbmcgdGhlIHBhdGggYXMgY2xvc2VkCiAqIChldmVuIGlmIGl0IGlzIG5vdCksIHBlcmZvcm1pbmcgd3JhcC1hcm91bmQgbG9va3VwcyBhcyBuZWVkZWQgaW4gb3JkZXIKICogdG8gZHJhdyAic29tZXRoaW5nIHNlbnNpYmxlIi4KICoKICogTm90ZSB0aGF0IHNoYXBlIGN1dG91dHMgYXJlIG5vdCAoY3VycmVudGx5KSBwb3NzaWJsZS4gWW91J2xsIHdhbnQgdG8KICogcm9sbCB5b3VyIG93biBTVkcgYnVpbGRlciBhbmQgdGhlbiB0dXJuIHRoYXQgU1ZHIGludG8gYSBkYXRhLXVyaSB0aGF0CiAqIHlvdSBqdXN0IHJlbmRlciB3aXRoIGltYWdlKCkgaW5zdGVhZCBpZiB5b3UgbmVlZCBjdXRvdXRzLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgbGV0IHNoYXBlOwogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBzaGFwZSA9IHN0YXJ0U2hhcGUoKTsKICogICAgICAgc2hhcGUuYWxsb3dSZXNpemluZygpOwogKiAgICAgICBzaGFwZS5zaG93UG9pbnRzKCk7CiAqICAgICAgIHNoYXBlLm1ha2VNb3ZhYmxlKCk7CiAqICAgICAgIHNoYXBlLmFkZCgwLGhlaWdodC8yKTsKICogICAgICAgc2hhcGUuYWRkKHdpZHRoLzIsIDApOwogKiAgICAgICBzaGFwZS5hZGQod2lkdGgsIGhlaWdodC8yKTsKICogICAgICAgc2hhcGUuYWRkKHdpZHRoLzIsIGhlaWdodCk7CiAqICAgICAgIHNoYXBlLmNsb3NlKCk7CiAqICAgICAgIHNoYXBlLnNldFN0cm9rZShgYmxhY2tgKTsKICogICAgICAgc2hhcGUuc2V0RmlsbChgZ29sZGApOwogKiAgICAgfQogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNoYXBlLmRyYXcodHJ1ZSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHJldHVybnMge1NoYXBlfSB0aGUgbmV3bHkgY3JlYXRlZCBzaGFwZSBvYmplY3QKICoKICogQHNlZSB7QGxpbmsgZW5kU2hhcGV9CiAqLwpmdW5jdGlvbiBzdGFydFNoYXBlKCkgewogIHJldHVybiAoX19zaGFwZSA9IG5ldyBTaGFwZSgpKTsKfQoKLyoqCiAqIENsZWFyIHRoZSBjdXJyZW50IHNoYXBlLCBvcHRpb25hbGx5IGNsb3NpbmcgaXQuCiAqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2U/IFdoZW4gdXNlZCwgY2xvc2VzIHRoZSBzaGFwZSdzIGN1cnJlbnQgc2VnbWVudC4KICogQHJldHVybnMge1NoYXBlfSBUaGUgc2hhcGUgdGhhdCBnb3QgY2xvc2VkCiAqCiAqIEBzZWUge0BsaW5rIHN0YXJ0U2hhcGV9CiAqLwpmdW5jdGlvbiBlbmRTaGFwZShjbG9zZSA9IGZhbHNlKSB7CiAgaWYgKF9fc2hhcGUgJiYgY2xvc2UpIF9fc2hhcGUuY2xvc2UoKTsKICBjb25zdCBzaGFwZSA9IF9fc2hhcGU7CiAgX19zaGFwZSA9IHVuZGVmaW5lZDsKICByZXR1cm4gc2hhcGU7Cn0KCi8qKgogKiBTdGFydCBhIG5ldyBzZWdtZW50IGluIGEgc2hhcGUuCiAqCiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2U/IENsb3NlcyB0aGUgY3VycmVudCBzZWdtZW50IGJlZm9yZSBvcGVuaW5nIGEgbmV3IG9uZSAoZGVmYXVsdCA9IHRydWUpCiAqCiAqIEBzZWUge0BsaW5rIHN0YXJ0U2hhcGV9CiAqIEBzZWUge0BsaW5rIGVuZFNoYXBlfQogKi8KZnVuY3Rpb24gbmV3U2VnbWVudChjbG9zZSA9IHRydWUpIHsKICBfX3NoYXBlPy5uZXdTZWdtZW50KGNsb3NlKTsKfQovKioKICogQ2VudGVycyB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb24geW91ciBncmFwaGljLgogKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZzoKICoKICogYGBgCiAqIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqIGBgYAogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYHdoaXRlYCk7CiAqICAgICAgIHNldENvbG9yKGByZWRgKTsKICogICAgICAgY2VudGVyKCk7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBsaW5lKDAsIC1odWdlLCAwLCBodWdlKTsKICogICAgICAgbGluZSgtaHVnZSwgMCwgaHVnZSwgMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCggMTAsICAxMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCggMTAsIC0xMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCgtMTAsIC0xMCk7CiAqICAgICAgIHNldENvbG9yKHJhbmRvbUNvbG9yKCkpOwogKiAgICAgICBwb2ludCgtMTAsICAxMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICovCmZ1bmN0aW9uIGNlbnRlcigpIHsKICB0cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTsKfQoKLyoqCiAqIFJlc2V0IHRoZSBjb29yZGluYXRlIHRyYW5zZm9ybSBtYXRyaXguCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYGxpZ2h0Z3JleWApOwogKiAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgIHRyYW5zbGF0ZSg1MCw1MCk7CiAqICAgICAgIGxpbmUoMCwwLDEwMCwwKTsKICogICAgICAgcG9pbnQoMCwwKTsKICogICAgICAgc2V0Q29sb3IoYGRhcmtncmVlbmApOwogKiAgICAgICBwb2ludCgxMCwwKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBwb2ludCgxMCwwKTsKICogICAgICAgbGluZSgwLDAsMTAwLDApOwogKiAgICAgICBzZXRDb2xvcihgYmx1ZWApOwogKiAgICAgICByb3RhdGUoLVBJLzYpCiAqICAgICAgIHBvaW50KDEwMCwwKTsKICogICAgICAgc2NhbGUoMC41LCAwLjUpOwogKiAgICAgICBwb2ludCgxMDAsMCk7CiAqICAgICAgIGxpbmUoMTAwLDAsMjAwLDApOwogKiAgICAgICByZXNldFRyYW5zZm9ybSgpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgbGluZSgwLDMsMTAwLDMpOwogKiAgICAgICBwb2ludCgwLDMpOwogKiAgICAgICBwb2ludCgxMCwzKTsKICogICAgICAgcG9pbnQoMTAwLDMpOwogKiAgICAgfQogKiAgIDwvZ3JhcGhpY3Mtc291cmNlPgogKiA8L2dyYXBoaWNzLWVsZW1lbnQ+CiAqCiAqIEBzZWUge0BsaW5rIHRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHJlc2V0VHJhbnNmb3JtKCkgewogIF9fY3R4LnJlc2V0VHJhbnNmb3JtKCk7Cn0KCi8qKgogKiBSb3RhdGUgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIHdydCB0aGUgY3VycmVudCBvcmlnaW4uCiAqCiAqIEV4YW1wbGU6CiAqCiAqIDxncmFwaGljcy1lbGVtZW50PgogKiAgIDxncmFwaGljcy1zb3VyY2U+CiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICogICAgICAgc2V0U2l6ZSgyMDAsIDIwMCk7CiAqICAgICAgIG5vR3JpZCgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoYGxpZ2h0Z3JleWApOwogKiAgICAgICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpOwogKiAgICAgICBzZXRDb2xvcihgYmxhY2tgKTsKICogICAgICAgcG9pbnQoMCwwKTsKICogICAgICAgc2V0Q29sb3IoYGRhcmtncmVlbmApOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgVGhlIGFuZ2xlIGJ5IHdoaWNoIHRvIHJvdGF0ZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gaW4gcmFkaWFucwogKgogKiBAc2VlIHtAbGluayB0cmFuc2Zvcm19CiAqIEBzZWUge0BsaW5rIHJlc2V0VHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gcm90YXRlKGFuZ2xlID0gMCkgewogIF9fY3R4LnJvdGF0ZShhbmdsZSk7Cn0KCi8qKgogKiBTY2FsZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gd3J0IHRoZSBjdXJyZW50IG9yaWdpbi4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgbm9HcmlkKCk7CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBkcmF3KCkgewogKiAgICAgICBjbGVhcihgbGlnaHRncmV5YCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHNldENvbG9yKGBibGFja2ApOwogKiAgICAgICBwb2ludCgwLDApOwogKiAgICAgICBzZXRDb2xvcihgZGFya2dyZWVuYCk7CiAqICAgICAgIGxpbmUoMCwwLDIwLDIwKTsKICogICAgICAgcG9pbnQoMjAsMjApOwogKiAgICAgICByb3RhdGUoUEkvNCk7CiAqICAgICAgIHNjYWxlKDIpOwogKiAgICAgICBsaW5lKDAsMCwyMCwyMCk7CiAqICAgICAgIHBvaW50KDIwLDIwKTsKICogICAgIH0KICogICA8L2dyYXBoaWNzLXNvdXJjZT4KICogPC9ncmFwaGljcy1lbGVtZW50PgogKgogKiBAcGFyYW0ge251bWJlcn0geCBUaGUgYW1vdW50IGJ5IHdoaWNoIHRvIHNjYWxlIHRoZSB4IGNvb3JkaW5hdGVzLgogKiBAcGFyYW0ge251bWJlcn0geT8gVGhlIGFtb3VudCBieSB3aGljaCB0byBzY2FsZSB0aGUgeCBjb29yZGluYXRlcyAoZGVmYXVsdCA9IHNhbWUgYXMgeCkKICoKICogQHNlZSB7QGxpbmsgdHJhbnNmb3JtfQogKiBAc2VlIHtAbGluayByZXNldFRyYW5zZm9ybX0KICovCmZ1bmN0aW9uIHNjYWxlKHggPSAxLCB5ID0geCkgewogIF9fY3R4LnNjYWxlKHgsIHkpOwp9CgovKioKICogQ29udmVydCBhIHNjcmVlbiAoZS5nLiBicm93c2VyKSBjb29yZGluYXRlIGludG8gaXRzCiAqIGNvcnJlc3BvbmRpbmcgInRyYW5zZm9ybWVkIiBjb29yZGluYXRlLgogKgogKiBFeGFtcGxlOgogKgogKiA8Z3JhcGhpY3MtZWxlbWVudD4KICogICA8Z3JhcGhpY3Mtc291cmNlPgogKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAqICAgICAgIHNldFNpemUoMjAwLCAyMDApOwogKiAgICAgICBub0dyaWQoKTsKICogICAgIH0KICoKICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKGBsaWdodGdyZXlgKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTsKICogICAgICAgcm90YXRlKFBJLzQpOwogKiAgICAgICBzY2FsZSgwLjUpOwogKiAgICAgICBpZiAocG9pbnRlci5hY3RpdmUpIHsKICogICAgICAgICBzZXRDb2xvcihgcmVkYCk7CiAqICAgICAgICAgcG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpOwogKiAgICAgICAgIHNldENvbG9yKGBibHVlYCk7CiAqICAgICAgICAgcG9pbnQoc2NyZWVuVG9Xb3JsZChwb2ludGVyLngsIHBvaW50ZXIueSkpOwogKiAgICAgICB9CiAqICAgICB9CiAqCiAqICAgICBmdW5jdGlvbiBwb2ludGVyTW92ZSgpIHsKICogICAgICAgcmVkcmF3KCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHNjcmVlbiBjb29yZGluYXRlJ3MgeCB2YWx1ZSBpbiBwaXhlbHMKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHNjcmVlbiBjb29yZGluYXRlJ3MgeSB2YWx1ZSBpbiBwaXhlbHMKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgd29ybGQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAcGFyYW0ge1BvaW50TGlrZX0gcCBUaGUgc2NyZWVuIHt4LHl9IGNvb3JkaW5hdGUKICogQHJldHVybnMge1BvaW50TGlrZX0gcCBUaGUgd29ybGQge3gseX0gY29vcmRpbmF0ZQogKgogKiBAc2VlIHtAbGluayBwcm9qZWN0fQogKiBAc2VlIHtAbGluayB3b3JsZFRvU2NyZWVufQogKi8KZnVuY3Rpb24gc2NyZWVuVG9Xb3JsZCh4LCB5KSB7CiAgaWYgKHgueCAhPT0gdW5kZWZpbmVkICYmIHgueSAhPT0gdW5kZWZpbmVkKSB7CiAgICB5ID0geC55OwogICAgeCA9IHgueDsKICB9CgogIGxldCBNID0gX19jdHguZ2V0VHJhbnNmb3JtKCkuaW52ZXJ0U2VsZigpOwoKICByZXR1cm4gbmV3IFBvaW50KHggKiBNLmEgKyB5ICogTS5jICsgTS5lLCB4ICogTS5iICsgeSAqIE0uZCArIE0uZik7Cn0KCi8qKgogKiBTZXQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIG1hdHJpeCwgYmFzZWQgb24gYXBwbHlpbmc6CiAqCiAqIGBgYAogKiAgICAgICB8IGEgYiBjIHwKICogICBtID0gfCBkIGUgZiB8CiAqICAgICAgIHwgMCAwIDEgfAogKiBgYGAKICoKICogV2l0aCB0aGUgcGFyYW1ldGVycyBkZWZhdWx0aW5nIHRvIHRoZSBpZGVudGl0eSBtYXRyaXguCiAqCiAqIFNlZSB0aGUgZm9sbG93aW5nIE1ETiBhcnRpY2xlIGZvciBtb3JlIGRldGFpbHMgYWJvdXQgdGhpcyBmdW5jdGlvbjoKICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC90cmFuc2Zvcm0KICoKICogQHBhcmFtIHtudW1iZXJ9IGEgKGRlZmF1bHQgPSAxKQogKiBAcGFyYW0ge251bWJlcn0gYiAoZGVmYXVsdCA9IDApCiAqIEBwYXJhbSB7bnVtYmVyfSBjIChkZWZhdWx0ID0gMCkKICogQHBhcmFtIHtudW1iZXJ9IGQgKGRlZmF1bHQgPSAwKQogKiBAcGFyYW0ge251bWJlcn0gZSAoZGVmYXVsdCA9IDEpCiAqIEBwYXJhbSB7bnVtYmVyfSBmIChkZWZhdWx0ID0gMCkKICoKICogQHNlZSB7QGxpbmsgcmVzZXRUcmFuc2Zvcm19CiAqLwpmdW5jdGlvbiB0cmFuc2Zvcm0oYSA9IDEsIGIgPSAwLCBjID0gMCwgZCA9IDAsIGUgPSAxLCBmID0gMCkgewogIF9fY3R4LnRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTsKfQoKLyoqCiAqIFRyYW5zbGF0ZSB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gYnkgc29tZSBhbW91bnQgb2YgeCBhbmQgeSB1bml0cy4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7CiAqICAgICAgIGNsZWFyKCk7CiAqICAgICAgIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7CiAqICAgICAgIHBvaW50KDAsMCk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHggdmFsdWUgaW4gcGl4ZWxzIHRvIGJlIHRyZWF0ZWQgYXMgdGhlIG5ldyAiemVybyIKICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHkgdmFsdWUgaW4gcGl4ZWxzIHRvIGJlIHRyZWF0ZWQgYXMgdGhlIG5ldyAiemVybyIKICoKICogQHBhcmFtIHtQb2ludExpa2V9IHAgVGhlIHt4LHl9IGNvb3JkaW5hdGUgdG8gYmUgdHJlYXRlZCBhcyB0aGUgbmV3ICJ6ZXJvIgogKgogKiBAc2VlIHtAbGluayB0cmFuc2Zvcm19CiAqIEBzZWUge0BsaW5rIHJlc2V0VHJhbnNmb3JtfQogKi8KZnVuY3Rpb24gdHJhbnNsYXRlKHggPSAwLCB5ID0gMCkgewogIGlmICh4LnggIT09IHVuZGVmaW5lZCAmJiB4LnkgIT09IHVuZGVmaW5lZCkgewogICAgeSA9IHgueTsKICAgIHggPSB4Lng7CiAgfQogIF9fY3R4LnRyYW5zbGF0ZSh4LCB5KTsKfQoKLyoqCiAqIENvbnZlcnQgYW4gaW4tY2FudmFzICJ0cmFuc2Zvcm1lZCIgY29vcmRpbmF0ZSBpbnRvIGl0cwogKiBjb3JyZXNwb25kaW5nICJzY3JlZW4iIChpLmUuIGJyb3dzZXIgY2FudmFzIG9mZnNldCkgY29vcmRpbmF0ZS4KICoKICogRXhhbXBsZToKICoKICogPGdyYXBoaWNzLWVsZW1lbnQ+CiAqICAgPGdyYXBoaWNzLXNvdXJjZT4KICogICAgIGZ1bmN0aW9uIHNldHVwKCkgewogKiAgICAgICBzZXRTaXplKDIwMCwgMjAwKTsKICogICAgICAgcGxheSgpOwogKiAgICAgfQogKgogKiAgICAgZnVuY3Rpb24gZHJhdygpIHsKICogICAgICAgY2xlYXIoKTsKICogICAgICAgdHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7CiAqCiAqICAgICAgIHJvdGF0ZShtaWxsaXMoKSAvIDIwMDApOwogKiAgICAgICBzZXRGb250U2l6ZSgyNSk7CiAqICAgICAgIGNvbnN0IHAgPSBuZXcgUG9pbnQoMzAsIDApOwogKiAgICAgICBwb2ludChwKTsKICogICAgICAgdGV4dChgJHtwLnh9LCR7cC55fWAsIHAueCArIDEwLCBwLnkgKyAxMCk7CiAqCiAqICAgICAgIGNvbnN0IHt4LCB5fSA9IHdvcmxkVG9TY3JlZW4ocCk7CiAqICAgICAgIHJlc2V0VHJhbnNmb3JtKCk7CiAqICAgICAgIHNldEZvbnRTaXplKDE2KTsKICogICAgICAgdGV4dChgJHt4LnRvRml4ZWQoKX0sJHt5LnRvRml4ZWQoKX1gLCB4IC0gMjUsIHkgLSAxNSk7CiAqICAgICB9CiAqICAgPC9ncmFwaGljcy1zb3VyY2U+CiAqIDwvZ3JhcGhpY3MtZWxlbWVudD4KICoKICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIHdvcmxkIGNvb3JkaW5hdGUncyB4IHZhbHVlIGluIHBpeGVscwogKiBAcGFyYW0ge251bWJlcn0geSBUaGUgd29ybGQgY29vcmRpbmF0ZSdzIHkgdmFsdWUgaW4gcGl4ZWxzCiAqIEByZXR1cm5zIHtQb2ludExpa2V9IHAgVGhlIHNjcmVlbiB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwIFRoZSB3b3JsZCB7eCx5fSBjb29yZGluYXRlCiAqIEByZXR1cm5zIHtQb2ludExpa2V9IHAgVGhlIHNjcmVlbiB7eCx5fSBjb29yZGluYXRlCiAqCiAqIEBzZWUge0BsaW5rIHByb2plY3R9CiAqIEBzZWUge0BsaW5rIHNjcmVlblRvV29ybGR9CiAqLwpmdW5jdGlvbiB3b3JsZFRvU2NyZWVuKHgsIHkpIHsKICBpZiAoeC54ICE9PSB1bmRlZmluZWQgJiYgeC55ICE9PSB1bmRlZmluZWQpIHsKICAgIHkgPSB4Lnk7CiAgICB4ID0geC54OwogIH0KCiAgbGV0IE0gPSBfX2N0eC5nZXRUcmFuc2Zvcm0oKTsKCiAgcmV0dXJuIG5ldyBQb2ludCh4ICogTS5hICsgeSAqIE0uYyArIE0uZSwgeCAqIE0uYiArIHkgKiBNLmQgKyBNLmYpOwp9Cg=="),R=class extends h{static{l(this,"GraphicsElement")}set onload(e){this._onload=e}set onerror(e){this._onerror=e}handleAttributeChange(...e){}handleChildChanges(...e){}connectedCallback(){super.connectedCallback(),this.label=document.createElement("label"),this.title||(console.warn("<graphics-element> is missing a title attribute. Always caption your figures."),this.title=""),this.label.textContent=this.title,M(this)?this.loadSource():new IntersectionObserver((e,x)=>e.forEach(t=>{t.isIntersecting&&(this.loadSource(),x.disconnect())}),{threshold:.1,rootMargin:`${window.innerHeight}px`}).observe(this)}getStyle(){return`
:host([hidden]) { display: none; }
style { display: none; }
.top-title { display: flex; flex-direction: row; justify-content: space-between; }
canvas { touch-action: none; user-select: none; position: relative; z-index: 1; display: block; margin: auto; border-radius: 0; box-sizing: content-box !important; border: 1px solid lightgrey;
&.crisp { image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }
&:focus { border: 1px solid red; }}
a { &.view-source { font-size: 60%; text-decoration: none;
&.plus { padding-left: 0.5em; }}}
button.reset { font-size: 0.5em; top: -0.35em; position: relative; }
label:not(:empty) { display: block; font-style: italic; font-size: 0.9em; text-align: right; padding-right: 1em; margin-top: 0.35em; }
`}async loadSource(e,x=this.width,t=this.height,$){if(!x&&!t&&(x=parseFloat(this.getAttribute("width")),t=parseFloat(this.getAttribute("height")),isNaN(x)&&(x=void 0),isNaN(t)&&(t=void 0)),e){if(typeof e=="function")return console.warn(".loadSource() called with a function rather than string data: use .loadFromFunction() instead."),this.loadFromFunction(e)}else if(this.userCode)e=this.userCode;else{let a=this.getAttribute("src");if(a)e=await(await fetch(a)).text();else{let o=this.querySelector("graphics-source");o?e=o.textContent:e=`function setup() {
}
function draw() {
}
`}}if(this.userCode=e,!$)if(this.additionalSources)$=this.additionalSources;else{let a=this.querySelectorAll("source");$=await Promise.all(Array.from(a).map(o=>fetch(o.src).then(g=>g.text())))}this.additionalSources=$;let r=this.userCode;this.additionalSources.length>0&&(r=this.loadAdditionalSources(this.userCode,this.additionalSources));let E=r.matchAll(/addSlider\(['"`](.*)['"`]/g),i=[];for(let a of E)i.push(a[1]),r=r.replace(a[0],a[0]+`, (v) => (${a[1]} = v)`);if(i.length&&(r="let "+i.join(", ")+`;
`+r),r=r.replaceAll(/ from ['"].([^'"]+)['"]/g,` from "${C(location.href)}/$1"`),r.includes("function setup()")||(r=`function setup() {
}
`+r),!r.includes("setSize(")){let a="setSize();";x&&t&&(a=`setSize(${x}, ${t});`),r=r.replace("function setup() {",`function setup() {
  ${a}`)}let s=Object.entries(this.dataset);s.length&&s.forEach(([a,o])=>{parseFloat(o)!=o&&o!=="true"&&o!=="false"&&(o=`"${o}"`),r=r.replace("function setup() {",`function setup() {
  ${a} = ${o};`)}),import(`data:text/javascript;base64,${I(['"use strict";',`import { BSpline, CSS_COLOR_MAP } from "${k}";`,`const __randomId = "${Date.now()}";`,B,r,`export {
  __reset as start,
  __canvas as canvas,
  __halt as halt,
  highlight,
  __getDescription as getDescription
}`].join(`
`))}`).then(async a=>{let{start:o,canvas:g,halt:d,highlight:A,getDescription:p}=a;this.canvas=g,this.halt=()=>d(),this.highlight=H=>A(H),this.render();let{width:b,height:u}=await o(this),m="graphics-element-description";this.querySelector(`.${m}`)?.remove(),this.querySelector("p")||this.handleGraphicsDescription(m,p),b&&u&&(this.style.width="",this.style.height="",this.width=b,this.height=u,this.setAttribute("width",b),this.setAttribute("height",u));let D=new CustomEvent("load");this.dispatchEvent(D),this._onload&&this._onload(D)}).catch(a=>{let o=new CustomEvent("error",{detail:a});if(this.dispatchEvent(o),this._onerror)this._onerror(a);else throw a})}handleGraphicsDescription(e,x=()=>{}){try{let t=x();if(t){let $=new DocumentFragment,r=document.createElement("div");r.classList.add(e),$.append(r),r.innerHTML=t,this.append(r),this.crossLink(!0)}}catch(t){console.error(t)}}loadAdditionalSources(e,x){if(!x)return e;let t=new Array(x.length);return e+`
`+x.map(($,r)=>$.replace("function setup()",`function setup${r+1}()`).replace("function draw()",`function draw${r+1}()`)).join(`
`)+`
function __more_setup() { ${[...t].map(($,r)=>`if (typeof setup${r+1} !== \`undefined\`) setup${r+1}();`).join(`
`)} }
function __more_draw() { ${[...t].map(($,r)=>`if (typeof draw${r+1} !== \`undefined\`) draw${r+1}();`).join(`
`)} }
`}loadFromFunction(e){let x=e.toString();this.reset(x.substring(x.indexOf("{")+1,x.lastIndexOf("}")))}reset(e,x=[]){this.halt&&this.halt(),this.querySelector("button.remove-color")?.remove(),this.loadSource(e||this.userCode,this.width,this.height,x||this.additionalSources)}render(){super.render();let e=this._slot.parentNode;this.canvas&&e.insertBefore(this.canvas,this._slot),this.label&&e.insertBefore(this.label,this._slot);let x=document.createElement("div");x.classList.add("top-title");let t=document.createElement("span");t.classList.add("sources"),x.append(t);let $=document.createElement("button");$.classList.add("reset"),$.textContent=this.getAttribute("reset")||"reset",$.addEventListener("click",()=>this.reset()),x.append($);let r=this.getAttribute("src");if(r||(r=`data:text/plain;base64,${I(this.userCode)}`),r){let i=document.createElement("a");i.classList.add("view-source"),i.textContent=this.getAttribute("viewSource")||"view source",i.href=r,i.target="_blank",t.append(i),r.startsWith("data")&&(delete i.href,delete i.target,i.classList.add("fake-source-link"),i.addEventListener("click",()=>{let s=`<iframe width="100%" height="100%" src="${r}"></iframe>`,f=window.open(""),{document:a}=f;a.open(),a.write(s),a.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),a.close()}))}let E=this.querySelectorAll("source");E.length===0&&(E=(this.additionalSources??[]).map(i=>({src:`data:text/plain;base64,${I(i)}`}))),E.length&&E.forEach((i,s)=>{let{src:f}=i,a=document.createElement("a");a.classList.add("view-source","plus"),a.textContent=`[+${s+1}]`,a.href=f,a.target="_blank",t.append(a),f.startsWith("data")&&(delete a.href,delete a.target,a.classList.add("fake-source-link"),a.addEventListener("click",()=>{let o=`<iframe width="100%" height="100%" src="${f}"></iframe>`,g=window.open(""),{document:d}=g;d.open(),d.write(o),d.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),d.close()}))}),this.label&&e.insertBefore(x,this.canvas),this.crossLink()}crossLink(e){if(e&&(this.crossLinked=!1),this.crossLinked)return;this.crossLinked=!0;let x=!1;if(this.querySelectorAll("p").forEach(t=>{t.querySelectorAll("*").forEach($=>{if(!O.includes($.tagName))return;x=!0;let r;$.classList.remove("calm"),$.addEventListener("pointerenter",()=>{r??=getComputedStyle($)["-webkit-text-stroke-color"],this.highlight?.(r)}),$.addEventListener("pointerleave",()=>this.highlight?.(!1))})}),x){let t=document.createElement("button");t.textContent="remove colors",t.classList.add("remove-color"),t.addEventListener("click",()=>{this.querySelectorAll("p").forEach($=>{$.querySelectorAll("*").forEach(r=>{O.includes(r.tagName)&&r.classList.add("calm")})}),t.remove()}),this.append(t)}}},N=class extends h{static{l(this,"GraphicsSource")}constructor(){super(),this.style.display="none"}handleAttributeChange(){}handleChildChanges(){}};h.register(R),h.register(N),globalThis.GraphicsElement=R,await customElements.whenDefined("graphics-element"),await customElements.whenDefined("graphics-source");export{L as BSpline,w as CSS_COLOR_MAP,R as GraphicsElement,N as GraphicsSource};
