var v=Object.defineProperty;var l=(n,e)=>v(n,"name",{value:e,configurable:!0});var T="registered as custom element";function y(n,e){console.warn(`missing implementation for ${e}(...data) in ${n.__proto__.constructor.name}`)}l(y,"NotImplemented");function G(n){return n.prototype.constructor.name.replace(/([A-Z])([a-z])/g,(e,x,t,$)=>{let r=`${x.toLowerCase()}${t}`;return $>0?`-${r}`:r})}l(G,"getElementTagName");var h=class extends HTMLElement{static{l(this,"CustomElement")}static register(e){if(!e[T]){let x=e.tagName||G(e);return customElements.define(x,e),e[T]=!0,customElements.whenDefined(x)}return Promise.resolve()}static get tagName(){return G(this)}constructor(e={}){super(),customElements.resolveScope||(customElements.resolveScope=function($){try{return $.getRootNode().host}catch(r){console.warn(r)}return window}),this._options=e;let x={childList:$=>{this.handleChildChanges(Array.from($.addedNodes),Array.from($.removedNodes)),this.render()},attributes:$=>{this.handleAttributeChange($.attributeName,$.oldValue,this.getAttribute($.attributeName)),this.render()}};this._observer=new MutationObserver($=>{this.isConnected&&$.forEach(r=>{x[r.type](r)})}),this._observer.observe(this,{childList:!0,attributes:!0});let t={mode:"open"};this._shadow=this.attachShadow(t),this._style=document.createElement("style"),this._style.textContent=this.getStyle(),this._options.header!==!1&&(this._header=document.createElement("header")),this._options.slot!==!1&&this._options.void!==!0&&(this._slot=document.createElement("slot")),this._options.footer!==!1&&(this._footer=document.createElement("footer"))}connectedCallback(){this.render()}handleChildChanges(e,x){this._options.void||y(this,"handleChildChanges")}handleAttributeChange(e,x,t){y(this,"handleAttributeChange")}getStyle(){return""}render(){this._shadow.innerHTML="",this._shadow.append(this._style),this._options.header!==!1&&this._shadow.append(this._header),this._options.slot!==!1&&this._shadow.append(this._slot),this._options.footer!==!1&&this._shadow.append(this._footer)}};var O=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TRANSPARENT","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN"],w={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",aqua:"rgb(0, 255, 255)",aquamarine:"rgb(127, 255, 212)",azure:"rgb(240, 255, 255)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",burlywood:"rgb(222, 184, 135)",cadetblue:"rgb(95, 158, 160)",chartreuse:"rgb(127, 255, 0)",chocolate:"rgb(210, 105, 30)",coral:"rgb(255, 127, 80)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",crimson:"rgb(220, 20, 60)",cyan:"rgb(0, 255, 255)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkorange:"rgb(255, 140, 0)",darkorchid:"rgb(153, 50, 204)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",deeppink:"rgb(255, 20, 147)",deepskyblue:"rgb(0, 191, 255)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",firebrick:"rgb(178, 34, 34)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",fuchsia:"rgb(255, 0, 255)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",goldenrod:"rgb(218, 165, 32)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(128, 128, 128)",honeydew:"rgb(240, 255, 240)",hotpink:"rgb(255, 105, 180)",indianred:"rgb(205, 92, 92)",indigo:"rgb(75, 0, 130)",ivory:"rgb(255, 255, 240)",khaki:"rgb(240, 230, 140)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lightblue:"rgb(173, 216, 230)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightsalmon:"rgb(255, 160, 122)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightyellow:"rgb(255, 255, 224)",lime:"rgb(0, 255, 0)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",maroon:"rgb(128, 0, 0)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumpurple:"rgb(147, 112, 219)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navy:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olive:"rgb(128, 128, 0)",olivedrab:"rgb(107, 142, 35)",orange:"rgb(255, 165, 0)",orangered:"rgb(255, 69, 0)",orchid:"rgb(218, 112, 214)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",paleturquoise:"rgb(175, 238, 238)",palevioletred:"rgb(219, 112, 147)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",plum:"rgb(221, 160, 221)",powderblue:"rgb(176, 224, 230)",purple:"rgb(128, 0, 128)",rebeccapurple:"rgb(102, 51, 153)",red:"rgb(255, 0, 0)",rosybrown:"rgb(188, 143, 143)",royalblue:"rgb(65, 105, 225)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",sienna:"rgb(160, 82, 45)",silver:"rgb(192, 192, 192)",skyblue:"rgb(135, 206, 235)",slateblue:"rgb(106, 90, 205)",slategray:"rgb(112, 128, 144)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",springgreen:"rgb(0, 255, 127)",steelblue:"rgb(70, 130, 180)",tan:"rgb(210, 180, 140)",teal:"rgb(0, 128, 128)",thistle:"rgb(216, 191, 216)",tomato:"rgb(255, 99, 71)",transparent:"rgba(0,0,0,0)",turquoise:"rgb(64, 224, 208)",violet:"rgb(238, 130, 238)",wheat:"rgb(245, 222, 179)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellowgreen:"rgb(154, 205, 50)",ALICEBLUE:"rgb(240, 248, 255)",ANTIQUEWHITE:"rgb(250, 235, 215)",AQUA:"rgb(0, 255, 255)",AQUAMARINE:"rgb(127, 255, 212)",AZURE:"rgb(240, 255, 255)",BEIGE:"rgb(245, 245, 220)",BISQUE:"rgb(255, 228, 196)",BLACK:"rgb(0, 0, 0)",BLANCHEDALMOND:"rgb(255, 235, 205)",BLUE:"rgb(0, 0, 255)",BLUEVIOLET:"rgb(138, 43, 226)",BROWN:"rgb(165, 42, 42)",BURLYWOOD:"rgb(222, 184, 135)",CADETBLUE:"rgb(95, 158, 160)",CHARTREUSE:"rgb(127, 255, 0)",CHOCOLATE:"rgb(210, 105, 30)",CORAL:"rgb(255, 127, 80)",CORNFLOWERBLUE:"rgb(100, 149, 237)",CORNSILK:"rgb(255, 248, 220)",CRIMSON:"rgb(220, 20, 60)",CYAN:"rgb(0, 255, 255)",DARKBLUE:"rgb(0, 0, 139)",DARKCYAN:"rgb(0, 139, 139)",DARKGOLDENROD:"rgb(184, 134, 11)",DARKGRAY:"rgb(169, 169, 169)",DARKGREEN:"rgb(0, 100, 0)",DARKGREY:"rgb(169, 169, 169)",DARKKHAKI:"rgb(189, 183, 107)",DARKMAGENTA:"rgb(139, 0, 139)",DARKOLIVEGREEN:"rgb(85, 107, 47)",DARKORANGE:"rgb(255, 140, 0)",DARKORCHID:"rgb(153, 50, 204)",DARKRED:"rgb(139, 0, 0)",DARKSALMON:"rgb(233, 150, 122)",DARKSEAGREEN:"rgb(143, 188, 143)",DARKSLATEBLUE:"rgb(72, 61, 139)",DARKSLATEGRAY:"rgb(47, 79, 79)",DARKSLATEGREY:"rgb(47, 79, 79)",DARKTURQUOISE:"rgb(0, 206, 209)",DARKVIOLET:"rgb(148, 0, 211)",DEEPPINK:"rgb(255, 20, 147)",DEEPSKYBLUE:"rgb(0, 191, 255)",DIMGRAY:"rgb(105, 105, 105)",DIMGREY:"rgb(105, 105, 105)",DODGERBLUE:"rgb(30, 144, 255)",FIREBRICK:"rgb(178, 34, 34)",FLORALWHITE:"rgb(255, 250, 240)",FORESTGREEN:"rgb(34, 139, 34)",FUCHSIA:"rgb(255, 0, 255)",GAINSBORO:"rgb(220, 220, 220)",GHOSTWHITE:"rgb(248, 248, 255)",GOLD:"rgb(255, 215, 0)",GOLDENROD:"rgb(218, 165, 32)",GRAY:"rgb(128, 128, 128)",GREEN:"rgb(0, 128, 0)",GREENYELLOW:"rgb(173, 255, 47)",GREY:"rgb(128, 128, 128)",HONEYDEW:"rgb(240, 255, 240)",HOTPINK:"rgb(255, 105, 180)",INDIANRED:"rgb(205, 92, 92)",INDIGO:"rgb(75, 0, 130)",IVORY:"rgb(255, 255, 240)",KHAKI:"rgb(240, 230, 140)",LAVENDER:"rgb(230, 230, 250)",LAVENDERBLUSH:"rgb(255, 240, 245)",LAWNGREEN:"rgb(124, 252, 0)",LEMONCHIFFON:"rgb(255, 250, 205)",LIGHTBLUE:"rgb(173, 216, 230)",LIGHTCORAL:"rgb(240, 128, 128)",LIGHTCYAN:"rgb(224, 255, 255)",LIGHTGOLDENRODYELLOW:"rgb(250, 250, 210)",LIGHTGRAY:"rgb(211, 211, 211)",LIGHTGREEN:"rgb(144, 238, 144)",LIGHTGREY:"rgb(211, 211, 211)",LIGHTPINK:"rgb(255, 182, 193)",LIGHTSALMON:"rgb(255, 160, 122)",LIGHTSEAGREEN:"rgb(32, 178, 170)",LIGHTSKYBLUE:"rgb(135, 206, 250)",LIGHTSLATEGRAY:"rgb(119, 136, 153)",LIGHTSLATEGREY:"rgb(119, 136, 153)",LIGHTSTEELBLUE:"rgb(176, 196, 222)",LIGHTYELLOW:"rgb(255, 255, 224)",LIME:"rgb(0, 255, 0)",LIMEGREEN:"rgb(50, 205, 50)",LINEN:"rgb(250, 240, 230)",MAGENTA:"rgb(255, 0, 255)",MAROON:"rgb(128, 0, 0)",MEDIUMAQUAMARINE:"rgb(102, 205, 170)",MEDIUMBLUE:"rgb(0, 0, 205)",MEDIUMORCHID:"rgb(186, 85, 211)",MEDIUMPURPLE:"rgb(147, 112, 219)",MEDIUMSEAGREEN:"rgb(60, 179, 113)",MEDIUMSLATEBLUE:"rgb(123, 104, 238)",MEDIUMSPRINGGREEN:"rgb(0, 250, 154)",MEDIUMTURQUOISE:"rgb(72, 209, 204)",MEDIUMVIOLETRED:"rgb(199, 21, 133)",MIDNIGHTBLUE:"rgb(25, 25, 112)",MINTCREAM:"rgb(245, 255, 250)",MISTYROSE:"rgb(255, 228, 225)",MOCCASIN:"rgb(255, 228, 181)",NAVAJOWHITE:"rgb(255, 222, 173)",NAVY:"rgb(0, 0, 128)",OLDLACE:"rgb(253, 245, 230)",OLIVE:"rgb(128, 128, 0)",OLIVEDRAB:"rgb(107, 142, 35)",ORANGE:"rgb(255, 165, 0)",ORANGERED:"rgb(255, 69, 0)",ORCHID:"rgb(218, 112, 214)",PALEGOLDENROD:"rgb(238, 232, 170)",PALEGREEN:"rgb(152, 251, 152)",PALETURQUOISE:"rgb(175, 238, 238)",PALEVIOLETRED:"rgb(219, 112, 147)",PAPAYAWHIP:"rgb(255, 239, 213)",PEACHPUFF:"rgb(255, 218, 185)",PERU:"rgb(205, 133, 63)",PINK:"rgb(255, 192, 203)",PLUM:"rgb(221, 160, 221)",POWDERBLUE:"rgb(176, 224, 230)",PURPLE:"rgb(128, 0, 128)",REBECCAPURPLE:"rgb(102, 51, 153)",RED:"rgb(255, 0, 0)",ROSYBROWN:"rgb(188, 143, 143)",ROYALBLUE:"rgb(65, 105, 225)",SADDLEBROWN:"rgb(139, 69, 19)",SALMON:"rgb(250, 128, 114)",SANDYBROWN:"rgb(244, 164, 96)",SEAGREEN:"rgb(46, 139, 87)",SEASHELL:"rgb(255, 245, 238)",SIENNA:"rgb(160, 82, 45)",SILVER:"rgb(192, 192, 192)",SKYBLUE:"rgb(135, 206, 235)",SLATEBLUE:"rgb(106, 90, 205)",SLATEGRAY:"rgb(112, 128, 144)",SLATEGREY:"rgb(112, 128, 144)",SNOW:"rgb(255, 250, 250)",SPRINGGREEN:"rgb(0, 255, 127)",STEELBLUE:"rgb(70, 130, 180)",TAN:"rgb(210, 180, 140)",TEAL:"rgb(0, 128, 128)",THISTLE:"rgb(216, 191, 216)",TOMATO:"rgb(255, 99, 71)",TRANSPARENT:"rgba(0,0,0,0)",TURQUOISE:"rgb(64, 224, 208)",VIOLET:"rgb(238, 130, 238)",WHEAT:"rgb(245, 222, 179)",WHITE:"rgb(255, 255, 255)",WHITESMOKE:"rgb(245, 245, 245)",YELLOW:"rgb(255, 255, 0)",YELLOWGREEN:"rgb(154, 205, 50)"};function D(n,e,x,t,$,m,E){var i,s,f,a,o=x.length,g=x[0].length;if(e<1)throw new Error("degree must be at least 1 (linear)");if(e>o-1)throw new Error("degree must be less than or equal to point count - 1");if(!$)for($=[],i=0;i<o;i++)$[i]=1;if($.length<x.length&&($=$.concat($.slice(0,e))),t){if(t.length!==o+e+1)throw new Error("bad knot vector length")}else{var t=[];for(i=0;i<o+e+1;i++)t[i]=i}t.length===x.length&&(t=t.concat(t.slice(0,e)));var d=[e,t.length-1-e],A=t[d[0]],p=t[d[1]];if(E||(n=n*(p-A)+A),n<A||n>p)throw new Error("out of bounds");for(f=d[0];f<d[1]&&!(n>=t[f]&&n<=t[f+1]);f++);var b=[];for(i=0;i<o;i++){for(b[i]=[],s=0;s<g;s++)b[i][s]=x[i][s]*$[i];b[i][g]=$[i]}var u;for(a=1;a<=e+1;a++)for(i=f;i>f-e-1+a;i--)for(u=(n-t[i])/(t[i+e+1-a]-t[i]),s=0;s<g+1;s++)b[i][s]=(1-u)*b[i-1][s]+u*b[i][s];var m=m||[];for(i=0;i<g;i++)m[i]=b[f][i]/b[f][g];return m}l(D,"interpolate");var c=3,L=class{static{l(this,"BSpline")}constructor(e,x=!0){this.points=e,this.points=e.map(t=>t instanceof Array?t:[t.x,t.y]),this.formKnots(x),this.formWeights()}getLUT(e=100){let x=e-1;return[...new Array(e)].map((t,$)=>{let r=D($/x,c,this.points,this.knots,this.weights);return{x:r[0],y:r[1]}})}formKnots(e=!1){if(!e)return this.formUniformKnots();let x=[],t=this.points.length,$=t-c;for(let r=1;r<t-c;r++)x.push(r+c);for(let r=0;r<=c;r++)x=[c].concat(x);for(let r=0;r<=c;r++)x.push($+c);return this.knots=x}formUniformKnots(){return this.knots=[...new Array(this.points.length+c+1)].map((e,x)=>x)}formWeights(){return this.weights=this.points.map(e=>1)}};function I(n,e=512){let x=new TextEncoder().encode(n),t="";for(let $=0;$<x.length;$+=e){let r=x.slice($,$+e);t+=String.fromCodePoint(...r)}return btoa(t)}l(I,"base64");function U(n){let e=atob(n),x=Uint8Array.from(e,t=>t.codePointAt(0));return new TextDecoder().decode(x)}l(U,"decode64");function C(n){let e=/^(.*)\/([^.]+(\.([^\/?#]+))+)(\?[^#]*)?(#.*)?$/,x=n.match(e);if(x!==null){let{[1]:t,[2]:$,[4]:r}=x;n=t}return n}l(C,"getURLbase");function M(n){if(typeof window>"u"||typeof document>"u")return!0;var e=n.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}l(M,"isInViewport");var k=String(import.meta.url),B=U(""),R=class extends h{static{l(this,"GraphicsElement")}set onload(e){this._onload=e}set onerror(e){this._onerror=e}handleAttributeChange(...e){}handleChildChanges(...e){}connectedCallback(){super.connectedCallback(),this.label=document.createElement("label"),this.title||(console.warn("<graphics-element> is missing a title attribute. Always caption your figures."),this.title=""),this.label.textContent=this.title,M(this)?this.loadSource():new IntersectionObserver((e,x)=>e.forEach(t=>{t.isIntersecting&&(this.loadSource(),x.disconnect())}),{threshold:.1,rootMargin:`${window.innerHeight}px`}).observe(this)}getStyle(){return`
:host([hidden]) { display: none; }
style { display: none; }
.top-title { display: flex; flex-direction: row; justify-content: space-between; }
canvas { touch-action: none; user-select: none; position: relative; z-index: 1; display: block; margin: auto; border-radius: 0; box-sizing: content-box !important; border: 1px solid lightgrey;
&.crisp { image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }
&:focus { border: 1px solid red; }}
a { &.view-source { font-size: 60%; text-decoration: none;
&.plus { padding-left: 0.5em; }}}
button.reset { font-size: 0.5em; top: -0.35em; position: relative; }
label:not(:empty) { display: block; font-style: italic; font-size: 0.9em; text-align: right; padding-right: 1em; margin-top: 0.35em; }
`}async loadSource(e,x=this.width,t=this.height,$){if(!x&&!t&&(x=parseFloat(this.getAttribute("width")),t=parseFloat(this.getAttribute("height")),isNaN(x)&&(x=void 0),isNaN(t)&&(t=void 0)),e){if(typeof e=="function")return console.warn(".loadSource() called with a function rather than string data: use .loadFromFunction() instead."),this.loadFromFunction(e)}else if(this.userCode)e=this.userCode;else{let a=this.getAttribute("src");if(a)e=await(await fetch(a)).text();else{let o=this.querySelector("graphics-source");o?e=o.textContent:e=`function setup() {
}
function draw() {
}
`}}if(this.userCode=e,!$)if(this.additionalSources)$=this.additionalSources;else{let a=this.querySelectorAll("source");$=await Promise.all(Array.from(a).map(o=>fetch(o.src).then(g=>g.text())))}this.additionalSources=$;let r=this.userCode;this.additionalSources.length>0&&(r=this.loadAdditionalSources(this.userCode,this.additionalSources));let E=r.matchAll(/addSlider\(['"`](.*)['"`]/g),i=[];for(let a of E)i.push(a[1]),r=r.replace(a[0],a[0]+`, (v) => (${a[1]} = v)`);if(i.length&&(r="let "+i.join(", ")+`;
`+r),r=r.replaceAll(/ from ['"].([^'"]+)['"]/g,` from "${C(location.href)}/$1"`),r.includes("function setup()")||(r=`function setup() {
}
`+r),!r.includes("setSize(")){let a="setSize();";x&&t&&(a=`setSize(${x}, ${t});`),r=r.replace("function setup() {",`function setup() {
  ${a}`)}let s=Object.entries(this.dataset);s.length&&s.forEach(([a,o])=>{parseFloat(o)!=o&&o!=="true"&&o!=="false"&&(o=`"${o}"`),r=r.replace("function setup() {",`function setup() {
  ${a} = ${o};`)}),import(`data:text/javascript;base64,${I(['"use strict";',`import { BSpline, CSS_COLOR_MAP } from "${k}";`,`const __randomId = "${Date.now()}";`,B,r,`export {
  __reset as start,
  __canvas as canvas,
  __halt as halt,
  highlight,
  __getDescription as getDescription
}`].join(`
`))}`).then(async a=>{let{start:o,canvas:g,halt:d,highlight:A,getDescription:p}=a;this.canvas=g,this.halt=()=>d(),this.highlight=H=>A(H),this.render();let{width:b,height:u}=await o(this),m="graphics-element-description";this.querySelector(`.${m}`)?.remove(),this.querySelector("p")||this.handleGraphicsDescription(m,p),b&&u&&(this.style.width="",this.style.height="",this.width=b,this.height=u,this.setAttribute("width",b),this.setAttribute("height",u));let S=new CustomEvent("load");this.dispatchEvent(S),this._onload&&this._onload(S)}).catch(a=>{let o=new CustomEvent("error",{detail:a});if(this.dispatchEvent(o),this._onerror)this._onerror(a);else throw a})}handleGraphicsDescription(e,x=()=>{}){try{let t=x();if(t){let $=new DocumentFragment,r=document.createElement("div");r.classList.add(e),$.append(r),r.innerHTML=t,this.append(r),this.crossLink(!0)}}catch(t){console.error(t)}}loadAdditionalSources(e,x){if(!x)return e;let t=new Array(x.length);return e+`
`+x.map(($,r)=>$.replace("function setup()",`function setup${r+1}()`).replace("function draw()",`function draw${r+1}()`)).join(`
`)+`
function __more_setup() { ${[...t].map(($,r)=>`if (typeof setup${r+1} !== \`undefined\`) setup${r+1}();`).join(`
`)} }
function __more_draw() { ${[...t].map(($,r)=>`if (typeof draw${r+1} !== \`undefined\`) draw${r+1}();`).join(`
`)} }
`}loadFromFunction(e){let x=e.toString();this.reset(x.substring(x.indexOf("{")+1,x.lastIndexOf("}")))}reset(e,x=[]){this.halt&&this.halt(),this.querySelector("button.remove-color")?.remove(),this.loadSource(e||this.userCode,this.width,this.height,x||this.additionalSources)}render(){super.render();let e=this._slot.parentNode;this.canvas&&e.insertBefore(this.canvas,this._slot),this.label&&e.insertBefore(this.label,this._slot);let x=document.createElement("div");x.classList.add("top-title");let t=document.createElement("span");t.classList.add("sources"),x.append(t);let $=document.createElement("button");$.classList.add("reset"),$.textContent=this.getAttribute("reset")||"reset",$.addEventListener("click",()=>this.reset()),x.append($);let r=this.getAttribute("src");if(r||(r=`data:text/plain;base64,${I(this.userCode)}`),r){let i=document.createElement("a");i.classList.add("view-source"),i.textContent=this.getAttribute("viewSource")||"view source",i.href=r,i.target="_blank",t.append(i),r.startsWith("data")&&(delete i.href,delete i.target,i.classList.add("fake-source-link"),i.addEventListener("click",()=>{let s=`<iframe width="100%" height="100%" src="${r}"></iframe>`,f=window.open(""),{document:a}=f;a.open(),a.write(s),a.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),a.close()}))}let E=this.querySelectorAll("source");E.length===0&&(E=(this.additionalSources??[]).map(i=>({src:`data:text/plain;base64,${I(i)}`}))),E.length&&E.forEach((i,s)=>{let{src:f}=i,a=document.createElement("a");a.classList.add("view-source","plus"),a.textContent=`[+${s+1}]`,a.href=f,a.target="_blank",t.append(a),f.startsWith("data")&&(delete a.href,delete a.target,a.classList.add("fake-source-link"),a.addEventListener("click",()=>{let o=`<iframe width="100%" height="100%" src="${f}"></iframe>`,g=window.open(""),{document:d}=g;d.open(),d.write(o),d.write("<style>iframe { position: fixed; top: 0; right: 0; bottom: 0; left: 0; border:0; margin: 0; padding:0 }</style>"),d.close()}))}),this.label&&e.insertBefore(x,this.canvas),this.crossLink()}crossLink(e){if(e&&(this.crossLinked=!1),this.crossLinked)return;this.crossLinked=!0;let x=!1;if(this.querySelectorAll("p").forEach(t=>{t.querySelectorAll("*").forEach($=>{if(!O.includes($.tagName))return;x=!0;let r;$.classList.remove("calm"),$.addEventListener("pointerenter",()=>{r??=getComputedStyle($)["-webkit-text-stroke-color"],this.highlight?.(r)}),$.addEventListener("pointerleave",()=>this.highlight?.(!1))})}),x){let t=document.createElement("button");t.textContent="remove colors",t.classList.add("remove-color"),t.addEventListener("click",()=>{this.querySelectorAll("p").forEach($=>{$.querySelectorAll("*").forEach(r=>{O.includes(r.tagName)&&r.classList.add("calm")})}),t.remove()}),this.append(t)}}},N=class extends h{static{l(this,"GraphicsSource")}constructor(){super(),this.style.display="none"}handleAttributeChange(){}handleChildChanges(){}};h.register(R),h.register(N),globalThis.GraphicsElement=R,await customElements.whenDefined("graphics-element"),await customElements.whenDefined("graphics-source");export{L as BSpline,w as CSS_COLOR_MAP,R as GraphicsElement,N as GraphicsSource};
